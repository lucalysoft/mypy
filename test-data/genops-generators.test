[case testYieldBasic]
from typing import Iterable

def yield_three_times() -> Iterable:
    yield 1
    yield 2

[out]
def yield_three_times__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_three_times__gen
    type, value, traceback :: object
    r0 :: yield_three_times__env
    r1 :: int
    r2 :: object
    r3, r4 :: bool
    r5 :: short_int
    r6 :: object
    r7 :: short_int
    r8 :: bool
    r9 :: object
    r10, r11 :: bool
    r12 :: None
    r13 :: short_int
    r14 :: object
    r15 :: short_int
    r16 :: bool
    r17 :: object
    r18, r19 :: bool
    r20, r21 :: None
    r22 :: object
    r23 :: short_int
    r24, r25 :: bool
    r26 :: short_int
    r27 :: bool
    r28 :: short_int
    r29 :: bool
    r30 :: short_int
    r31, r32 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L13
L1:
    r2 = builtins.None :: object
    r3 = type is not r2
    if r3 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r4 = 0
    unreachable
L3:
L4:
    r5 = 1
    r6 = box(short_int, r5)
    r7 = 1
    r0.__mypyc_next_label__ = r7; r8 = is_error
    return r6
L5:
    r9 = builtins.None :: object
    r10 = type is not r9
    if r10 goto L6 else goto L7 :: bool
L6:
    raise_exception_with_tb(type, value, traceback); r11 = 0
    unreachable
L7:
    r12 = None
L8:
    r13 = 2
    r14 = box(short_int, r13)
    r15 = 2
    r0.__mypyc_next_label__ = r15; r16 = is_error
    return r14
L9:
    r17 = builtins.None :: object
    r18 = type is not r17
    if r18 goto L10 else goto L11 :: bool
L10:
    raise_exception_with_tb(type, value, traceback); r19 = 0
    unreachable
L11:
    r20 = None
    r21 = None
    r22 = box(None, r21)
    r23 = -1
    r0.__mypyc_next_label__ = r23; r24 = is_error
L12:
    raise StopIteration(r22)
    unreachable
L13:
    r26 = 0
    r27 = r1 == r26 :: int
    if r27 goto L1 else goto L14 :: bool
L14:
    r28 = 1
    r29 = r1 == r28 :: int
    if r29 goto L5 else goto L15 :: bool
L15:
    r30 = 2
    r31 = r1 == r30 :: int
    if r31 goto L9 else goto L16 :: bool
L16:
    raise StopIteration
    unreachable
def yield_three_times__gen.__next__(__mypyc_self__):
    __mypyc_self__ :: yield_three_times__gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = yield_three_times__gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def yield_three_times__gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: yield_three_times__gen
L0:
    return __mypyc_self__
def yield_three_times__gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_three_times__gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_three_times__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def yield_three_times():
    r0 :: yield_three_times__env
    r1 :: yield_three_times__gen
    r2 :: bool
    r3 :: short_int
    r4 :: bool
L0:
    r0 = yield_three_times__env()
    r1 = yield_three_times__gen()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = 0
    r0.__mypyc_next_label__ = r3; r4 = is_error
    return r1

[case testYieldWhileLoop]
from typing import Generator

def yield_while_loop() -> Generator:
    i = 0
    while i < 5:
        yield i
        i += 1

[out]
def yield_while_loop__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_while_loop__gen
    type, value, traceback :: object
    r0 :: yield_while_loop__env
    r1 :: int
    r2 :: object
    r3, r4 :: bool
    r5 :: short_int
    r6 :: bool
    r7 :: int
    r8 :: short_int
    r9 :: bool
    r10 :: int
    r11 :: object
    r12 :: short_int
    r13 :: bool
    r14 :: object
    r15, r16 :: bool
    r17 :: None
    r18 :: object
    r19 :: int
    r20 :: short_int
    r21 :: int
    r22 :: bool
    r23 :: None
    r24 :: object
    r25 :: short_int
    r26, r27 :: bool
    r28 :: short_int
    r29 :: bool
    r30 :: short_int
    r31, r32 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L12
L1:
    r2 = builtins.None :: object
    r3 = type is not r2
    if r3 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r4 = 0
    unreachable
L3:
    r5 = 0
    r0.i = r5; r6 = is_error
L4:
    r7 = r0.i
    r8 = 5
    r9 = r7 < r8 :: int
    if r9 goto L5 else goto L10 :: bool
L5:
L6:
    r10 = r0.i
    r11 = box(int, r10)
    r12 = 1
    r0.__mypyc_next_label__ = r12; r13 = is_error
    return r11
L7:
    r14 = builtins.None :: object
    r15 = type is not r14
    if r15 goto L8 else goto L9 :: bool
L8:
    raise_exception_with_tb(type, value, traceback); r16 = 0
    unreachable
L9:
    r17 = None
    r18 = box(None, r17)
    r19 = r0.i
    r20 = 1
    r21 = r19 += r20 :: int
    r0.i = r21; r22 = is_error
    goto L4
L10:
    r23 = None
    r24 = box(None, r23)
    r25 = -1
    r0.__mypyc_next_label__ = r25; r26 = is_error
L11:
    raise StopIteration(r24)
    unreachable
L12:
    r28 = 0
    r29 = r1 == r28 :: int
    if r29 goto L1 else goto L13 :: bool
L13:
    r30 = 1
    r31 = r1 == r30 :: int
    if r31 goto L7 else goto L14 :: bool
L14:
    raise StopIteration
    unreachable
def yield_while_loop__gen.__next__(__mypyc_self__):
    __mypyc_self__ :: yield_while_loop__gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = yield_while_loop__gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def yield_while_loop__gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: yield_while_loop__gen
L0:
    return __mypyc_self__
def yield_while_loop__gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_while_loop__gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_while_loop__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def yield_while_loop():
    r0 :: yield_while_loop__env
    r1 :: yield_while_loop__gen
    r2 :: bool
    r3 :: short_int
    r4 :: bool
L0:
    r0 = yield_while_loop__env()
    r1 = yield_while_loop__gen()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = 0
    r0.__mypyc_next_label__ = r3; r4 = is_error
    return r1

[case testYieldForLoops]
from typing import Iterable

def yield_for_loop_list() -> Iterable:
    l = [range(5)]
    for i in l:
        yield i

def yield_for_loop_dict() -> Iterable:
    d = {i: None for i in range(5)}
    for i in d:
        yield i

def yield_for_loop_range() -> Iterable:
    for i in range(5):
        yield i

[out]
def yield_for_loop_list__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_for_loop_list__gen
    type, value, traceback :: object
    r0 :: yield_for_loop_list__env
    r1 :: int
    r2 :: object
    r3, r4 :: bool
    r5 :: short_int
    r6 :: object
    r7 :: str
    r8, r9, r10 :: object
    r11 :: list
    r12 :: bool
    r13 :: list
    r14 :: short_int
    r15, r16 :: bool
    r17 :: list
    r18, r19 :: short_int
    r20 :: bool
    r21 :: list
    r22 :: short_int
    r23, r24 :: object
    r25 :: bool
    r26 :: object
    r27 :: short_int
    r28 :: bool
    r29 :: object
    r30, r31 :: bool
    r32 :: None
    r33, r34, r35 :: short_int
    r36 :: bool
    r37 :: None
    r38 :: object
    r39 :: short_int
    r40, r41 :: bool
    r42 :: short_int
    r43 :: bool
    r44 :: short_int
    r45, r46 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L13
L1:
    r2 = builtins.None :: object
    r3 = type is not r2
    if r3 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r4 = 0
    unreachable
L3:
    r5 = 5
    r6 = builtins.module :: static
    r7 = unicode_3 :: static  ('range')
    r8 = getattr r6, r7
    r9 = box(short_int, r5)
    r10 = py_call(r8, r9)
    r11 = [r10]
    r0.l = r11; r12 = is_error
    r13 = r0.l
    r14 = 0
    r0.__mypyc_temp__0 = r13; r15 = is_error
    r0.__mypyc_temp__1 = r14; r16 = is_error
L4:
    r17 = r0.__mypyc_temp__0
    r18 = len r17 :: list
    r19 = r0.__mypyc_temp__1
    r20 = r19 < r18 :: short_int
    if r20 goto L5 else goto L11 :: bool
L5:
    r21 = r0.__mypyc_temp__0
    r22 = r0.__mypyc_temp__1
    r23 = r21[r22] :: unsafe list
    r24 = cast(object, r23)
    r0.i = r24; r25 = is_error
L6:
    r26 = r0.i
    r27 = 1
    r0.__mypyc_next_label__ = r27; r28 = is_error
    return r26
L7:
    r29 = builtins.None :: object
    r30 = type is not r29
    if r30 goto L8 else goto L9 :: bool
L8:
    raise_exception_with_tb(type, value, traceback); r31 = 0
    unreachable
L9:
    r32 = None
L10:
    r33 = r0.__mypyc_temp__1
    r34 = 1
    r35 = r33 + r34 :: short_int
    r0.__mypyc_temp__1 = r35; r36 = is_error
    goto L4
L11:
    r37 = None
    r38 = box(None, r37)
    r39 = -1
    r0.__mypyc_next_label__ = r39; r40 = is_error
L12:
    raise StopIteration(r38)
    unreachable
L13:
    r42 = 0
    r43 = r1 == r42 :: int
    if r43 goto L1 else goto L14 :: bool
L14:
    r44 = 1
    r45 = r1 == r44 :: int
    if r45 goto L7 else goto L15 :: bool
L15:
    raise StopIteration
    unreachable
def yield_for_loop_list__gen.__next__(__mypyc_self__):
    __mypyc_self__ :: yield_for_loop_list__gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = yield_for_loop_list__gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def yield_for_loop_list__gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: yield_for_loop_list__gen
L0:
    return __mypyc_self__
def yield_for_loop_list__gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_for_loop_list__gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_for_loop_list__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def yield_for_loop_list():
    r0 :: yield_for_loop_list__env
    r1 :: yield_for_loop_list__gen
    r2 :: bool
    r3 :: short_int
    r4 :: bool
L0:
    r0 = yield_for_loop_list__env()
    r1 = yield_for_loop_list__gen()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = 0
    r0.__mypyc_next_label__ = r3; r4 = is_error
    return r1
def yield_for_loop_dict__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_for_loop_dict__gen
    type, value, traceback :: object
    r0 :: yield_for_loop_dict__env
    r1 :: int
    r2 :: object
    r3, r4 :: bool
    r5 :: dict
    r6, r7 :: short_int
    r8, r9 :: bool
    r10 :: int
    r11 :: short_int
    r12 :: bool
    r13 :: int
    r14 :: None
    r15, r16 :: object
    r17 :: bool
    r18 :: int
    r19, r20 :: short_int
    r21, r22 :: bool
    r23 :: dict
    r24 :: object
    r25, r26 :: bool
    r27, r28 :: object
    r29 :: int
    r30 :: bool
    r31 :: int
    r32 :: object
    r33 :: short_int
    r34 :: bool
    r35 :: object
    r36, r37 :: bool
    r38 :: None
    r39 :: bool
    r40 :: None
    r41 :: object
    r42 :: short_int
    r43, r44 :: bool
    r45 :: short_int
    r46 :: bool
    r47 :: short_int
    r48, r49 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L18
L1:
    r2 = builtins.None :: object
    r3 = type is not r2
    if r3 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r4 = 0
    unreachable
L3:
    r5 = {}
    r6 = 0
    r7 = 5
    r0.__mypyc_temp__2 = r7; r8 = is_error
    r0.i = r6; r9 = is_error
L4:
    r10 = r0.i
    r11 = r0.__mypyc_temp__2
    r12 = r10 < r11 :: int
    if r12 goto L5 else goto L7 :: bool
L5:
    r13 = r0.i
    r14 = None
    r15 = box(int, r13)
    r16 = box(None, r14)
    r17 = r5.__setitem__(r15, r16) :: dict
L6:
    r18 = r0.i
    r19 = 1
    r20 = r18 + r19 :: short_int
    r0.i = r20; r21 = is_error
    goto L4
L7:
    r0.d = r5; r22 = is_error
    r23 = r0.d
    r24 = iter r23 :: object
    r0.__mypyc_temp__3 = r23; r25 = is_error
    r0.__mypyc_temp__4 = r24; r26 = is_error
L8:
    r27 = r0.__mypyc_temp__4
    r28 = next r27 :: object
    if is_error(r28) goto L15 else goto L9
L9:
    r29 = unbox(int, r28)
    r0.i = r29; r30 = is_error
L10:
    r31 = r0.i
    r32 = box(int, r31)
    r33 = 1
    r0.__mypyc_next_label__ = r33; r34 = is_error
    return r32
L11:
    r35 = builtins.None :: object
    r36 = type is not r35
    if r36 goto L12 else goto L13 :: bool
L12:
    raise_exception_with_tb(type, value, traceback); r37 = 0
    unreachable
L13:
    r38 = None
L14:
    goto L8
L15:
    r39 = no_err_occurred
L16:
    r40 = None
    r41 = box(None, r40)
    r42 = -1
    r0.__mypyc_next_label__ = r42; r43 = is_error
L17:
    raise StopIteration(r41)
    unreachable
L18:
    r45 = 0
    r46 = r1 == r45 :: int
    if r46 goto L1 else goto L19 :: bool
L19:
    r47 = 1
    r48 = r1 == r47 :: int
    if r48 goto L11 else goto L20 :: bool
L20:
    raise StopIteration
    unreachable
def yield_for_loop_dict__gen.__next__(__mypyc_self__):
    __mypyc_self__ :: yield_for_loop_dict__gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = yield_for_loop_dict__gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def yield_for_loop_dict__gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: yield_for_loop_dict__gen
L0:
    return __mypyc_self__
def yield_for_loop_dict__gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_for_loop_dict__gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_for_loop_dict__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def yield_for_loop_dict():
    r0 :: yield_for_loop_dict__env
    r1 :: yield_for_loop_dict__gen
    r2 :: bool
    r3 :: short_int
    r4 :: bool
L0:
    r0 = yield_for_loop_dict__env()
    r1 = yield_for_loop_dict__gen()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = 0
    r0.__mypyc_next_label__ = r3; r4 = is_error
    return r1
def yield_for_loop_range__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_for_loop_range__gen
    type, value, traceback :: object
    r0 :: yield_for_loop_range__env
    r1 :: int
    r2 :: object
    r3, r4 :: bool
    r5, r6 :: short_int
    r7, r8 :: bool
    r9 :: int
    r10 :: short_int
    r11 :: bool
    r12 :: int
    r13 :: object
    r14 :: short_int
    r15 :: bool
    r16 :: object
    r17, r18 :: bool
    r19 :: None
    r20 :: int
    r21, r22 :: short_int
    r23 :: bool
    r24 :: None
    r25 :: object
    r26 :: short_int
    r27, r28 :: bool
    r29 :: short_int
    r30 :: bool
    r31 :: short_int
    r32, r33 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L13
L1:
    r2 = builtins.None :: object
    r3 = type is not r2
    if r3 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r4 = 0
    unreachable
L3:
    r5 = 0
    r6 = 5
    r0.__mypyc_temp__5 = r6; r7 = is_error
    r0.i = r5; r8 = is_error
L4:
    r9 = r0.i
    r10 = r0.__mypyc_temp__5
    r11 = r9 < r10 :: int
    if r11 goto L5 else goto L11 :: bool
L5:
L6:
    r12 = r0.i
    r13 = box(int, r12)
    r14 = 1
    r0.__mypyc_next_label__ = r14; r15 = is_error
    return r13
L7:
    r16 = builtins.None :: object
    r17 = type is not r16
    if r17 goto L8 else goto L9 :: bool
L8:
    raise_exception_with_tb(type, value, traceback); r18 = 0
    unreachable
L9:
    r19 = None
L10:
    r20 = r0.i
    r21 = 1
    r22 = r20 + r21 :: short_int
    r0.i = r22; r23 = is_error
    goto L4
L11:
    r24 = None
    r25 = box(None, r24)
    r26 = -1
    r0.__mypyc_next_label__ = r26; r27 = is_error
L12:
    raise StopIteration(r25)
    unreachable
L13:
    r29 = 0
    r30 = r1 == r29 :: int
    if r30 goto L1 else goto L14 :: bool
L14:
    r31 = 1
    r32 = r1 == r31 :: int
    if r32 goto L7 else goto L15 :: bool
L15:
    raise StopIteration
    unreachable
def yield_for_loop_range__gen.__next__(__mypyc_self__):
    __mypyc_self__ :: yield_for_loop_range__gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = yield_for_loop_range__gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def yield_for_loop_range__gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: yield_for_loop_range__gen
L0:
    return __mypyc_self__
def yield_for_loop_range__gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_for_loop_range__gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_for_loop_range__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def yield_for_loop_range():
    r0 :: yield_for_loop_range__env
    r1 :: yield_for_loop_range__gen
    r2 :: bool
    r3 :: short_int
    r4 :: bool
L0:
    r0 = yield_for_loop_range__env()
    r1 = yield_for_loop_range__gen()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = 0
    r0.__mypyc_next_label__ = r3; r4 = is_error
    return r1

[case testYieldComplex]
from typing import Generator

def yield_with_vars(a: int, b: float) -> Generator[int, None, float]:
    x = 2
    while x < a:
        yield x
        x += 1
    return b

[out]
def yield_with_vars__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_with_vars__gen
    type, value, traceback :: object
    r0 :: yield_with_vars__env
    r1 :: int
    r2 :: object
    r3, r4 :: bool
    r5 :: short_int
    r6 :: bool
    r7, r8 :: int
    r9 :: bool
    r10 :: int
    r11 :: object
    r12 :: short_int
    r13 :: bool
    r14 :: object
    r15, r16 :: bool
    r17 :: None
    r18 :: int
    r19 :: short_int
    r20 :: int
    r21 :: bool
    r22 :: float
    r23 :: short_int
    r24, r25 :: bool
    r26 :: short_int
    r27 :: bool
    r28 :: short_int
    r29, r30 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L12
L1:
    r2 = builtins.None :: object
    r3 = type is not r2
    if r3 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r4 = 0
    unreachable
L3:
    r5 = 2
    r0.x = r5; r6 = is_error
L4:
    r7 = r0.x
    r8 = r0.a
    r9 = r7 < r8 :: int
    if r9 goto L5 else goto L10 :: bool
L5:
L6:
    r10 = r0.x
    r11 = box(int, r10)
    r12 = 1
    r0.__mypyc_next_label__ = r12; r13 = is_error
    return r11
L7:
    r14 = builtins.None :: object
    r15 = type is not r14
    if r15 goto L8 else goto L9 :: bool
L8:
    raise_exception_with_tb(type, value, traceback); r16 = 0
    unreachable
L9:
    r17 = None
    r18 = r0.x
    r19 = 1
    r20 = r18 += r19 :: int
    r0.x = r20; r21 = is_error
    goto L4
L10:
    r22 = r0.b
    r23 = -1
    r0.__mypyc_next_label__ = r23; r24 = is_error
L11:
    raise StopIteration(r22)
    unreachable
L12:
    r26 = 0
    r27 = r1 == r26 :: int
    if r27 goto L1 else goto L13 :: bool
L13:
    r28 = 1
    r29 = r1 == r28 :: int
    if r29 goto L7 else goto L14 :: bool
L14:
    raise StopIteration
    unreachable
def yield_with_vars__gen.__next__(__mypyc_self__):
    __mypyc_self__ :: yield_with_vars__gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = yield_with_vars__gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def yield_with_vars__gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: yield_with_vars__gen
L0:
    return __mypyc_self__
def yield_with_vars__gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_with_vars__gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_with_vars__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def yield_with_vars(a, b):
    a :: int
    b :: float
    r0 :: yield_with_vars__env
    r1, r2 :: bool
    r3 :: yield_with_vars__gen
    r4 :: bool
    r5 :: short_int
    r6 :: bool
L0:
    r0 = yield_with_vars__env()
    r0.a = a; r1 = is_error
    r0.b = b; r2 = is_error
    r3 = yield_with_vars__gen()
    r3.__mypyc_env__ = r0; r4 = is_error
    r5 = 0
    r0.__mypyc_next_label__ = r5; r6 = is_error
    return r3

[case testYieldInsideMethod]
from typing import Iterable

class A(object):
    def generator(self) -> Iterable[int]:
        yield 0

[out]
def generator__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: generator__gen
    type, value, traceback :: object
    r0 :: generator__env
    r1 :: int
    r2 :: object
    r3, r4 :: bool
    r5 :: short_int
    r6 :: object
    r7 :: short_int
    r8 :: bool
    r9 :: object
    r10, r11 :: bool
    r12, r13 :: None
    r14 :: object
    r15 :: short_int
    r16, r17 :: bool
    r18 :: short_int
    r19 :: bool
    r20 :: short_int
    r21, r22 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L9
L1:
    r2 = builtins.None :: object
    r3 = type is not r2
    if r3 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r4 = 0
    unreachable
L3:
L4:
    r5 = 0
    r6 = box(short_int, r5)
    r7 = 1
    r0.__mypyc_next_label__ = r7; r8 = is_error
    return r6
L5:
    r9 = builtins.None :: object
    r10 = type is not r9
    if r10 goto L6 else goto L7 :: bool
L6:
    raise_exception_with_tb(type, value, traceback); r11 = 0
    unreachable
L7:
    r12 = None
    r13 = None
    r14 = box(None, r13)
    r15 = -1
    r0.__mypyc_next_label__ = r15; r16 = is_error
L8:
    raise StopIteration(r14)
    unreachable
L9:
    r18 = 0
    r19 = r1 == r18 :: int
    if r19 goto L1 else goto L10 :: bool
L10:
    r20 = 1
    r21 = r1 == r20 :: int
    if r21 goto L5 else goto L11 :: bool
L11:
    raise StopIteration
    unreachable
def generator__gen.__next__(__mypyc_self__):
    __mypyc_self__ :: generator__gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = generator__gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def generator__gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: generator__gen
L0:
    return __mypyc_self__
def generator__gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: generator__gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = generator__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def A.generator(self):
    self :: A
    r0 :: generator__env
    r1 :: bool
    r2 :: generator__gen
    r3 :: bool
    r4 :: short_int
    r5 :: bool
L0:
    r0 = generator__env()
    r0.self = self; r1 = is_error
    r2 = generator__gen()
    r2.__mypyc_env__ = r0; r3 = is_error
    r4 = 0
    r0.__mypyc_next_label__ = r4; r5 = is_error
    return r2

[case testYieldIfElse]
from typing import Generator

def generator(a: int) -> Generator:
    if a < 5:
        yield a
    else:
        return

[out]
def generator__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: generator__gen
    type, value, traceback :: object
    r0 :: generator__env
    r1 :: int
    r2 :: object
    r3, r4 :: bool
    r5 :: int
    r6 :: short_int
    r7 :: bool
    r8 :: int
    r9 :: object
    r10 :: short_int
    r11 :: bool
    r12 :: object
    r13, r14 :: bool
    r15 :: None
    r16 :: object
    r17 :: None
    r18 :: object
    r19 :: short_int
    r20, r21 :: bool
    r22 :: None
    r23 :: object
    r24 :: short_int
    r25, r26 :: bool
    r27 :: short_int
    r28 :: bool
    r29 :: short_int
    r30, r31 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L13
L1:
    r2 = builtins.None :: object
    r3 = type is not r2
    if r3 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r4 = 0
    unreachable
L3:
    r5 = r0.a
    r6 = 5
    r7 = r5 < r6 :: int
    if r7 goto L4 else goto L9 :: bool
L4:
L5:
    r8 = r0.a
    r9 = box(int, r8)
    r10 = 1
    r0.__mypyc_next_label__ = r10; r11 = is_error
    return r9
L6:
    r12 = builtins.None :: object
    r13 = type is not r12
    if r13 goto L7 else goto L8 :: bool
L7:
    raise_exception_with_tb(type, value, traceback); r14 = 0
    unreachable
L8:
    r15 = None
    r16 = box(None, r15)
    goto L11
L9:
    r17 = None
    r18 = box(None, r17)
    r19 = -1
    r0.__mypyc_next_label__ = r19; r20 = is_error
L10:
    raise StopIteration(r18)
    unreachable
L11:
    r22 = None
    r23 = box(None, r22)
    r24 = -1
    r0.__mypyc_next_label__ = r24; r25 = is_error
L12:
    raise StopIteration(r23)
    unreachable
L13:
    r27 = 0
    r28 = r1 == r27 :: int
    if r28 goto L1 else goto L14 :: bool
L14:
    r29 = 1
    r30 = r1 == r29 :: int
    if r30 goto L6 else goto L15 :: bool
L15:
    raise StopIteration
    unreachable
def generator__gen.__next__(__mypyc_self__):
    __mypyc_self__ :: generator__gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = generator__gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def generator__gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: generator__gen
L0:
    return __mypyc_self__
def generator__gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: generator__gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = generator__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def generator(a):
    a :: int
    r0 :: generator__env
    r1 :: bool
    r2 :: generator__gen
    r3 :: bool
    r4 :: short_int
    r5 :: bool
L0:
    r0 = generator__env()
    r0.a = a; r1 = is_error
    r2 = generator__gen()
    r2.__mypyc_env__ = r0; r3 = is_error
    r4 = 0
    r0.__mypyc_next_label__ = r4; r5 = is_error
    return r2

[case testYieldNested]
from typing import Callable, Generator

def generator(a: int) -> Generator:
    def normal(x: int) -> int:
        return a + x
    yield normal(1)

def normal(a: int) -> Callable:
    def generator(x: int) -> Generator:
        yield a
        yield x
    return generator

def triple() -> Callable:
    def generator() -> Generator:
        x = 0
        def inner() -> int:
            x += 1
            return x
        while x < 3:
            yield inner()
    return generator

def outer() -> Generator:
    def recursive(n: int) -> Generator:
        if n < 10:
            for i in range(n):
                yield i
            return
        for i in recursive(5):
            yield i
    return recursive(10)

[out]
def normal_generator_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bool
    r2 :: object
L0:
    r0 = builtins.None :: object
    r1 = instance is r0
    if r1 goto L1 else goto L2 :: bool
L1:
    return __mypyc_self__
L2:
    r2 = method_new __mypyc_self__, instance
    return r2
def normal_generator_obj.__call__(__mypyc_self__, x):
    __mypyc_self__ :: normal_generator_obj
    x :: int
    r0 :: generator__env
    r1, normal :: object
    r2, r3 :: int
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.normal
    normal = r1
    r2 = r0.a
    r3 = r2 + x :: int
    return r3
def generator__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: generator__gen
    type, value, traceback :: object
    r0 :: generator__env
    r1 :: int
    r2 :: object
    r3, r4 :: bool
    r5 :: normal_generator_obj
    r6, r7 :: bool
    r8 :: short_int
    r9, r10, r11 :: object
    r12 :: int
    r13 :: object
    r14 :: short_int
    r15 :: bool
    r16 :: object
    r17, r18 :: bool
    r19 :: None
    r20 :: object
    r21 :: None
    r22 :: object
    r23 :: short_int
    r24, r25 :: bool
    r26 :: short_int
    r27 :: bool
    r28 :: short_int
    r29, r30 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L9
L1:
    r2 = builtins.None :: object
    r3 = type is not r2
    if r3 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r4 = 0
    unreachable
L3:
    r5 = normal_generator_obj()
    r5.__mypyc_env__ = r0; r6 = is_error
    r0.normal = r5; r7 = is_error
L4:
    r8 = 1
    r9 = r0.normal
    r10 = box(short_int, r8)
    r11 = py_call(r9, r10)
    r12 = unbox(int, r11)
    r13 = box(int, r12)
    r14 = 1
    r0.__mypyc_next_label__ = r14; r15 = is_error
    return r13
L5:
    r16 = builtins.None :: object
    r17 = type is not r16
    if r17 goto L6 else goto L7 :: bool
L6:
    raise_exception_with_tb(type, value, traceback); r18 = 0
    unreachable
L7:
    r19 = None
    r20 = box(None, r19)
    r21 = None
    r22 = box(None, r21)
    r23 = -1
    r0.__mypyc_next_label__ = r23; r24 = is_error
L8:
    raise StopIteration(r22)
    unreachable
L9:
    r26 = 0
    r27 = r1 == r26 :: int
    if r27 goto L1 else goto L10 :: bool
L10:
    r28 = 1
    r29 = r1 == r28 :: int
    if r29 goto L5 else goto L11 :: bool
L11:
    raise StopIteration
    unreachable
def generator__gen.__next__(__mypyc_self__):
    __mypyc_self__ :: generator__gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = generator__gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def generator__gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: generator__gen
L0:
    return __mypyc_self__
def generator__gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: generator__gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = generator__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def generator(a):
    a :: int
    r0 :: generator__env
    r1 :: bool
    r2 :: generator__gen
    r3 :: bool
    r4 :: short_int
    r5 :: bool
L0:
    r0 = generator__env()
    r0.a = a; r1 = is_error
    r2 = generator__gen()
    r2.__mypyc_env__ = r0; r3 = is_error
    r4 = 0
    r0.__mypyc_next_label__ = r4; r5 = is_error
    return r2
def generator_normal_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bool
    r2 :: object
L0:
    r0 = builtins.None :: object
    r1 = instance is r0
    if r1 goto L1 else goto L2 :: bool
L1:
    return __mypyc_self__
L2:
    r2 = method_new __mypyc_self__, instance
    return r2
def generator_normal_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: generator_normal_gen
    type, value, traceback :: object
    r0 :: generator_normal_env
    r1 :: int
    r2, r3 :: normal__env
    r4, generator, r5 :: object
    r6, r7 :: bool
    r8 :: int
    r9 :: object
    r10 :: short_int
    r11 :: bool
    r12 :: object
    r13, r14 :: bool
    r15 :: None
    r16 :: object
    r17 :: int
    r18 :: object
    r19 :: short_int
    r20 :: bool
    r21 :: object
    r22, r23 :: bool
    r24 :: None
    r25 :: object
    r26 :: None
    r27 :: object
    r28 :: short_int
    r29, r30 :: bool
    r31 :: short_int
    r32 :: bool
    r33 :: short_int
    r34 :: bool
    r35 :: short_int
    r36, r37 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    r2 = r0.__mypyc_env__
    r3 = r0.__mypyc_env__
    r4 = r3.generator
    generator = r4
    goto L13
L1:
    r5 = builtins.None :: object
    r6 = type is not r5
    if r6 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r7 = 0
    unreachable
L3:
L4:
    r8 = r2.a
    r9 = box(int, r8)
    r10 = 1
    r0.__mypyc_next_label__ = r10; r11 = is_error
    return r9
L5:
    r12 = builtins.None :: object
    r13 = type is not r12
    if r13 goto L6 else goto L7 :: bool
L6:
    raise_exception_with_tb(type, value, traceback); r14 = 0
    unreachable
L7:
    r15 = None
    r16 = box(None, r15)
L8:
    r17 = r0.x
    r18 = box(int, r17)
    r19 = 2
    r0.__mypyc_next_label__ = r19; r20 = is_error
    return r18
L9:
    r21 = builtins.None :: object
    r22 = type is not r21
    if r22 goto L10 else goto L11 :: bool
L10:
    raise_exception_with_tb(type, value, traceback); r23 = 0
    unreachable
L11:
    r24 = None
    r25 = box(None, r24)
    r26 = None
    r27 = box(None, r26)
    r28 = -1
    r0.__mypyc_next_label__ = r28; r29 = is_error
L12:
    raise StopIteration(r27)
    unreachable
L13:
    r31 = 0
    r32 = r1 == r31 :: int
    if r32 goto L1 else goto L14 :: bool
L14:
    r33 = 1
    r34 = r1 == r33 :: int
    if r34 goto L5 else goto L15 :: bool
L15:
    r35 = 2
    r36 = r1 == r35 :: int
    if r36 goto L9 else goto L16 :: bool
L16:
    raise StopIteration
    unreachable
def generator_normal_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: generator_normal_gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = generator_normal_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def generator_normal_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: generator_normal_gen
L0:
    return __mypyc_self__
def generator_normal_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: generator_normal_gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = generator_normal_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def generator_normal_obj.__call__(__mypyc_self__, x):
    __mypyc_self__ :: generator_normal_obj
    x :: int
    r0 :: normal__env
    r1, generator :: object
    r2 :: generator_normal_env
    r3, r4 :: bool
    r5 :: generator_normal_gen
    r6 :: bool
    r7 :: short_int
    r8 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.generator
    generator = r1
    r2 = generator_normal_env()
    r2.__mypyc_env__ = r0; r3 = is_error
    r2.x = x; r4 = is_error
    r5 = generator_normal_gen()
    r5.__mypyc_env__ = r2; r6 = is_error
    r7 = 0
    r2.__mypyc_next_label__ = r7; r8 = is_error
    return r5
def normal(a):
    a :: int
    r0 :: normal__env
    r1 :: bool
    r2 :: generator_normal_obj
    r3, r4 :: bool
    r5 :: object
L0:
    r0 = normal__env()
    r0.a = a; r1 = is_error
    r2 = generator_normal_obj()
    r2.__mypyc_env__ = r0; r3 = is_error
    r0.generator = r2; r4 = is_error
    r5 = r0.generator
    return r5
def generator_triple_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bool
    r2 :: object
L0:
    r0 = builtins.None :: object
    r1 = instance is r0
    if r1 goto L1 else goto L2 :: bool
L1:
    return __mypyc_self__
L2:
    r2 = method_new __mypyc_self__, instance
    return r2
def inner_triple_generator_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bool
    r2 :: object
L0:
    r0 = builtins.None :: object
    r1 = instance is r0
    if r1 goto L1 else goto L2 :: bool
L1:
    return __mypyc_self__
L2:
    r2 = method_new __mypyc_self__, instance
    return r2
def inner_triple_generator_obj.__call__(__mypyc_self__):
    __mypyc_self__ :: inner_triple_generator_obj
    r0 :: generator_triple_env
    r1 :: triple__env
    r2, inner :: object
    r3 :: int
    r4 :: short_int
    r5 :: int
    r6 :: bool
    r7 :: int
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_env__
    r2 = r0.inner
    inner = r2
    r3 = r0.x
    r4 = 1
    r5 = r3 += r4 :: int
    r0.x = r5; r6 = is_error
    r7 = r0.x
    return r7
def generator_triple_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: generator_triple_gen
    type, value, traceback :: object
    r0 :: generator_triple_env
    r1 :: int
    r2, r3 :: triple__env
    r4, generator, r5 :: object
    r6, r7 :: bool
    r8 :: short_int
    r9 :: bool
    r10 :: inner_triple_generator_obj
    r11, r12 :: bool
    r13 :: int
    r14 :: short_int
    r15 :: bool
    r16, r17 :: object
    r18 :: int
    r19 :: object
    r20 :: short_int
    r21 :: bool
    r22 :: object
    r23, r24 :: bool
    r25 :: None
    r26 :: object
    r27 :: None
    r28 :: object
    r29 :: short_int
    r30, r31 :: bool
    r32 :: short_int
    r33 :: bool
    r34 :: short_int
    r35, r36 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    r2 = r0.__mypyc_env__
    r3 = r0.__mypyc_env__
    r4 = r3.generator
    generator = r4
    goto L12
L1:
    r5 = builtins.None :: object
    r6 = type is not r5
    if r6 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r7 = 0
    unreachable
L3:
    r8 = 0
    r0.x = r8; r9 = is_error
    r10 = inner_triple_generator_obj()
    r10.__mypyc_env__ = r0; r11 = is_error
    r0.inner = r10; r12 = is_error
L4:
    r13 = r0.x
    r14 = 3
    r15 = r13 < r14 :: int
    if r15 goto L5 else goto L10 :: bool
L5:
L6:
    r16 = r0.inner
    r17 = py_call(r16)
    r18 = unbox(int, r17)
    r19 = box(int, r18)
    r20 = 1
    r0.__mypyc_next_label__ = r20; r21 = is_error
    return r19
L7:
    r22 = builtins.None :: object
    r23 = type is not r22
    if r23 goto L8 else goto L9 :: bool
L8:
    raise_exception_with_tb(type, value, traceback); r24 = 0
    unreachable
L9:
    r25 = None
    r26 = box(None, r25)
    goto L4
L10:
    r27 = None
    r28 = box(None, r27)
    r29 = -1
    r0.__mypyc_next_label__ = r29; r30 = is_error
L11:
    raise StopIteration(r28)
    unreachable
L12:
    r32 = 0
    r33 = r1 == r32 :: int
    if r33 goto L1 else goto L13 :: bool
L13:
    r34 = 1
    r35 = r1 == r34 :: int
    if r35 goto L7 else goto L14 :: bool
L14:
    raise StopIteration
    unreachable
def generator_triple_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: generator_triple_gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = generator_triple_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def generator_triple_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: generator_triple_gen
L0:
    return __mypyc_self__
def generator_triple_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: generator_triple_gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = generator_triple_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def generator_triple_obj.__call__(__mypyc_self__):
    __mypyc_self__ :: generator_triple_obj
    r0 :: triple__env
    r1, generator :: object
    r2 :: generator_triple_env
    r3 :: bool
    r4 :: generator_triple_gen
    r5 :: bool
    r6 :: short_int
    r7 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.generator
    generator = r1
    r2 = generator_triple_env()
    r2.__mypyc_env__ = r0; r3 = is_error
    r4 = generator_triple_gen()
    r4.__mypyc_env__ = r2; r5 = is_error
    r6 = 0
    r2.__mypyc_next_label__ = r6; r7 = is_error
    return r4
def triple():
    r0 :: triple__env
    r1 :: generator_triple_obj
    r2, r3 :: bool
    r4 :: object
L0:
    r0 = triple__env()
    r1 = generator_triple_obj()
    r1.__mypyc_env__ = r0; r2 = is_error
    r0.generator = r1; r3 = is_error
    r4 = r0.generator
    return r4
def recursive_outer_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bool
    r2 :: object
L0:
    r0 = builtins.None :: object
    r1 = instance is r0
    if r1 goto L1 else goto L2 :: bool
L1:
    return __mypyc_self__
L2:
    r2 = method_new __mypyc_self__, instance
    return r2
def recursive_outer_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: recursive_outer_gen
    type, value, traceback :: object
    r0 :: recursive_outer_env
    r1 :: int
    r2, r3 :: outer__env
    r4, recursive, r5 :: object
    r6, r7 :: bool
    r8 :: int
    r9 :: short_int
    r10 :: bool
    r11 :: short_int
    r12 :: int
    r13, r14 :: bool
    r15, r16 :: int
    r17 :: bool
    r18 :: int
    r19 :: object
    r20 :: short_int
    r21 :: bool
    r22 :: object
    r23, r24 :: bool
    r25 :: None
    r26 :: object
    r27 :: int
    r28 :: short_int
    r29 :: int
    r30 :: bool
    r31 :: None
    r32 :: object
    r33 :: short_int
    r34, r35 :: bool
    r36 :: short_int
    r37, r38, r39 :: object
    r40, r41 :: bool
    r42, r43 :: object
    r44 :: int
    r45 :: bool
    r46 :: int
    r47 :: object
    r48 :: short_int
    r49 :: bool
    r50 :: object
    r51, r52 :: bool
    r53 :: None
    r54 :: object
    r55 :: bool
    r56 :: None
    r57 :: object
    r58 :: short_int
    r59, r60 :: bool
    r61 :: short_int
    r62 :: bool
    r63 :: short_int
    r64 :: bool
    r65 :: short_int
    r66, r67 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    r2 = r0.__mypyc_env__
    r3 = r0.__mypyc_env__
    r4 = r3.recursive
    recursive = r4
    goto L25
L1:
    r5 = builtins.None :: object
    r6 = type is not r5
    if r6 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r7 = 0
    unreachable
L3:
    r8 = r0.n
    r9 = 10
    r10 = r8 < r9 :: int
    if r10 goto L4 else goto L14 :: bool
L4:
    r11 = 0
    r12 = r0.n
    r0.__mypyc_temp__0 = r12; r13 = is_error
    r0.i = r11; r14 = is_error
L5:
    r15 = r0.i
    r16 = r0.__mypyc_temp__0
    r17 = r15 < r16 :: int
    if r17 goto L6 else goto L12 :: bool
L6:
L7:
    r18 = r0.i
    r19 = box(int, r18)
    r20 = 1
    r0.__mypyc_next_label__ = r20; r21 = is_error
    return r19
L8:
    r22 = builtins.None :: object
    r23 = type is not r22
    if r23 goto L9 else goto L10 :: bool
L9:
    raise_exception_with_tb(type, value, traceback); r24 = 0
    unreachable
L10:
    r25 = None
    r26 = box(None, r25)
L11:
    r27 = r0.i
    r28 = 1
    r29 = r27 + r28 :: int
    r0.i = r29; r30 = is_error
    goto L5
L12:
    r31 = None
    r32 = box(None, r31)
    r33 = -1
    r0.__mypyc_next_label__ = r33; r34 = is_error
L13:
    raise StopIteration(r32)
    unreachable
L14:
    r36 = 5
    r37 = box(short_int, r36)
    r38 = py_call(recursive, r37)
    r39 = iter r38 :: object
    r0.__mypyc_temp__1 = r38; r40 = is_error
    r0.__mypyc_temp__2 = r39; r41 = is_error
L15:
    r42 = r0.__mypyc_temp__2
    r43 = next r42 :: object
    if is_error(r43) goto L22 else goto L16
L16:
    r44 = unbox(int, r43)
    r0.i = r44; r45 = is_error
L17:
    r46 = r0.i
    r47 = box(int, r46)
    r48 = 2
    r0.__mypyc_next_label__ = r48; r49 = is_error
    return r47
L18:
    r50 = builtins.None :: object
    r51 = type is not r50
    if r51 goto L19 else goto L20 :: bool
L19:
    raise_exception_with_tb(type, value, traceback); r52 = 0
    unreachable
L20:
    r53 = None
    r54 = box(None, r53)
L21:
    goto L15
L22:
    r55 = no_err_occurred
L23:
    r56 = None
    r57 = box(None, r56)
    r58 = -1
    r0.__mypyc_next_label__ = r58; r59 = is_error
L24:
    raise StopIteration(r57)
    unreachable
L25:
    r61 = 0
    r62 = r1 == r61 :: int
    if r62 goto L1 else goto L26 :: bool
L26:
    r63 = 1
    r64 = r1 == r63 :: int
    if r64 goto L8 else goto L27 :: bool
L27:
    r65 = 2
    r66 = r1 == r65 :: int
    if r66 goto L18 else goto L28 :: bool
L28:
    raise StopIteration
    unreachable
def recursive_outer_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: recursive_outer_gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = recursive_outer_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def recursive_outer_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: recursive_outer_gen
L0:
    return __mypyc_self__
def recursive_outer_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: recursive_outer_gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = recursive_outer_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def recursive_outer_obj.__call__(__mypyc_self__, n):
    __mypyc_self__ :: recursive_outer_obj
    n :: int
    r0 :: outer__env
    r1, recursive :: object
    r2 :: recursive_outer_env
    r3, r4 :: bool
    r5 :: recursive_outer_gen
    r6 :: bool
    r7 :: short_int
    r8 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.recursive
    recursive = r1
    r2 = recursive_outer_env()
    r2.__mypyc_env__ = r0; r3 = is_error
    r2.n = n; r4 = is_error
    r5 = recursive_outer_gen()
    r5.__mypyc_env__ = r2; r6 = is_error
    r7 = 0
    r2.__mypyc_next_label__ = r7; r8 = is_error
    return r5
def outer():
    r0 :: outer__env
    r1 :: recursive_outer_obj
    r2, r3 :: bool
    r4 :: short_int
    r5, r6, r7 :: object
L0:
    r0 = outer__env()
    r1 = recursive_outer_obj()
    r1.__mypyc_env__ = r0; r2 = is_error
    r0.recursive = r1; r3 = is_error
    r4 = 10
    r5 = r0.recursive
    r6 = box(short_int, r4)
    r7 = py_call(r5, r6)
    return r7

[case testYieldTryFinally]
from typing import Generator

def yield_try_finally() -> Generator[int, None, str]:
    try:
        yield 1
        yield 2
        return 'lol'
    except Exception:
        raise
    finally:
        print('goodbye!')

[out]
def yield_try_finally__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_try_finally__gen
    type, value, traceback :: object
    r0 :: yield_try_finally__env
    r1 :: int
    r2 :: object
    r3, r4 :: bool
    r5 :: short_int
    r6 :: object
    r7 :: short_int
    r8 :: bool
    r9 :: object
    r10, r11 :: bool
    r12 :: None
    r13 :: short_int
    r14 :: object
    r15 :: short_int
    r16 :: bool
    r17 :: object
    r18, r19 :: bool
    r20 :: None
    r21 :: str
    r22 :: object
    r23 :: tuple[object, object, object]
    r24 :: object
    r25 :: str
    r26 :: object
    r27, r28, r29, r30 :: bool
    r31 :: tuple[object, object, object]
    r32 :: object
    r33 :: tuple[object, object, object]
    r34 :: object
    r35 :: tuple[object, object, object]
    r36 :: str
    r37 :: object
    r38 :: str
    r39, r40 :: object
    r41 :: None
    r42 :: bool
    r43 :: short_int
    r44, r45, r46 :: bool
    r47 :: None
    r48 :: object
    r49 :: short_int
    r50, r51 :: bool
    r52 :: short_int
    r53 :: bool
    r54 :: short_int
    r55 :: bool
    r56 :: short_int
    r57, r58 :: bool
L0:
    r0 = __mypyc_self__.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L35
L1:
    r2 = builtins.None :: object
    r3 = type is not r2
    if r3 goto L2 else goto L3 :: bool
L2:
    raise_exception_with_tb(type, value, traceback); r4 = 0
    unreachable
L3:
L4:
L5:
L6:
    r5 = 1
    r6 = box(short_int, r5)
    r7 = 1
    r0.__mypyc_next_label__ = r7; r8 = is_error
    return r6
L7:
    r9 = builtins.None :: object
    r10 = type is not r9
    if r10 goto L8 else goto L9 :: bool
L8:
    raise_exception_with_tb(type, value, traceback); r11 = 0
    unreachable
L9:
    r12 = None
L10:
    r13 = 2
    r14 = box(short_int, r13)
    r15 = 2
    r0.__mypyc_next_label__ = r15; r16 = is_error
    return r14
L11:
    r17 = builtins.None :: object
    r18 = type is not r17
    if r18 goto L12 else goto L13 :: bool
L12:
    raise_exception_with_tb(type, value, traceback); r19 = 0
    unreachable
L13:
    r20 = None
    r21 = unicode_3 :: static  ('lol')
    r22 = r21
    goto L21
L14: (handler for L10, L11, L12, L13, L5, L6, L7, L8, L9)
    r23 = error_catch
    r24 = builtins.module :: static
    r25 = unicode_4 :: static  ('Exception')
    r26 = getattr r24, r25
    r27 = exc_matches r26
    if r27 goto L15 else goto L16 :: bool
L15:
    reraise_exc; r28 = 0
    unreachable
L16:
    reraise_exc; r29 = 0
    unreachable
L17:
    restore_exc_info r23
    goto L19
L18: (handler for L14, L15, L16)
    restore_exc_info r23
    r30 = keep_propagating
    unreachable
L19:
L20:
    r32 = <error> :: object
    r22 = r32
L21:
    r33 = <error> :: tuple[object, object, object]
    r31 = r33
    goto L23
L22: (handler for L17, L18, L19, L4)
    r34 = <error> :: object
    r22 = r34
    r35 = error_catch
    r31 = r35
L23:
    r36 = unicode_5 :: static  ('goodbye!')
    r37 = builtins.module :: static
    r38 = unicode_6 :: static  ('print')
    r39 = getattr r37, r38
    r40 = py_call(r39, r36)
    r41 = unbox(None, r40)
    if is_error(r31) goto L25 else goto L24
L24:
    reraise_exc; r42 = 0
    unreachable
L25:
    if is_error(r22) goto L28 else goto L26
L26:
    r43 = -1
    r0.__mypyc_next_label__ = r43; r44 = is_error
L27:
    raise StopIteration(r22)
    unreachable
L28:
    goto L33
L29: (handler for L23, L24)
    if is_error(r22) goto L30 else goto L30
L30:
    if is_error(r31) goto L32 else goto L31
L31:
    restore_exc_info r31
L32:
    r46 = keep_propagating
    unreachable
L33:
    r47 = None
    r48 = box(None, r47)
    r49 = -1
    r0.__mypyc_next_label__ = r49; r50 = is_error
L34:
    raise StopIteration(r48)
    unreachable
L35:
    r52 = 0
    r53 = r1 == r52 :: int
    if r53 goto L1 else goto L36 :: bool
L36:
    r54 = 1
    r55 = r1 == r54 :: int
    if r55 goto L7 else goto L37 :: bool
L37:
    r56 = 2
    r57 = r1 == r56 :: int
    if r57 goto L11 else goto L38 :: bool
L38:
    raise StopIteration
    unreachable
def yield_try_finally__gen.__next__(__mypyc_self__):
    __mypyc_self__ :: yield_try_finally__gen
    r0, r1 :: object
L0:
    r0 = builtins.None :: object
    r1 = yield_try_finally__gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0)
    return r1
def yield_try_finally__gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: yield_try_finally__gen
L0:
    return __mypyc_self__
def yield_try_finally__gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: yield_try_finally__gen
    type, value, traceback, r0, r1 :: object
L0:
    r0 = builtins.None :: object
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_try_finally__gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback)
    return r1
def yield_try_finally():
    r0 :: yield_try_finally__env
    r1 :: yield_try_finally__gen
    r2 :: bool
    r3 :: short_int
    r4 :: bool
L0:
    r0 = yield_try_finally__env()
    r1 = yield_try_finally__gen()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = 0
    r0.__mypyc_next_label__ = r3; r4 = is_error
    return r1
