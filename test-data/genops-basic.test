[case testTrivialFunction]
def f() -> int:
    return 1
[out]
def f():
    r0 :: int
L0:
    r0 = 1
    return r0

[case testFunctionArgument]
def f(x: int) -> int:
    return x
[out]
def f(x):
    x :: int
L0:
    return x

[case testExplicitNoneReturn]
def f() -> None:
    return
[out]
def f():
    r0 :: None
L0:
    r0 = None
    return r0

[case testExplicitNoneReturn2]
def f() -> None:
    return None
[out]
def f():
    r0 :: None
L0:
    r0 = None
    return r0

[case testAssignment]
def f() -> int:
    x = 1
    y = x
    return y
[out]
def f():
    x, r0, y :: int
L0:
    r0 = 1
    x = r0
    y = x
    return y

[case testAssignmentTwice]
def f(x: int) -> None:
    y = 1
    y = x
    return
[out]
def f(x):
    x, y, r0 :: int
    r1 :: None
L0:
    r0 = 1
    y = r0
    y = x
    r1 = None
    return r1

[case testIntArithmetic]
def f(x: int, y: int) -> int:
    return x * (y + 1)
[out]
def f(x, y):
    x, y, r0, r1, r2 :: int
L0:
    r0 = 1
    r1 = y + r0 :: int
    r2 = x * r1 :: int
    return r2

[case testIf]
def f(x: int, y: int) -> int:
    if x < y:
        x = 1
    return x
[out]
def f(x, y):
    x, y :: int
    r0 :: bool
    r1 :: int
L0:
    r0 = x < y :: int
    if r0 goto L1 else goto L2 :: bool
L1:
    r1 = 1
    x = r1
L2:
    return x

[case testIfElse]
def f(x: int, y: int) -> int:
    if x < y:
        x = 1
    else:
        x = 2
    return x
[out]
def f(x, y):
    x, y :: int
    r0 :: bool
    r1, r2 :: int
L0:
    r0 = x < y :: int
    if r0 goto L1 else goto L2 :: bool
L1:
    r1 = 1
    x = r1
    goto L3
L2:
    r2 = 2
    x = r2
L3:
    return x

[case testAnd]
def f(x: int, y: int) -> int:
    if x < y and x > y:
        x = 1
    else:
        x = 2
    return x
[out]
def f(x, y):
    x, y :: int
    r0, r1 :: bool
    r2, r3 :: int
L0:
    r0 = x < y :: int
    if r0 goto L1 else goto L3 :: bool
L1:
    r1 = x > y :: int
    if r1 goto L2 else goto L3 :: bool
L2:
    r2 = 1
    x = r2
    goto L4
L3:
    r3 = 2
    x = r3
L4:
    return x

[case testOr]
def f(x: int, y: int) -> int:
    if x < y or x > y:
        x = 1
    else:
        x = 2
    return x
[out]
def f(x, y):
    x, y :: int
    r0, r1 :: bool
    r2, r3 :: int
L0:
    r0 = x < y :: int
    if r0 goto L2 else goto L1 :: bool
L1:
    r1 = x > y :: int
    if r1 goto L2 else goto L3 :: bool
L2:
    r2 = 1
    x = r2
    goto L4
L3:
    r3 = 2
    x = r3
L4:
    return x

[case testSimpleNot]
def f(x: int, y: int) -> int:
    if not (x < y):
        x = 1
    return x
[out]
def f(x, y):
    x, y :: int
    r0 :: bool
    r1 :: int
L0:
    r0 = x < y :: int
    if not r0 goto L1 else goto L2 :: bool
L1:
    r1 = 1
    x = r1
L2:
    return x

[case testNotAnd]
def f(x: int, y: int) -> int:
    if not (x < y and x > y):
        x = 1
    return x
[out]
def f(x, y):
    x, y :: int
    r0, r1 :: bool
    r2 :: int
L0:
    r0 = x < y :: int
    if not r0 goto L2 else goto L1 :: bool
L1:
    r1 = x > y :: int
    if not r1 goto L2 else goto L3 :: bool
L2:
    r2 = 1
    x = r2
L3:
    return x

[case testWhile]
def f(x: int, y: int) -> int:
    while x > y:
        x = x - y
    return x
[out]
def f(x, y):
    x, y :: int
    r0 :: bool
    r1 :: int
L0:
L1:
    r0 = x > y :: int
    if r0 goto L2 else goto L3 :: bool
L2:
    r1 = x - y :: int
    x = r1
    goto L1
L3:
    return x

[case testWhile2]
def f(x: int, y: int) -> int:
    x = 1
    while x > y:
        x = x - y
    return x
[out]
def f(x, y):
    x, y, r0 :: int
    r1 :: bool
    r2 :: int
L0:
    r0 = 1
    x = r0
L1:
    r1 = x > y :: int
    if r1 goto L2 else goto L3 :: bool
L2:
    r2 = x - y :: int
    x = r2
    goto L1
L3:
    return x

[case testImplicitNoneReturn]
def f() -> None:
    pass
[out]
def f():
    r0 :: None
L0:
    r0 = None
    return r0

[case testImplicitNoneReturn2]
def f() -> None:
    x = 1
[out]
def f():
    x, r0 :: int
    r1 :: None
L0:
    r0 = 1
    x = r0
    r1 = None
    return r1

[case testImplicitNoneReturnAndIf]
def f(x: int, y: int) -> None:
    if x < y:
        x = 1
    else:
        y = 2
[out]
def f(x, y):
    x, y :: int
    r0 :: bool
    r1, r2 :: int
    r3 :: None
L0:
    r0 = x < y :: int
    if r0 goto L1 else goto L2 :: bool
L1:
    r1 = 1
    x = r1
    goto L3
L2:
    r2 = 2
    y = r2
L3:
    r3 = None
    return r3

[case testRecursion]
def f(n: int) -> int:
    if n <= 1:
        return 1
    else:
        return f(n - 1) + f(n - 2)
[out]
def f(n):
    n, r0 :: int
    r1 :: bool
    r2, r3, r4, r5, r6, r7, r8, r9 :: int
L0:
    r0 = 1
    r1 = n <= r0 :: int
    if r1 goto L1 else goto L2 :: bool
L1:
    r2 = 1
    return r2
L2:
    r3 = 1
    r4 = n - r3 :: int
    r5 = f(r4)
    r6 = 2
    r7 = n - r6 :: int
    r8 = f(r7)
    r9 = r5 + r8 :: int
    return r9
L3:
    unreachable

[case testReportTypeCheckError]
def f() -> None:
    return 1 # E: No return value expected

[case testReportSemanticaAnalysisError1]
def f(x: List[int]) -> None: pass # E: Name 'List' is not defined

[case testReportSemanticaAnalysisError2]
def f() -> None:
    x # E: Name 'x' is not defined

[case testElif]
def f(n: int) -> int:
    if n < 0:
        x = 1
    elif n == 0:
        x = 1
    else:
        x = 2
    return x
[out]
def f(n):
    n, r0 :: int
    r1 :: bool
    x, r2, r3 :: int
    r4 :: bool
    r5, r6 :: int
L0:
    r0 = 0
    r1 = n < r0 :: int
    if r1 goto L1 else goto L2 :: bool
L1:
    r2 = 1
    x = r2
    goto L6
L2:
    r3 = 0
    r4 = n == r3 :: int
    if r4 goto L3 else goto L4 :: bool
L3:
    r5 = 1
    x = r5
    goto L5
L4:
    r6 = 2
    x = r6
L5:
L6:
    return x

[case testUnaryMinus]
def f(n: int) -> int:
    return -1
[out]
def f(n):
    n, r0, r1 :: int
L0:
    r0 = 1
    r1 = -r0 :: int
    return r1

[case testConditionalExpr]
def f(n: int) -> int:
    return 0 if n == 0 else 1
[out]
def f(n):
    n, r0 :: int
    r1 :: bool
    r2, r3, r4 :: int
L0:
    r0 = 0
    r1 = n == r0 :: int
    if r1 goto L1 else goto L2 :: bool
L1:
    r3 = 0
    r2 = r3
    goto L3
L2:
    r4 = 1
    r2 = r4
L3:
    return r2

[case testOperatorAssignment]
def f() -> int:
    x = 0
    x += 1
    return x
[out]
def f():
    x, r0, r1, r2 :: int
L0:
    r0 = 0
    x = r0
    r1 = 1
    r2 = x + r1 :: int
    x = r2
    return x

[case testTrue]
def f() -> bool:
    return True
[out]
def f():
    r0 :: bool
L0:
    r0 = True
    return r0

[case testFalse]
def f() -> bool:
    return False
[out]
def f():
    r0 :: bool
L0:
    r0 = False
    return r0

[case testBoolCond]
def f(x: bool) -> bool:
    if x:
        return False
    else:
        return True
[out]
def f(x):
    x, r0, r1 :: bool
L0:
    if x goto L1 else goto L2 :: bool
L1:
    r0 = False
    return r0
L2:
    r1 = True
    return r1
L3:
    unreachable

[case testPycall]
import testmodule

def f(x: int) -> int:
    return testmodule.factorial(x)
[file testmodule.py]
def factorial(x: int) -> int:
    if x == 0:
        return 1
    else:
        return x * factorial(x-1)
[out]
def f(x):
    x :: int
    r0, r1, r2, r3 :: object
    r4 :: int
L0:
    r0 = module_testmodule :: static
    r1 = r0.factorial :: object
    r2 = box(int, x)
    r3 = r1(r2) :: object
    r4 = unbox(int, r3)
    return r4

[case testPrintFullname]
import builtins
def f(x: int) -> None:
    builtins.print(5)
[out]
def f(x):
    x :: int
    r0, r1 :: object
    r2 :: int
    r3, r4 :: object
    r5, r6 :: None
L0:
    r0 = module_builtins :: static
    r1 = r0.print :: object
    r2 = 5
    r3 = box(int, r2)
    r4 = r1(r3) :: object
    r5 = cast(None, r4)
    r6 = None
    return r6

[case testPrint]
import builtins
def f(x: int) -> None:
    print(5)
[out]
def f(x):
    x, r0 :: int
    r1, r2, r3, r4 :: object
    r5, r6 :: None
L0:
    r0 = 5
    r1 = module_builtins :: static
    r2 = r1.print :: object
    r3 = box(int, r0)
    r4 = r2(r3) :: object
    r5 = cast(None, r4)
    r6 = None
    return r6

[case testUnicodeLiteral]
def f() -> str:
    x = "some string"
    return "some other string"
[out]
def f():
    x, r0, r1 :: str
L0:
    r0 = __unicode_0 :: static
    x = r0
    r1 = __unicode_1 :: static
    return r1

[case testPyMethodCall1]
from typing import List
def f(x: List[int]) -> int:
    y = x.pop()
    return x.pop()
[out]
def f(x):
    x :: list
    y :: int
    r0 :: str
    r1 :: object
    r2 :: int
    r3 :: str
    r4 :: object
    r5 :: int
L0:
    r0 = __unicode_0 :: static
    r1 = x.r0() :: object
    r2 = unbox(int, r1)
    y = r2
    r3 = __unicode_0 :: static
    r4 = x.r3() :: object
    r5 = unbox(int, r4)
    return r5

[case testObjectType]
def g(y: object) -> None:
    g(y)
    g([1])
    g(None)
[out]
def g(y):
    y :: object
    r0 :: None
    r1 :: int
    r2 :: object
    r3 :: list
    r4, r5, r6, r7 :: None
L0:
    r0 = g(y)
    r1 = 1
    r2 = box(int, r1)
    r3 = [r2]
    r4 = g(r3)
    r5 = None
    r6 = g(r5)
    r7 = None
    return r7

[case testCoerceToObject1]
def g(y: object) -> object:
    g(1)
    a = [y]
    a[0] = (1, 2)
    y = True
    return 3
[out]
def g(y):
    y :: object
    r0 :: int
    r1, r2 :: object
    a, r3 :: list
    r4, r5, r6 :: int
    r7 :: tuple[int, int]
    r8 :: object
    r9, r10 :: bool
    r11 :: object
    r12 :: int
    r13 :: object
L0:
    r0 = 1
    r1 = box(int, r0)
    r2 = g(r1)
    r3 = [y]
    a = r3
    r4 = 0
    r5 = 1
    r6 = 2
    r7 = (r5, r6)
    r8 = box(tuple[int, int], r7)
    r9 = a.__setitem__(r4, r8) :: list
    r10 = True
    r11 = box(bool, r10)
    y = r11
    r12 = 3
    r13 = box(int, r12)
    return r13

[case testCoerceToObject2]
class A:
    x: object
    n: int
def f(a: A, o: object) -> None:
    a.x = 1
    o = a.n
[out]
def f(a, o):
    a :: A
    o :: object
    r0 :: int
    r1 :: object
    r2 :: bool
    r3 :: int
    r4 :: object
    r5 :: None
L0:
    r0 = 1
    r1 = box(int, r0)
    a.x = r1; r2 = is_error
    r3 = a.n
    r4 = box(int, r3)
    o = r4
    r5 = None
    return r5

[case testDownCast]
from typing import cast, List, Tuple
class A: pass
def f(x: object) -> None:
    n = cast(int, x)
    b = cast(bool, x)
    a = cast(A, x)
    l = cast(List[int], x)
    t = cast(Tuple[int, A], x)
[out]
def f(x):
    x :: object
    n, r0 :: int
    b, r1 :: bool
    a, r2 :: A
    l, r3 :: list
    t, r4 :: tuple[int, A]
    r5 :: None
L0:
    r0 = unbox(int, x)
    n = r0
    r1 = unbox(bool, x)
    b = r1
    r2 = cast(A, x)
    a = r2
    r3 = cast(list, x)
    l = r3
    r4 = unbox(tuple[int, A], x)
    t = r4
    r5 = None
    return r5

[case testDownCastSpecialCases]
from typing import cast, Optional, Tuple
class A: pass
def f(o: Optional[A], n: int, t: Tuple[int, ...]) -> None:
    a = cast(A, o)
    m = cast(bool, n)
    tt: Tuple[int, int]
    t = tt
[out]
def f(o, n, t):
    o :: optional[A]
    n :: int
    t :: tuple
    a, r0 :: A
    m :: bool
    r1 :: object
    r2 :: bool
    tt :: tuple[int, int]
    r3 :: object
    r4 :: None
L0:
    r0 = cast(A, o)
    a = r0
    r1 = box(int, n)
    r2 = unbox(bool, r1)
    m = r2
    r3 = box(tuple[int, int], tt)
    t = r3
    r4 = None
    return r4

[case testSuccessfulCast]
from typing import cast, Optional, Tuple, List, Dict
class A: pass
def f(o: object,
      p: Optional[A],
      n: int,
      b: bool,
      t: Tuple[int, ...],
      s: Tuple[int, int],
      a: A,
      l: List[A],
      d: Dict[int, str]) -> None:
    o = cast(object, o)
    p = cast(Optional[A], p)
    n = cast(int, n)
    b = cast(bool, b)
    t = cast(Tuple[int, ...], t)
    s = cast(Tuple[int, int], s)
    o = cast(object, n)
    a = cast(A, a)
    l2 = cast(List[object], l)
    d2 = cast(Dict[object, str], d)
[out]
def f(o, p, n, b, t, s, a, l, d):
    o :: object
    p :: optional[A]
    n :: int
    b :: bool
    t :: tuple
    s :: tuple[int, int]
    a :: A
    l :: list
    d :: dict
    r0 :: object
    l2 :: list
    d2 :: dict
    r1 :: None
L0:
    o = o
    p = p
    n = n
    b = b
    t = t
    s = s
    r0 = box(int, n)
    o = r0
    a = a
    l2 = l
    d2 = d
    r1 = None
    return r1

[case testGenericSetItem]
from typing import Any
def f(x: Any, y: Any, z: Any) -> None:
    x[y] = z
[out]
def f(x, y, z):
    x, y, z :: object
    r0 :: bool
    r1 :: None
L0:
    r0 = x.__setitem__(y, z) :: object
    r1 = None
    return r1

[case testLoadFloatSum]
def assign_and_return_float_sum() -> float:
    f1 = 1.0
    f2 = 2.0
    f3 = 3.0
    return f1 * f2 + f3
[out]
def assign_and_return_float_sum():            
    f1, r0, f2, r1, f3, r2 :: float           
    r3 :: object                              
    r4 :: float                               
    r5 :: object                              
    r6 :: float                               
L0:                                           
    r0 = __float_0 :: static                  
    f1 = r0                                   
    r1 = __float_1 :: static                  
    f2 = r1                                   
    r2 = __float_2 :: static                  
    f3 = r2                                   
    r3 = f1 * f2                              
    r4 = cast(float, r3)                      
    r5 = r4 + f3                              
    r6 = cast(float, r5)                      
    return r6                                 

[case testBigIntLiteral]
def big_int() -> None:
    a_62_bit = 4611686018427387902
    max_62_bit = 4611686018427387903
    b_63_bit = 4611686018427387904
    c_63_bit = 9223372036854775806
    max_63_bit = 9223372036854775807
    d_64_bit = 9223372036854775808
    max_32_bit = 2147483647
[out]
def big_int():
    a_62_bit, r0, max_62_bit, r1, b_63_bit, r2, c_63_bit, r3, max_63_bit, r4, d_64_bit, r5, max_32_bit, r6 :: int
    r7 :: None
L0:
    r0 = 4611686018427387902
    a_62_bit = r0
    r1 = 4611686018427387903
    max_62_bit = r1
    r2 = __integer_0 :: static
    b_63_bit = r2
    r3 = __integer_1 :: static
    c_63_bit = r3
    r4 = __integer_2 :: static
    max_63_bit = r4
    r5 = __integer_3 :: static
    d_64_bit = r5
    r6 = 2147483647
    max_32_bit = r6
    r7 = None
    return r7
