-- Test cases for data flow analysis.

[case testSimple_MaybeDefined]
def f(a: int) -> None:
    x = 1
    if x == a:
        y = 1
    else:
        z = 1
[out]
L0:
    x = 1
    if x == a goto L1 else goto L2 :: int
L1:
    y = 1
    goto L3
L2:
    z = 1
L3:
    r0 = None
    return r0

(0, 0)   {a}                     {a, x}
(0, 1)   {a, x}                  {a, x}
(1, 0)   {a, x}                  {a, x, y}
(1, 1)   {a, x, y}               {a, x, y}
(2, 0)   {a, x}                  {a, x, z}
(2, 1)   {a, x, z}               {a, x, z}
(3, 0)   {a, x, y, z}            {a, x, y, z, r0}
(3, 1)   {a, x, y, z, r0}        {a, x, y, z, r0}

[case testSimple_Liveness]
def f(a: int) -> int:
    x = 1
    if x == 1:
        return a
    else:
        return x
[out]
L0:
    x = 1
    r0 = 1
    if x == r0 goto L1 else goto L2 :: int
L1:
    return a
L2:
    return x
L3:
    unreachable

(0, 0)   {a}                     {a, x}
(0, 1)   {a, x}                  {a, x, r0}
(0, 2)   {a, x, r0}              {a, x}
(1, 0)   {a}                     {}
(2, 0)   {x}                     {}
(3, 0)   {}                      {}

[case testSpecial_Liveness]
def f() -> int:
    x = 1
    y = 1
    x = 2
    return x
[out]
L0:
    x = 1
    y = 1
    x = 2
    return x

(0, 0)   {}                      {}
(0, 1)   {}                      {}
(0, 2)   {}                      {x}
(0, 3)   {x}                     {}

[case testSpecial2_Liveness]
def f(a: int) -> int:
    a = 1
    a = 2
    a = 3
    return a
[out]
L0:
    a = 1
    a = 2
    a = 3
    return a

(0, 0)   {}                      {}
(0, 1)   {}                      {}
(0, 2)   {}                      {a}
(0, 3)   {a}                     {}

[case testSimple_MustDefined]
def f(a: int) -> None:
    if a == 1:
        y = 1
        x = 2
    else:
        x = 2
[out]
L0:
    r0 = 1
    if a == r0 goto L1 else goto L2 :: int
L1:
    y = 1
    x = 2
    goto L3
L2:
    x = 2
L3:
    r1 = None
    return r1

(0, 0)   {a}                     {a, r0}
(0, 1)   {a, r0}                 {a, r0}
(1, 0)   {a, r0}                 {a, r0, y}
(1, 1)   {a, r0, y}              {a, r0, y, x}
(1, 2)   {a, r0, y, x}           {a, r0, y, x}
(2, 0)   {a, r0}                 {a, r0, x}
(2, 1)   {a, r0, x}              {a, r0, x}
(3, 0)   {a, r0, x}              {a, r0, x, r1}
(3, 1)   {a, r0, x, r1}          {a, r0, x, r1}

[case testTwoArgs_MustDefined]
def f(x: int, y: int) -> int:
    return x
[out]
L0:
    return x

(0, 0)   {x, y}                  {x, y}

[case testLoop_MustDefined]
def f(n: int) -> None:
    while n < 5:
        n = n + 1
        m = n
[out]
L0:
L1:
    r0 = 5
    if n < r0 goto L2 else goto L3 :: int
L2:
    r1 = 1
    n = n + r1 :: int
    m = n
    goto L1
L3:
    r2 = None
    return r2

(0, 0)   {n}                     {n}
(1, 0)   {n}                     {n, r0}
(1, 1)   {n, r0}                 {n, r0}
(2, 0)   {n, r0}                 {n, r0, r1}
(2, 1)   {n, r0, r1}             {n, r0, r1}
(2, 2)   {n, r0, r1}             {n, r0, r1, m}
(2, 3)   {n, r0, r1, m}          {n, r0, r1, m}
(3, 0)   {n, r0}                 {n, r0, r2}
(3, 1)   {n, r0, r2}             {n, r0, r2}

[case testMultiPass_Liveness]
def f(n: int) -> None:
    x = 1
    y = 1
    while n < 1:
        n = y
        while n < 2:
            n = 1
            n = x
[out]
L0:
    x = 1
    y = 1
L1:
    r0 = 1
    if n < r0 goto L2 else goto L6 :: int
L2:
    n = y
L3:
    r1 = 2
    if n < r1 goto L4 else goto L5 :: int
L4:
    n = 1
    n = x
    goto L3
L5:
    goto L1
L6:
    r2 = None
    return r2

(0, 0)   {n}                     {n, x}
(0, 1)   {n, x}                  {n, x, y}
(0, 2)   {n, x, y}               {n, x, y}
(1, 0)   {n, x, y}               {n, x, y, r0}
(1, 1)   {n, x, y, r0}           {x, y}
(2, 0)   {x, y}                  {n, x, y}
(2, 1)   {n, x, y}               {n, x, y}
(3, 0)   {n, x, y}               {n, x, y, r1}
(3, 1)   {n, x, y, r1}           {n, x, y}
(4, 0)   {x, y}                  {x, y}
(4, 1)   {x, y}                  {n, x, y}
(4, 2)   {n, x, y}               {n, x, y}
(5, 0)   {n, x, y}               {n, x, y}
(6, 0)   {}                      {r2}
(6, 1)   {r2}                    {}

[case testCall_Liveness]
def f(x: int) -> int:
    a = f(1)
    return f(a) + a
[out]
L0:
    r0 = 1
    a = f(r0)
    r1 = f(a)
    r2 = r1 + a :: int
    return r2

(0, 0)   {}                      {r0}
(0, 1)   {r0}                    {a}
(0, 2)   {a}                     {a, r1}
(0, 3)   {a, r1}                 {r2}
(0, 4)   {r2}                    {}

[case testLoop_MaybeDefined]
def f(a: int) -> None:
    while a < a:
        while a < a:
            y = a
        x = a
[out]
L0:
L1:
    if a < a goto L2 else goto L6 :: int
L2:
L3:
    if a < a goto L4 else goto L5 :: int
L4:
    y = a
    goto L3
L5:
    x = a
    goto L1
L6:
    r0 = None
    return r0

(0, 0)   {a}                     {a}
(1, 0)   {a, y, x}               {a, y, x}
(2, 0)   {a, y, x}               {a, y, x}
(3, 0)   {a, y, x}               {a, y, x}
(4, 0)   {a, y, x}               {a, y, x}
(4, 1)   {a, y, x}               {a, y, x}
(5, 0)   {a, y, x}               {a, y, x}
(5, 1)   {a, y, x}               {a, y, x}
(6, 0)   {a, y, x}               {a, y, x, r0}
(6, 1)   {a, y, x, r0}           {a, y, x, r0}

[case testTrivial_BorrowedArgument]
def f(a: int, b: int) -> int:
    return b
[out]
L0:
    return b

(0, 0)   {a, b}                  {a, b}

[case testSimple_BorrowedArgument]
def f(a: int) -> int:
    b = a
    a = 1
    return a
[out]
L0:
    b = a
    a = 1
    return a

(0, 0)   {a}                     {a}
(0, 1)   {a}                     {}
(0, 2)   {}                      {}

[case testConditional_BorrowedArgument]
def f(a: int) -> int:
    if a == a:
        x = 2
        a = 1
    else:
        x = 1
    return x
[out]
L0:
    if a == a goto L1 else goto L2 :: int
L1:
    x = 2
    a = 1
    goto L3
L2:
    x = 1
L3:
    return x

(0, 0)   {a}                     {a}
(1, 0)   {a}                     {a}
(1, 1)   {a}                     {}
(1, 2)   {}                      {}
(2, 0)   {a}                     {a}
(2, 1)   {a}                     {a}
(3, 0)   {}                      {}

[case testLoop_BorrowedArgument]
def f(a: int) -> int:
    sum = 0
    i = 0
    while i <= a:
        sum = sum + i
        i = i + 1
    return sum
[out]
L0:
    sum = 0
    i = 0
L1:
    if i <= a goto L2 else goto L3 :: int
L2:
    sum = sum + i :: int
    r0 = 1
    i = i + r0 :: int
    goto L1
L3:
    return sum

(0, 0)   {a}                     {a}
(0, 1)   {a}                     {a}
(0, 2)   {a}                     {a}
(1, 0)   {a}                     {a}
(2, 0)   {a}                     {a}
(2, 1)   {a}                     {a}
(2, 2)   {a}                     {a}
(2, 3)   {a}                     {a}
(3, 0)   {a}                     {a}

[case testError]
def f(x: List[int]) -> None: pass # E: Name 'List' is not defined
