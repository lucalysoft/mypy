[case testDictGet]
from typing import Dict
def f(d: Dict[int, bool]) -> bool:
    return d[0]
[out]
def f(d):
    d :: dict
    r0 :: int
    r1, r2 :: object
    r3 :: bool
L0:
    r0 = 0
    r1 = box(int, r0)
    r2 = d[r1] :: dict
    r3 = unbox(bool, r2)
    return r3

[case testDictSet]
from typing import Dict
def f(d: Dict[int, bool]) -> None:
    d[0] = False
[out]
def f(d):
    d :: dict
    r0 :: int
    r1 :: bool
    r2, r3 :: object
    r4 :: bool
    r5 :: None
L0:
    r0 = 0
    r1 = False
    r2 = box(int, r0)
    r3 = box(bool, r1)
    r4 = d.__setitem__(r2, r3) :: dict
    r5 = None
    return r5

[case testNewEmptyDict]
from typing import Dict
def f() -> None:
    d = {}  # type: Dict[bool, int]
[out]
def f():
    d, r0 :: dict
    r1 :: None
L0:
    r0 = {}
    d = r0
    r1 = None
    return r1

[case testNewDictWithValues]
def f(x: object) -> None:
    d = {1: 2, '': x}
[out]
def f(x):
    x :: object
    d, r0 :: dict
    r1, r2 :: int
    r3, r4 :: object
    r5 :: bool
    r6 :: str
    r7 :: bool
    r8 :: None
L0:
    r0 = {}
    r1 = 1
    r2 = 2
    r3 = box(int, r1)
    r4 = box(int, r2)
    r5 = r0.__setitem__(r3, r4) :: dict
    r6 = unicode_0 :: static
    r7 = r0.__setitem__(r6, x) :: dict
    d = r0
    r8 = None
    return r8

[case testInDict]
from typing import Dict
def f(d: Dict[int, int]) -> bool:
    if 4 in d:
        return True
    else:
        return False
[out]
def f(d):
    d :: dict
    r0 :: int
    r1 :: object
    r2, r3, r4 :: bool
L0:
    r0 = 4
    r1 = box(int, r0)
    r2 = r1 in d :: dict
    if r2 goto L1 else goto L2 :: bool
L1:
    r3 = True
    return r3
L2:
    r4 = False
    return r4
L3:
    unreachable

[case testNotInDict]
from typing import Dict
def f(d: Dict[int, int]) -> bool:
    if 4 not in d:
        return True
    else:
        return False
[out]
def f(d):
    d :: dict
    r0 :: int
    r1 :: object
    r2, r3, r4 :: bool
L0:
    r0 = 4
    r1 = box(int, r0)
    r2 = r1 in d :: dict
    if not r2 goto L1 else goto L2 :: bool
L1:
    r3 = True
    return r3
L2:
    r4 = False
    return r4
L3:
    unreachable

[case testDictUpdate]
from typing import Dict
def f(a: Dict[int, int], b: Dict[int, int]) -> None:
    a.update(b)
[out]
def f(a, b):
    a, b :: dict
    r0 :: bool
    r1, r2 :: None
L0:
    r0 = a.update(b) :: dict
    r1 = None
    r2 = None
    return r2

[case testDictKeyLvalue]
from typing import Dict
def increment(d: Dict[str, int]) -> Dict[str, int]:
    for k in d:
        d[k] += 1
    return d
[out]
def increment(d):
    d :: dict
    k, r0, r1 :: object
    r2 :: str
    r3 :: int
    r4, r5, r6 :: object
    r7, r8 :: bool
L0:
    r0 = iter d :: object
L1:
    r1 = next r0 :: object
    if is_error(r1) goto L3 else goto L2
L2:
    k = r1
    r2 = cast(str, k)
    r3 = 1
    r4 = d[r2] :: dict
    r5 = box(int, r3)
    r6 = r4 + r5
    r7 = d.__setitem__(r2, r6) :: dict
    goto L1
L3:
    r8 = no_err_occurred
    return d
