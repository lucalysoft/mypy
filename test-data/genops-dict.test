[case testDictGet]
from typing import Dict
def f(d: Dict[int, bool]) -> bool:
    return d[0]
[out]
def f(d):
    d :: dict
    r0 :: int
    r1, r2 :: object
    r3 :: bool
L0:
    r0 = 0
    r1 = box(int, r0)
    r2 = d[r1] :: dict
    r3 = unbox(bool, r2)
    return r3

[case testDictSet]
from typing import Dict
def f(d: Dict[int, bool]) -> None:
    d[0] = False
[out]
def f(d):
    d :: dict
    r0 :: int
    r1 :: bool
    r2, r3 :: object
    r4 :: bool
    r5 :: None
L0:
    r0 = 0
    r1 = False
    r2 = box(int, r0)
    r3 = box(bool, r1)
    r4 = d.__setitem__(r2, r3)
    r5 = None
    return r5

[case testNewEmptyDict]
from typing import Dict
def f() -> None:
    d = {}  # type: Dict[bool, int]
[out]
def f():
    d, r0 :: dict
    r1 :: None
L0:
    r0 = {}
    d = r0
    r1 = None
    return r1

[case testInDict]
from typing import Dict
def f(d: Dict[int, int]) -> bool:
    if 4 in d:
        return True
    else:
        return False
[out]
def f(d):
    d :: dict
    r0 :: int
    r1 :: object
    r2, r3, r4 :: bool
L0:
    r0 = 4
    r1 = box(int, r0)
    r2 = r1 in d :: dict
    if r2 goto L1 else goto L2 :: bool
L1:
    r3 = True
    return r3
L2:
    r4 = False
    return r4
L3:
    unreachable

[case testNotInDict]
from typing import Dict
def f(d: Dict[int, int]) -> bool:
    if 4 not in d:
        return True
    else:
        return False
[out]
def f(d):
    d :: dict
    r0 :: int
    r1 :: object
    r2, r3, r4 :: bool
L0:
    r0 = 4
    r1 = box(int, r0)
    r2 = r1 in d :: dict
    if not r2 goto L1 else goto L2 :: bool
L1:
    r3 = True
    return r3
L2:
    r4 = False
    return r4
L3:
    unreachable

[case testDictUpdate]
from typing import Dict
def f(a: Dict[int, int], b: Dict[int, int]) -> None:
    a.update(b)
[out]
def f(a, b):
    a, b :: dict
    r0 :: bool
    r1, r2 :: None
L0:
    r0 = a.update(b)
    r1 = None
    r2 = None
    return r2
