[case testTryExcept1]
def g() -> None:
    try:
        object()
    except:
        print("weeee")
[out]
def g():
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: tuple[object, object, object]
    r5 :: str
    r6 :: object
    r7 :: str
    r8, r9 :: object
    r10 :: None
    r11 :: bool
    r12 :: None
L0:
L1:
    r0 = builtins.module :: static
    r1 = unicode_0 :: static  ('object')
    r2 = getattr r0, r1
    r3 = py_call(r2)
    goto L4
L2: (handler for L1)
    r4 = error_catch
    r5 = unicode_1 :: static  ('weeee')
    r6 = builtins.module :: static
    r7 = unicode_2 :: static  ('print')
    r8 = getattr r6, r7
    r9 = py_call(r8, r5)
    r10 = cast(None, r9)
L3: (handler for L2)
    restore_exc_info r4
    r11 = no_err_occurred
L4:
    r12 = None
    return r12

[case testTryExcept2]
def g(b: bool) -> None:
    try:
        if b:
            object()
        else:
            str('hi')
    except:
        print("weeee")
[out]
def g(b):
    b :: bool
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4, r5 :: str
    r6 :: tuple[object, object, object]
    r7 :: str
    r8 :: object
    r9 :: str
    r10, r11 :: object
    r12 :: None
    r13 :: bool
    r14 :: None
L0:
L1:
    if b goto L2 else goto L3 :: bool
L2:
    r0 = builtins.module :: static
    r1 = unicode_0 :: static  ('object')
    r2 = getattr r0, r1
    r3 = py_call(r2)
    goto L4
L3:
    r4 = unicode_1 :: static  ('hi')
    r5 = str r4 :: object
L4:
    goto L7
L5: (handler for L1, L2, L3, L4)
    r6 = error_catch
    r7 = unicode_2 :: static  ('weeee')
    r8 = builtins.module :: static
    r9 = unicode_3 :: static  ('print')
    r10 = getattr r8, r9
    r11 = py_call(r10, r7)
    r12 = cast(None, r11)
L6: (handler for L5)
    restore_exc_info r6
    r13 = no_err_occurred
L7:
    r14 = None
    return r14

[case testTryExcept3]
def g() -> None:
    try:
        print('a')
        try:
            object()
        except AttributeError as e:
            print('b', e)
    except:
        print("weeee")
[out]
def g():
    r0 :: str
    r1 :: object
    r2 :: str
    r3, r4 :: object
    r5 :: None
    r6 :: object
    r7 :: str
    r8, r9 :: object
    r10 :: tuple[object, object, object]
    r11 :: object
    r12 :: str
    r13 :: object
    r14 :: bool
    e, r15 :: object
    r16 :: str
    r17 :: object
    r18 :: str
    r19, r20 :: object
    r21 :: None
    r22, r23 :: bool
    r24 :: tuple[object, object, object]
    r25 :: str
    r26 :: object
    r27 :: str
    r28, r29 :: object
    r30 :: None
    r31 :: bool
    r32 :: None
L0:
L1:
    r0 = unicode_0 :: static  ('a')
    r1 = builtins.module :: static
    r2 = unicode_1 :: static  ('print')
    r3 = getattr r1, r2
    r4 = py_call(r3, r0)
    r5 = cast(None, r4)
L2:
    r6 = builtins.module :: static
    r7 = unicode_2 :: static  ('object')
    r8 = getattr r6, r7
    r9 = py_call(r8)
    goto L7
L3: (handler for L2)
    r10 = error_catch
    r11 = builtins.module :: static
    r12 = unicode_3 :: static  ('AttributeError')
    r13 = getattr r11, r12
    r14 = exc_matches r13
    if r14 goto L4 else goto L5 :: bool
L4:
    r15 = get_exc_value
    e = r15
    r16 = unicode_4 :: static  ('b')
    r17 = builtins.module :: static
    r18 = unicode_1 :: static  ('print')
    r19 = getattr r17, r18
    r20 = py_call(r19, r16, e)
    r21 = cast(None, r20)
    goto L6
L5:
    reraise_exc; r22 = 0
    unreachable
L6: (handler for L3, L4, L5)
    restore_exc_info r10
    r23 = no_err_occurred
L7:
    goto L10
L8: (handler for L1, L6, L7)
    r24 = error_catch
    r25 = unicode_5 :: static  ('weeee')
    r26 = builtins.module :: static
    r27 = unicode_1 :: static  ('print')
    r28 = getattr r26, r27
    r29 = py_call(r28, r25)
    r30 = cast(None, r29)
L9: (handler for L8)
    restore_exc_info r24
    r31 = no_err_occurred
L10:
    r32 = None
    return r32

[case testTryExcept4]
def g() -> None:
    try:
        pass
    except KeyError:
        print("weeee")
    except IndexError:
        print("yo")
[out]
def g():
    r0 :: tuple[object, object, object]
    r1 :: object
    r2 :: str
    r3 :: object
    r4 :: bool
    r5 :: str
    r6 :: object
    r7 :: str
    r8, r9 :: object
    r10 :: None
    r11 :: object
    r12 :: str
    r13 :: object
    r14 :: bool
    r15 :: str
    r16 :: object
    r17 :: str
    r18, r19 :: object
    r20 :: None
    r21, r22 :: bool
    r23 :: None
L0:
L1:
    goto L8
L2: (handler for L1)
    r0 = error_catch
    r1 = builtins.module :: static
    r2 = unicode_0 :: static  ('KeyError')
    r3 = getattr r1, r2
    r4 = exc_matches r3
    if r4 goto L3 else goto L4 :: bool
L3:
    r5 = unicode_1 :: static  ('weeee')
    r6 = builtins.module :: static
    r7 = unicode_2 :: static  ('print')
    r8 = getattr r6, r7
    r9 = py_call(r8, r5)
    r10 = cast(None, r9)
    goto L7
L4:
    r11 = builtins.module :: static
    r12 = unicode_3 :: static  ('IndexError')
    r13 = getattr r11, r12
    r14 = exc_matches r13
    if r14 goto L5 else goto L6 :: bool
L5:
    r15 = unicode_4 :: static  ('yo')
    r16 = builtins.module :: static
    r17 = unicode_2 :: static  ('print')
    r18 = getattr r16, r17
    r19 = py_call(r18, r15)
    r20 = cast(None, r19)
    goto L7
L6:
    reraise_exc; r21 = 0
    unreachable
L7: (handler for L2, L3, L4, L5, L6)
    restore_exc_info r0
    r22 = no_err_occurred
L8:
    r23 = None
    return r23

[case testTryFinally]
def a(b: bool) -> None:
    try:
        if b:
            raise Exception('hi')
    finally:
        print('finally')
[out]
def a(b):
    b :: bool
    r0 :: str
    r1 :: object
    r2 :: str
    r3, r4, r5 :: object
    r6 :: bool
    r7, r8, r9 :: tuple[object, object, object]
    r10 :: str
    r11 :: object
    r12 :: str
    r13, r14 :: object
    r15 :: None
    r16, r17 :: bool
    r18 :: None
L0:
L1:
    if b goto L2 else goto L3 :: bool
L2:
    r0 = unicode_0 :: static  ('hi')
    r1 = builtins.module :: static
    r2 = unicode_1 :: static  ('Exception')
    r3 = getattr r1, r2
    r4 = py_call(r3, r0)
    r5 = type r4 :: object
    raise_exception(r5, r4); r6 = 0
    unreachable
L3:
L4:
L5:
    r8 = <error> :: tuple[object, object, object]
    r7 = r8
    goto L7
L6: (handler for L1, L2, L3)
    r9 = error_catch
    r7 = r9
L7:
    r10 = unicode_2 :: static  ('finally')
    r11 = builtins.module :: static
    r12 = unicode_3 :: static  ('print')
    r13 = getattr r11, r12
    r14 = py_call(r13, r10)
    r15 = cast(None, r14)
    if is_error(r7) goto L9 else goto L8
L8:
    reraise_exc; r16 = 0
    unreachable
L9:
    goto L13
L10: (handler for L7, L8)
    if is_error(r7) goto L12 else goto L11
L11:
    restore_exc_info r7
L12:
    r17 = no_err_occurred
    unreachable
L13:
    r18 = None
    return r18
