[case testForInRange]
def f() -> None:
    x = 0
    for i in range(5):
        x = x + i
[out]
def f():
    x, r0, r1, i, r2 :: int
    r3 :: bool
    r4, r5, r6 :: int
    r7 :: None
L0:
    r0 = 0
    x = r0
    r1 = 5
    r2 = 0
    i = r2
L1:
    r3 = i < r1 :: int
    if r3 goto L2 else goto L4 :: bool
L2:
    r4 = x + i :: int
    x = r4
L3:
    r5 = 1
    r6 = i + r5 :: int
    i = r6
    goto L1
L4:
    r7 = None
    return r7

[case testBreak]
def f() -> None:
  n = 0
  while n < 5:
      break
[out]
def f():
    n, r0, r1 :: int
    r2 :: bool
    r3 :: None
L0:
    r0 = 0
    n = r0
L1:
    r1 = 5
    r2 = n < r1 :: int
    if r2 goto L2 else goto L4 :: bool
L2:
    goto L4
L3:
    goto L1
L4:
    r3 = None
    return r3

[case testBreakFor]
def f() -> None:
    for n in range(5):
        break
[out]
def f():
    r0, n, r1 :: int
    r2 :: bool
    r3, r4 :: int
    r5 :: None
L0:
    r0 = 5
    r1 = 0
    n = r1
L1:
    r2 = n < r0 :: int
    if r2 goto L2 else goto L5 :: bool
L2:
    goto L5
L3:
L4:
    r3 = 1
    r4 = n + r3 :: int
    n = r4
    goto L1
L5:
    r5 = None
    return r5

[case testBreakNested]
def f() -> None:
    n = 0
    while n < 5:
        while n < 4:
            break
        break
[out]
def f():
    n, r0, r1 :: int
    r2 :: bool
    r3 :: int
    r4 :: bool
    r5 :: None
L0:
    r0 = 0
    n = r0
L1:
    r1 = 5
    r2 = n < r1 :: int
    if r2 goto L2 else goto L8 :: bool
L2:
L3:
    r3 = 4
    r4 = n < r3 :: int
    if r4 goto L4 else goto L6 :: bool
L4:
    goto L6
L5:
    goto L3
L6:
    goto L8
L7:
    goto L1
L8:
    r5 = None
    return r5

[case testContinue]
def f() -> None:
  n = 0
  while n < 5:
      continue
[out]
def f():
    n, r0, r1 :: int
    r2 :: bool
    r3 :: None
L0:
    r0 = 0
    n = r0
L1:
    r1 = 5
    r2 = n < r1 :: int
    if r2 goto L2 else goto L4 :: bool
L2:
    goto L1
L3:
    goto L1
L4:
    r3 = None
    return r3

[case testContinueFor]
def f() -> None:
    for n in range(5):
        continue
[out]
def f():
    r0, n, r1 :: int
    r2 :: bool
    r3, r4 :: int
    r5 :: None
L0:
    r0 = 5
    r1 = 0
    n = r1
L1:
    r2 = n < r0 :: int
    if r2 goto L2 else goto L5 :: bool
L2:
    goto L4
L3:
L4:
    r3 = 1
    r4 = n + r3 :: int
    n = r4
    goto L1
L5:
    r5 = None
    return r5

[case testContinueNested]
def f() -> None:
    n = 0
    while n < 5:
        while n < 4:
            continue
        continue
[out]
def f():
    n, r0, r1 :: int
    r2 :: bool
    r3 :: int
    r4 :: bool
    r5 :: None
L0:
    r0 = 0
    n = r0
L1:
    r1 = 5
    r2 = n < r1 :: int
    if r2 goto L2 else goto L8 :: bool
L2:
L3:
    r3 = 4
    r4 = n < r3 :: int
    if r4 goto L4 else goto L6 :: bool
L4:
    goto L3
L5:
    goto L3
L6:
    goto L1
L7:
    goto L1
L8:
    r5 = None
    return r5

[case testForList]
from typing import List

def f(ls: List[int]) -> int:
    y = 0
    for x in ls:
        y = y + x
    return y
[out]
def f(ls):
    ls :: list
    y, r0, r1, r2, r3, x, r4 :: int
    r5 :: bool
    r6 :: object
    r7, r8, r9 :: int
L0:
    r0 = 0
    y = r0
    r2 = 0
    r1 = r2
    r3 = 1
L1:
    r4 = len ls :: list
    r5 = r1 < r4 :: int
    if r5 goto L2 else goto L4 :: bool
L2:
    r6 = ls[r1] :: list
    r7 = unbox(int, r6)
    x = r7
    r8 = y + x :: int
    y = r8
L3:
    r9 = r1 + r3 :: int
    r1 = r9
    goto L1
L4:
    return y

[case testForDictBasic]
from typing import Dict

def f(d: Dict[int, int]) -> None:
    for key in d:
        d[key]
[out]
def f(d):
    d :: dict
    key, r0, r1 :: object
    r2 :: int
    r3, r4 :: object
    r5 :: int
    r6 :: bool
    r7 :: None
L0:
    r0 = iter d :: object
L1:
    r1 = next r0 :: object
    if is_error(r1) goto L3 else goto L2
L2:
    key = r1
    r2 = unbox(int, key)
    r3 = box(int, r2)
    r4 = d[r3] :: dict
    r5 = unbox(int, r4)
    goto L1
L3:
    r6 = no_err_occurred
    r7 = None
    return r7

[case testForDictContinue]
from typing import Dict

def sum_over_even_values(d: Dict[int, int]) -> int:
    s = 0
    for key in d:
        if d[key] % 2:
            continue
        s = s + d[key]
    return s
[out]
def sum_over_even_values(d):
    d :: dict
    s, r0 :: int
    key, r1, r2 :: object
    r3 :: int
    r4, r5 :: object
    r6, r7, r8, r9 :: int
    r10 :: bool
    r11 :: int
    r12, r13 :: object
    r14, r15 :: int
    r16 :: bool
L0:
    r0 = 0
    s = r0
    r1 = iter d :: object
L1:
    r2 = next r1 :: object
    if is_error(r2) goto L6 else goto L2
L2:
    key = r2
    r3 = unbox(int, key)
    r4 = box(int, r3)
    r5 = d[r4] :: dict
    r6 = unbox(int, r5)
    r7 = 2
    r8 = r6 % r7 :: int
    r9 = 0
    r10 = r8 != r9 :: int
    if r10 goto L3 else goto L5 :: bool
L3:
    goto L1
L4:
L5:
    r11 = unbox(int, key)
    r12 = box(int, r11)
    r13 = d[r12] :: dict
    r14 = unbox(int, r13)
    r15 = s + r14 :: int
    s = r15
    goto L1
L6:
    r16 = no_err_occurred
    return s
