[case testForInRange]
def f() -> None:
    x = 0
    for i in range(5):
        x = x + i
[out]
def f():
    x, r0, r1, i, r2, r3, r4, r5 :: int
    r6 :: None
L0:
    r0 = 0
    x = r0
    r1 = 5
    r2 = 0
    i = r2
L1:
    if i < r1 goto L2 else goto L4 :: int
L2:
    r3 = x + i :: int
    x = r3
L3:
    r4 = 1
    r5 = i + r4 :: int
    i = r5
    goto L1
L4:
    r6 = None
    return r6

[case testBreak]
def f() -> None:
  n = 0
  while n < 5:
      break
[out]
def f():
    n, r0, r1 :: int
    r2 :: None
L0:
    r0 = 0
    n = r0
L1:
    r1 = 5
    if n < r1 goto L2 else goto L3 :: int
L2:
    goto L3
    goto L1
L3:
    r2 = None
    return r2

[case testBreakFor]
def f() -> None:
    for n in range(5):
        break
[out]
def f():
    r0, n, r1, r2, r3 :: int
    r4 :: None
L0:
    r0 = 5
    r1 = 0
    n = r1
L1:
    if n < r0 goto L2 else goto L4 :: int
L2:
    goto L4
L3:
    r2 = 1
    r3 = n + r2 :: int
    n = r3
    goto L1
L4:
    r4 = None
    return r4

[case testBreakNested]
def f() -> None:
    n = 0
    while n < 5:
        while n < 4:
            break
        break
[out]
def f():
    n, r0, r1, r2 :: int
    r3 :: None
L0:
    r0 = 0
    n = r0
L1:
    r1 = 5
    if n < r1 goto L2 else goto L6 :: int
L2:
L3:
    r2 = 4
    if n < r2 goto L4 else goto L5 :: int
L4:
    goto L5
    goto L3
L5:
    goto L6
    goto L1
L6:
    r3 = None
    return r3

[case testContinue]
def f() -> None:
  n = 0
  while n < 5:
      continue
[out]
def f():
    n, r0, r1 :: int
    r2 :: None
L0:
    r0 = 0
    n = r0
L1:
    r1 = 5
    if n < r1 goto L2 else goto L3 :: int
L2:
    goto L1
    goto L1
L3:
    r2 = None
    return r2

[case testContinueFor]
def f() -> None:
    for n in range(5):
        continue
[out]
def f():
    r0, n, r1, r2, r3 :: int
    r4 :: None
L0:
    r0 = 5
    r1 = 0
    n = r1
L1:
    if n < r0 goto L2 else goto L4 :: int
L2:
    goto L3
L3:
    r2 = 1
    r3 = n + r2 :: int
    n = r3
    goto L1
L4:
    r4 = None
    return r4

[case testContinueNested]
def f() -> None:
    n = 0
    while n < 5:
        while n < 4:
            continue
        continue
[out]
def f():
    n, r0, r1, r2 :: int
    r3 :: None
L0:
    r0 = 0
    n = r0
L1:
    r1 = 5
    if n < r1 goto L2 else goto L6 :: int
L2:
L3:
    r2 = 4
    if n < r2 goto L4 else goto L5 :: int
L4:
    goto L3
    goto L3
L5:
    goto L1
    goto L1
L6:
    r3 = None
    return r3

[case testForList]
from typing import List

def f(ls: List[int]) -> int:
    y = 0
    for x in ls:
        y = y + x
    return y
[out]
def f(ls):
    ls :: list
    y, r0, r1, r2, r3, x, r4 :: int
    r5 :: object
    r6, r7, r8 :: int
L0:
    r0 = 0
    y = r0
    r2 = 0
    r1 = r2
    r3 = 1
L1:
    r4 = len ls :: list
    if r1 < r4 goto L2 else goto L4 :: int
L2:
    r5 = ls[r1] :: list
    r6 = unbox(int, r5)
    x = r6
    r7 = y + x :: int
    y = r7
L3:
    r8 = r1 + r3 :: int
    r1 = r8
    goto L1
L4:
    return y
