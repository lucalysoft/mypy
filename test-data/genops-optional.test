[case testIsNone]
from typing import Optional

class A: pass

def f(x: Optional[A]) -> int:
    if x is None:
        return 1
    return 2
[out]
def f(x):
    x :: optional[A]
    r0 :: bool
    r1, r2 :: int
L0:
    r0 = x is None
    if r0 goto L1 else goto L2 :: bool
L1:
    r1 = 1
    return r1
L2:
    r2 = 2
    return r2

[case testIsNotNone]
from typing import Optional

class A: pass

def f(x: Optional[A]) -> int:
    if x is not None:
        return 1
    return 2
[out]
def f(x):
    x :: optional[A]
    r0 :: bool
    r1, r2 :: int
L0:
    r0 = x is None
    if not r0 goto L1 else goto L2 :: bool
L1:
    r1 = 1
    return r1
L2:
    r2 = 2
    return r2

[case testAssignToOptional]
from typing import Optional

class A:
    a: Optional[int]

def f(x: Optional[A], y: Optional[A], z: Optional[int]) -> None:
    x = None
    x = A()
    x = y
    z = 1
    a = A()
    a.a = 1
    a.a = None
[out]
def f(x, y, z):
    x, y :: optional[A]
    z :: optional[int]
    r0 :: None
    r1 :: A
    r2 :: int
    r3 :: object
    a, r4 :: A
    r5 :: int
    r6 :: object
    r7 :: bool
    r8 :: None
    r9 :: bool
    r10 :: None
L0:
    r0 = None
    x = r0
    r1 = A()
    x = r1
    x = y
    r2 = 1
    r3 = box(int, r2)
    z = r3
    r4 = A()
    a = r4
    r5 = 1
    r6 = box(int, r5)
    a.a = r6; r7 = is_error
    r8 = None
    a.a = r8; r9 = is_error
    r10 = None
    return r10

[case testBoxOptionalListItem]
from typing import List, Optional

def f(x: List[Optional[int]]) -> None:
    x[0] = 0
    x[1] = None
[out]
def f(x):
    x :: list
    r0, r1 :: int
    r2 :: object
    r3 :: bool
    r4 :: int
    r5 :: None
    r6 :: bool
    r7 :: None
L0:
    r0 = 0
    r1 = 0
    r2 = box(int, r1)
    r3 = x.__setitem__(r0, r2) :: list
    r4 = 1
    r5 = None
    r6 = x.__setitem__(r4, r5) :: list
    r7 = None
    return r7

[case testNarrowDownFromOptional]
from typing import Optional

class A: pass

def f(x: Optional[A]) -> A:
    y = A()
    if x is not None:
        y = x
        return x
    return y
[out]
def f(x):
    x :: optional[A]
    y, r0 :: A
    r1 :: bool
    r2, r3 :: A
L0:
    r0 = A()
    y = r0
    r1 = x is None
    if not r1 goto L1 else goto L2 :: bool
L1:
    r2 = cast(A, x)
    y = r2
    r3 = cast(A, x)
    return r3
L2:
    return y
