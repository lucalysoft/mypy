-- Test cases for C generation. Generally it is better to write evaluation test cases
-- for most things, but these are useful for sanity checking the generated C code.

[case testTrivialFunctionOutput]
def f(x: int) -> int:
    return x
[out]
== __native.c ==
#include "__native.h"
static PyMethodDef module_methods[] = {
    {"f", (PyCFunction)CPyPy_f, METH_VARARGS | METH_KEYWORDS, NULL /* docstring */},
    {NULL, NULL, 0, NULL}
};

static struct PyModuleDef module = {
    PyModuleDef_HEAD_INIT,
    "prog",
    NULL, /* docstring */
    -1,       /* size of per-interpreter state of the module,
                 or -1 if the module keeps state in global variables. */
    module_methods
};

PyMODINIT_FUNC PyInit_prog(void)
{
    if (CPyStatic_module_internal) {
        Py_INCREF(CPyStatic_module_internal);
        return CPyStatic_module_internal;
    }
    CPyStatic_module_internal = PyModule_Create(&module);
    if (unlikely(CPyStatic_module_internal == NULL))
        return NULL;
    PyObject *modname = PyObject_GetAttrString((PyObject *)CPyStatic_module_internal, "__name__");
    CPyStatic_globals = PyModule_GetDict(CPyStatic_module_internal);
    if (unlikely(CPyStatic_globals == NULL))
        return NULL;
    if (CPyGlobalsInit() < 0)
        return NULL;
    char result = CPyDef___top_level__();
    if (result == 2)
        return NULL;
    Py_DECREF(modname);
    return CPyStatic_module_internal;
}

CPyTagged CPyDef_f(CPyTagged cpy_r_x) {
CPyL0: ;
    CPyTagged_IncRef(cpy_r_x);
    return cpy_r_x;
}

PyObject *CPyPy_f(PyObject *self, PyObject *args, PyObject *kw) {
    static char *kwlist[] = {"x", 0};
    PyObject *obj_x;
    if (!CPyArg_ParseTupleAndKeywords(args, kw, "O:f", kwlist, &obj_x)) {
        return NULL;
    }
    CPyTagged arg_x;
    if (likely(PyLong_Check(obj_x)))
        arg_x = CPyTagged_BorrowFromObject(obj_x);
    else {
        PyErr_SetString(PyExc_TypeError, "int object expected");
        return NULL;
    }
    CPyTagged retval = CPyDef_f(arg_x);
    if (retval == CPY_INT_TAG) {
        return NULL;
    }
    PyObject *retbox = CPyTagged_StealAsObject(retval);
    return retbox;
}

char CPyDef___top_level__(void) {
    PyObject *cpy_r_r0;
    PyObject *cpy_r_r1;
    char cpy_r_r2;
    PyObject *cpy_r_r3;
    PyObject *cpy_r_r4;
    char cpy_r_r5;
    char cpy_r_r6;
CPyL0: ;
    cpy_r_r0 = CPyStatic_builtins_module;
    cpy_r_r1 = Py_None;
    cpy_r_r2 = cpy_r_r0 != cpy_r_r1;
    if (cpy_r_r2) {
        goto CPyL3;
    } else
        goto CPyL1;
CPyL1: ;
    cpy_r_r3 = CPyStatic_unicode_0; /* 'builtins' */
    cpy_r_r4 = PyImport_Import(cpy_r_r3);
    if (unlikely(cpy_r_r4 == NULL)) {
        CPy_AddTraceback("prog.py", "<module>", -1, CPyStatic_globals);
        goto CPyL4;
    } else
        goto CPyL2;
CPyL2: ;
    CPyStatic_builtins_module = cpy_r_r4;
    CPy_INCREF(CPyStatic_builtins_module);
    CPy_DECREF(cpy_r_r4);
    goto CPyL3;
CPyL3: ;
    cpy_r_r5 = 1; /* None */
    return cpy_r_r5;
CPyL4: ;
    cpy_r_r6 = 2;
    return cpy_r_r6;
}

int CPyGlobalsInit(void)
{
    static int is_initialized = 0;
    if (is_initialized) return 0;
    
    CPy_Init();
    CPyStatic_module = Py_None;
    CPyStatic_builtins_module = Py_None;
    CPyStatic_unicode_0 = PyUnicode_FromStringAndSize("builtins", 8);
    if (unlikely(CPyStatic_unicode_0 == NULL))
        return -1;
    is_initialized = 1;
    return 0;
}
CPyModule *CPyStatic_module_internal = NULL;
CPyModule *CPyStatic_builtins_module_internal = NULL;

PyObject *CPyStatic_unicode_0;
CPyModule *CPyStatic_module_internal;
CPyModule *CPyStatic_module;
PyObject *CPyStatic_globals;
CPyModule *CPyStatic_builtins_module_internal;
CPyModule *CPyStatic_builtins_module;
== __native.h ==
#include <Python.h>
#include <CPy.h>

int CPyGlobalsInit(void);

extern PyObject *CPyStatic_unicode_0;
extern CPyModule *CPyStatic_module_internal;
extern CPyModule *CPyStatic_module;
extern PyObject *CPyStatic_globals;
extern CPyModule *CPyStatic_builtins_module_internal;
extern CPyModule *CPyStatic_builtins_module;
CPyTagged CPyDef_f(CPyTagged cpy_r_x);
PyObject *CPyPy_f(PyObject *self, PyObject *args, PyObject *kw);
char CPyDef___top_level__(void);

[case testError]
def f(x: List[int]) -> None: pass
[out]
prog.py:1: error: Name 'List' is not defined
prog.py:1: note: Did you forget to import it from "typing"? (Suggestion: "from typing import List")

