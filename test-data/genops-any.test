-- Generate ops related to Any types


[case testCoerceAnyInCallsAndReturn]
from typing import Any
def f(x: Any) -> Any:
    return g(x)
def g(x: int) -> int:
    return f(x)
[out]
def f(x):
    x :: object
    r0, r1 :: int
    r2 :: object
L0:
    r0 = unbox(int, x)
    r1 = g(r0)
    r2 = box(int, r1)
    return r2
def g(x):
    x :: int
    r0, r1 :: object
    r2 :: int
L0:
    r0 = box(int, x)
    r1 = f(r0)
    r2 = unbox(int, r1)
    return r2

[case testCoerceAnyInAssignment]
from typing import Any, Tuple
class C:
    a: Any
    n: int
def f(a: Any, n: int, c: C) -> None:
    c.a = n
    c.n = a
    a = n
    n = a
[out]
def f(a, n, c):
    a :: object
    n :: int
    c :: C
    r0 :: object
    r1 :: bool
    r2 :: int
    r3 :: bool
    r4 :: object
    r5 :: int
    r6 :: None
L0:
    r0 = box(int, n)
    c.a = r0; r1 = is_error
    r2 = unbox(int, a)
    c.n = r2; r3 = is_error
    r4 = box(int, n)
    a = r4
    r5 = unbox(int, a)
    n = r5
    r6 = None
    return r6
