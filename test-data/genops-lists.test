[case testListGet]
from typing import List
def f(x: List[int]) -> int:
    return x[0]
[out]
def f(x):
    x :: list
    r0 :: int
    r1 :: object
    r2 :: int
L0:
    r0 = 0
    r1 = x[r0] :: list
    r2 = unbox(int, r1)
    return r2

[case testListOfListGet]
from typing import List
def f(x: List[List[int]]) -> List[int]:
    return x[0]
[out]
def f(x):
    x :: list
    r0 :: int
    r1 :: object
    r2 :: list
L0:
    r0 = 0
    r1 = x[r0] :: list
    r2 = cast(list, r1)
    return r2

[case testListOfListGet2]
from typing import List
def f(x: List[List[int]]) -> int:
    return x[0][1]
[out]
def f(x):
    x :: list
    r0 :: int
    r1 :: object
    r2 :: list
    r3 :: int
    r4 :: object
    r5 :: int
L0:
    r0 = 0
    r1 = x[r0] :: list
    r2 = cast(list, r1)
    r3 = 1
    r4 = r2[r3] :: list
    r5 = unbox(int, r4)
    return r5

[case testListSet]
from typing import List
def f(x: List[int]) -> None:
    x[0] = 1
[out]
def f(x):
    x :: list
    r0, r1 :: int
    r2 :: object
    r3 :: bool
    r4 :: None
L0:
    r0 = 0
    r1 = 1
    r2 = box(int, r1)
    r3 = x.__setitem__(r0, r2)
    r4 = None
    return r4

[case testNewListEmpty]
from typing import List
def f() -> None:
    x = []  # type: List[int]
[out]
def f():
    x :: list
    r0 :: None
L0:
    x = []
    r0 = None
    return r0

[case testNewListTwoItems]
from typing import List
def f() -> None:
    x: List[int] = [1, 2]
[out]
def f():
    x :: list
    r0, r1 :: int
    r2, r3 :: object
    r4 :: None
L0:
    r0 = 1
    r1 = 2
    r2 = box(int, r0)
    r3 = box(int, r1)
    x = [r2, r3]
    r4 = None
    return r4

[case testListMultiply]
from typing import List
def f(a: List[int]) -> None:
    b = a * 2
    b = 3 * [4]
[out]
def f(a):
    a, b :: list
    r0, r1, r2 :: int
    r3 :: list
    r4 :: object
    r5 :: None
L0:
    r0 = 2
    b = a * r0 :: list
    r1 = 3
    r2 = 4
    r4 = box(int, r2)
    r3 = [r4]
    b = r1 * r3 :: list
    r5 = None
    return r5

[case testListLen]
from typing import List
def f(a: List[int]) -> int:
    return len(a)
[out]
def f(a):
    a :: list
    r0 :: int
L0:
    r0 = len a :: list
    return r0

[case testListAppend]
from typing import List
def f(a: List[int], x: int) -> None:
    a.append(x)
[out]
def f(a, x):
    a :: list
    x :: int
    r0 :: object
    r1 :: bool
    r2 :: None
L0:
    r0 = box(int, x)
    r1 = a.append(r0)
    r2 = None
    return r2
