[case testTupleGet]
from typing import Tuple

def f(x: Tuple[Tuple[int, bool], bool]) -> int:
    return x[0][0]
[out]
def f(x):
    x :: tuple[tuple[int, bool], bool]
    r0 :: tuple[int, bool]
    r1 :: int
L0:
    r0 = x[0]
    r1 = r0[0]
    return r1

[case testTupleNew]
from typing import Tuple

def f() -> int:
    t = (True, 1)
    return t[1]
[out]
def f():
    t :: tuple[bool, int]
    r0 :: bool
    r1 :: int
    r2 :: tuple[bool, int]
    r3 :: int
L0:
    r0 = True
    r1 = 1
    r2 = (r0, r1)
    t = r2
    r3 = t[1]
    return r3

[case testTupleLen]
from typing import Tuple
def f(x: Tuple[bool, bool, int]) -> int:
    return len(x)
[out]
def f(x):
    x :: tuple[bool, bool, int]
    r0 :: int
L0:
    r0 = 3
    return r0

[case testSequenceTuple]
from typing import List
def f(x: List[bool]) -> bool:
    return tuple(x)[1]
[out]
def f(x):
    x :: list
    r0 :: tuple
    r1 :: int
    r2 :: object
    r3 :: bool
L0:
    r0 = tuple x :: list
    r1 = 1
    r2 = r0[r1] :: tuple
    r3 = unbox(bool, r2)
    return r3

[case testSequenceTupleLen]
from typing import Tuple
def f(x: Tuple[int, ...]) -> int:
  return len(x)
[out]
def f(x):
    x :: tuple
    r0 :: int
L0:
    r0 = len x :: tuple
    return r0

[case testSequenceTupleForced]
from typing import Tuple
def f() -> int:
    t = (1, 2) # type: Tuple[int, ...]
    return t[1]
[out]
def f():
    t :: tuple
    r0, r1 :: int
    r2 :: tuple[int, int]
    r3 :: object
    r4 :: int
    r5 :: object
    r6 :: int
L0:
    r0 = 1
    r1 = 2
    r2 = (r0, r1)
    r3 = box(tuple[int, int], r2)
    t = r3
    r4 = 1
    r5 = t[r4] :: tuple
    r6 = unbox(int, r5)
    return r6

