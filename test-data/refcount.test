-- Test cases for reference count  insertion.

[case testReturnLiteral]
def f() -> int:
    return 1
[out]
L0:
    r0 = 1
    return r0

[case testReturnLocal]
def f() -> int:
    x = 1
    return x
[out]
L0:
    r0 = 1
    x = r0
    return x

[case testLocalVars]
def f() -> int:
    x = 1
    y = x
    x = y
    return x
[out]
L0:
    r0 = 1
    x = r0
    y = x
    x = y
    return x

[case testLocalVars2]
def f() -> int:
    x = 1
    y = x
    z = x
    return y + z
[out]
L0:
    r0 = 1
    x = r0
    inc_ref x :: int
    y = x
    z = x
    r1 = y + z :: int
    dec_ref y :: int
    dec_ref z :: int
    return r1

[case testFreeAtReturn]
def f() -> int:
    x = 1
    y = 2
    if x == 1:
        return x
    return y
[out]
L0:
    r0 = 1
    x = r0
    r1 = 2
    y = r1
    r2 = 1
    if x == r2 goto L3 else goto L4 :: int
L1:
    return x
L2:
    return y
L3:
    dec_ref y :: int
    dec_ref r2 :: int
    goto L1
L4:
    dec_ref x :: int
    dec_ref r2 :: int
    goto L2

[case testArgumentsInOps]
def f(a: int, b: int) -> int:
    x = a + 1
    y = x + a
    return y
[out]
L0:
    r0 = 1
    r1 = a + r0 :: int
    dec_ref r0 :: int
    x = r1
    r2 = x + a :: int
    dec_ref x :: int
    y = r2
    return y

[case testArgumentsInAssign]
def f(a: int) -> int:
    x = a
    y = a
    x = 1
    return x + y
[out]
L0:
    inc_ref a :: int
    x = a
    dec_ref x :: int
    inc_ref a :: int
    y = a
    r0 = 1
    x = r0
    r1 = x + y :: int
    dec_ref x :: int
    dec_ref y :: int
    return r1

[case testAssignToArgument1]
def f(a: int) -> int:
    a = 1
    y = a
    return y
[out]
L0:
    r0 = 1
    a = r0
    y = a
    return y

[case testAssignToArgument2]
def f(a: int) -> int:
    a = 1
    a = 2
    a = 3
    return a
[out]
L0:
    r0 = 1
    a = r0
    dec_ref a :: int
    r1 = 2
    a = r1
    dec_ref a :: int
    r2 = 3
    a = r2
    return a

[case testAssignToArgument3]
def f(a: int) -> int:
    x = 1
    a = x
    y = x
    return a
[out]
L0:
    r0 = 1
    x = r0
    inc_ref x :: int
    a = x
    y = x
    dec_ref y :: int
    return a

[case testReturnArgument]
def f(a: int) -> int:
    return a
[out]
L0:
    inc_ref a :: int
    return a

[case testConditionalAssignToArgument1]
def f(a: int) -> int:
    if a == a:
        a = 1
    else:
        x = 2
    y = a + 1
    return y
[out]
L0:
    if a == a goto L1 else goto L2 :: int
L1:
    r0 = 1
    a = r0
    goto L3
L2:
    r1 = 2
    x = r1
    dec_ref x :: int
    goto L4
L3:
    r2 = 1
    r3 = a + r2 :: int
    dec_ref a :: int
    dec_ref r2 :: int
    y = r3
    return y
L4:
    inc_ref a :: int
    goto L3

[case testConditionalAssignToArgument2]
def f(a: int) -> int:
    if a == a:
        x = 2
    else:
        a = 1
    y = a + 1
    return y
[out]
L0:
    if a == a goto L1 else goto L2 :: int
L1:
    r0 = 2
    x = r0
    dec_ref x :: int
    goto L4
L2:
    r1 = 1
    a = r1
L3:
    r2 = 1
    r3 = a + r2 :: int
    dec_ref a :: int
    dec_ref r2 :: int
    y = r3
    return y
L4:
    inc_ref a :: int
    goto L3

[case testConditionalAssignToArgument3]
def f(a: int) -> int:
    if a == a:
        a = 1
    return a
[out]
L0:
    if a == a goto L1 else goto L3 :: int
L1:
    r0 = 1
    a = r0
L2:
    return a
L3:
    inc_ref a :: int
    goto L2

[case testAssignRegisterToItself]
def f(a: int) -> int:
    a = a
    x = 1
    x = x
    return x + a
-- This is correct but bad code
[out]
L0:
    inc_ref a :: int
    a = a
    r0 = 1
    x = r0
    inc_ref x :: int
    dec_ref x :: int
    x = x
    r1 = x + a :: int
    dec_ref x :: int
    dec_ref a :: int
    return r1

[case testIncrement1]
def f(a: int) -> int:
    a = a + 1
    x = 1
    x = x + 1
    return a + x
[out]
L0:
    r0 = 1
    r1 = a + r0 :: int
    dec_ref r0 :: int
    a = r1
    r2 = 1
    x = r2
    r3 = 1
    r4 = x + r3 :: int
    dec_ref x :: int
    dec_ref r3 :: int
    x = r4
    r5 = a + x :: int
    dec_ref a :: int
    dec_ref x :: int
    return r5

[case testIncrement2]
def f() -> None:
    x = 1
    x = x + 1
[out]
L0:
    r0 = 1
    x = r0
    r1 = 1
    r2 = x + r1 :: int
    dec_ref x :: int
    dec_ref r1 :: int
    x = r2
    dec_ref x :: int
    r3 = None
    return r3

[case testAdd1]
def f() -> None:
    y = 1
    x = y + 1
[out]
L0:
    r0 = 1
    y = r0
    r1 = 1
    r2 = y + r1 :: int
    dec_ref y :: int
    dec_ref r1 :: int
    x = r2
    dec_ref x :: int
    r3 = None
    return r3

[case testAdd2]
def f(a: int) -> int:
    a = a + a
    x = a
    x = x + x
    return x
[out]
L0:
    r0 = a + a :: int
    a = r0
    x = a
    r1 = x + x :: int
    dec_ref x :: int
    x = r1
    return x

[case testAdd3]
def f(a: int) -> int:
    x = a + a
    y = x + x
    return y
[out]
L0:
    r0 = a + a :: int
    x = r0
    r1 = x + x :: int
    dec_ref x :: int
    y = r1
    return y

[case testAdd4]
def f(a: int) -> None:
    x = a + a
    y = 1
    z = y + y
[out]
L0:
    r0 = a + a :: int
    x = r0
    dec_ref x :: int
    r1 = 1
    y = r1
    r2 = y + y :: int
    dec_ref y :: int
    z = r2
    dec_ref z :: int
    r3 = None
    return r3

[case testAdd5]
def f(a: int) -> None:
    a = a + a
    x = 1
    x = x + x
[out]
L0:
    r0 = a + a :: int
    a = r0
    dec_ref a :: int
    r1 = 1
    x = r1
    r2 = x + x :: int
    dec_ref x :: int
    x = r2
    dec_ref x :: int
    r3 = None
    return r3

[case testReturnInMiddleOfFunction]
def f() -> int:
    x = 1
    y = 2
    z = 3
    if z == z:
        return z
    a = 1
    return x + y - a
[out]
L0:
    r0 = 1
    x = r0
    r1 = 2
    y = r1
    r2 = 3
    z = r2
    if z == z goto L3 else goto L4 :: int
L1:
    return z
L2:
    r3 = 1
    a = r3
    r4 = x + y :: int
    dec_ref x :: int
    dec_ref y :: int
    r5 = r4 - a :: int
    dec_ref r4 :: int
    dec_ref a :: int
    return r5
L3:
    dec_ref x :: int
    dec_ref y :: int
    goto L1
L4:
    dec_ref z :: int
    goto L2

[case testLoop]
def f(a: int) -> int:
    sum = 0
    i = 0
    while i <= a:
        sum = sum + i
        i = i + 1
    return sum
[out]
L0:
    r0 = 0
    sum = r0
    r1 = 0
    i = r1
L1:
    if i <= a goto L2 else goto L4 :: int
L2:
    r2 = sum + i :: int
    dec_ref sum :: int
    sum = r2
    r3 = 1
    r4 = i + r3 :: int
    dec_ref i :: int
    dec_ref r3 :: int
    i = r4
    goto L1
L3:
    return sum
L4:
    dec_ref i :: int
    goto L3

[case testCall]
def f(a: int) -> int:
    return f(a + 1)
[out]
L0:
    r0 = 1
    r1 = a + r0 :: int
    dec_ref r0 :: int
    r2 = f(r1)
    dec_ref r1 :: int
    return r2

[case testError]
def f(x: List[int]) -> None: pass # E: Name 'List' is not defined

[case testNewList]
def f() -> int:
    a = [0, 1]
    return 0
[out]
L0:
    r0 = 0
    r1 = 1
    r2 = box(int, r0)
    r3 = box(int, r1)
    r4 = [r2, r3]
    dec_ref r2
    dec_ref r3
    a = r4
    dec_ref a
    r5 = 0
    return r5

[case testReturnList]
from typing import List
def f(x: int) -> List[int]:
    return [x]
[out]
L0:
    inc_ref x :: int
    r0 = box(int, x)
    r1 = [r0]
    dec_ref r0
    return r1

[case testListSet]
from typing import List
def f(a: List[int], b: List[int]) -> None:
    a[0] = b[0]
[out]
L0:
    r0 = 0
    r1 = 0
    r2 = b[r1] :: list
    dec_ref r1 :: int
    r3 = unbox(int, r2)
    dec_ref r2
    r4 = box(int, r3)
    r5 = a.__setitem__(r0, r4)
    dec_ref r0 :: int
    dec_ref r4
    r6 = None
    return r6

[case testTupleRefcount]
from typing import Tuple
def f(x: Tuple[Tuple[int, bool], bool]) -> int:
    return x[0][0]
[out]
L0:
    r0 = x[0]
    r1 = r0[0]
    dec_ref r0
    return r1

[case testUserClassRefCount]
class C:
    x: 'C'
def f() -> None:
    c = C()
    c.x = C()
[out]
L0:
    r0 = C()
    c = r0
    r1 = C()
    c.x = r1; r2 = is_error
    dec_ref c
    dec_ref r1
    r3 = None
    return r3

[case testCastRefCount]
class C: pass

def f() -> None:
    a = [C()]
    d = a[0]
[out]
L0:
    r0 = C()
    r1 = [r0]
    dec_ref r0
    a = r1
    r2 = 0
    r3 = a[r2] :: list
    dec_ref a
    dec_ref r2 :: int
    r4 = cast(C, r3)
    d = r4
    dec_ref d
    r5 = None
    return r5

[case testUnaryBranchSpecialCase]
def f(x: bool) -> int:
    if x:
        return 1
    return 2
[out]
L0:
    if x goto L1 else goto L2 :: bool
L1:
    r0 = 1
    return r0
L2:
    r1 = 2
    return r1

[case testUnicodeLiteral]
def f() -> str:
    return "some string"
[out]
L0:
    r0 = __unicode_0 :: static
    inc_ref r0
    return r0

[case testPyMethodCall]
from typing import List
def g(x: List[int], y: List[int]) -> None:
    x.extend(y)
[out]
L0:
    r0 = __unicode_0 :: static
    inc_ref r0
    r1 = x.r0(y) :: py
    dec_ref r0
    r2 = cast(None, r1)
    dec_ref r2
    r3 = None
    return r3

[case testListAppend]
from typing import List
def f(a: List[int], x: int) -> None:
    a.append(x)
[out]
L0:
    inc_ref x :: int
    r0 = box(int, x)
    r1 = a.append(r0)
    dec_ref r0
    r2 = None
    dec_ref r2
    r3 = None
    return r3
