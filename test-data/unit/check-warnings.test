-- Test cases for warning generation.

-- Redundant casts
-- ---------------

[case testRedundantCast]
# options: warn_redundant_casts
from typing import cast
a = 1
b = cast(str, a)
c = cast(int, a)
[out]
main:5: note: Redundant cast to "int"

[case testRedundantCastWithIsinstance]
# options: warn_redundant_casts
from typing import cast, Union
x = 1  # type: Union[int, str]
if isinstance(x, str):
    cast(str, x)
[builtins fixtures/isinstance.pyi]
[out]
main:5: note: Redundant cast to "str"

[case testCastToSuperclassNotRedundant]
# options: warn_redundant_casts
from typing import cast, TypeVar, List
T = TypeVar('T')
def add(xs: List[T], ys: List[T]) -> List[T]: pass
class A: pass
class B(A): pass
a = A()
b = B()
# Without the cast, the following line would fail to type check.
c = add([cast(A, b)], [a])
[builtins fixtures/list.pyi]


-- Unused 'type: ignore' comments
-- ------------------------------

[case testUnusedTypeIgnore]
# options: warn_unused_ignores
a = 1
a = 'a' # type: ignore
a = 2 # type: ignore # N: unused 'type: ignore' comment
a = 'b' # E: Incompatible types in assignment (expression has type "str", variable has type "int")

[case testUnusedTypeIgnoreImport]
# options: warn_unused_ignores
import banana # type: ignore
import m # type: ignore
from m import * # type: ignore
[file m.py]
pass
[out]
main:3: note: unused 'type: ignore' comment
main:4: note: unused 'type: ignore' comment
