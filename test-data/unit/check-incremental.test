-- Checks for incremental mode (see testcheck.py).
-- Each test is run twice, once with a cold cache, once with a warm cache.
-- The first time it must pass.
-- Before it is run the second time, any *.py.next files are copied to *.py.
-- The second time it must produce the errors given in the [out] section, if any.
--
-- Any files that we expect to be stale and rechecked should be annotated in
-- the [stale] annotation. The test suite will automatically assume that
-- __main__ is stale so we can avoid constantly having to annotate it.
-- The list of stale files can be in any arbitrary order, or can be left empty
-- if no files should be stale.

[case testIncrementalEmpty]
[out]

[case testIncrementalBasics]
import m
[file m.py]
def foo():
    pass
[file m.py.next]
def foo() -> None:
    pass
[stale m]
[out]

[case testIncrementalError]
import m
[file m.py]
def foo() -> None:
    pass
[file m.py.next]
def foo() -> None:
    bar()
[stale m]
[out]
main:1: note: In module imported here:
tmp/m.py: note: In function "foo":
tmp/m.py:2: error: Name 'bar' is not defined

[case testIncrementalSimpleImportSequence]
import mod1
mod1.func1()

[file mod1.py]
import mod2
def func1() -> None: mod2.func2()

[file mod2.py]
import mod3
def func2() -> None: mod3.func3()

[file mod3.py]
def func3() -> None: pass

[stale]
[out]


[case testIncrementalSimpleImportCascade]
import mod1
mod1.func1()

[file mod1.py]
import mod2
def func1() -> None: mod2.func2()

[file mod2.py]
import mod3
def func2() -> None: mod3.func3()

[file mod3.py]
def func3() -> None: pass

[file mod3.py.next]
def func3() -> int: return 2

[stale mod1, mod2, mod3]
[out]

[case testIncrementalSimpleBranchingModules]
import mod1
import mod2

[file mod1.py]
def func() -> None: pass

[file mod2.py]
def func() -> None: pass

[file mod1.py.next]
def func() -> int: return 1

[stale mod1]
[out]

[case testIncrementalSubmoduleImport]
from parent.childA import Foo

def func1() -> Foo:
    return Foo()

[file parent/__init__.py]
from parent.childA import Foo
from parent.childB import Bar

__all__ = ['Foo', 'Bar']

[file parent/childA.py]
import parent

class Foo:
    def test(self) -> int:
        return parent.Bar().test()

[file parent/childB.py]
class Bar:
    def test(self) -> int: return 3

[builtins fixtures/module_all.py]
[stale]
[out]

[case testIncrementalSubmoduleParentBackreference]
import parent

[file parent/__init__.py]
from parent import a

[file parent/a.py]
import parent.b

[file parent/b.py]

[builtins fixtures/args.py]
[stale]
[out]

[case testIncrementalSubmoduleParentBackreferenceComplex]
import parent

[file parent/__init__.py]
import parent.a

[file parent/a.py]
import parent.b
import parent.c

[file parent/b.py]
import parent.a

[file parent/c.py]
import parent.a

[builtins fixtures/args.py]
[stale]
[out]
