-- Test cases for fine-grained incremental mode and blocking errors
--
-- The comments in fine-grained.test explain how these tests work.

-- TODO:
-- - new file with parse error
-- - blocking error while other existing errors as well (that get preserved)
-- - multiple files with blocking errors
-- - differences in other modules + blocking error

[case testParseError]
import a
a.f()
[file a.py]
def f() -> None: pass
[file a.py.2]
def f(x: int) ->
[file a.py.3]
def f(x: int) -> None: pass
[file a.py.4]
def f() -> None: pass
[out]
==
a.py:1: error: invalid syntax
==
main:2: error: Too few arguments for "f"
==

[case testParseErrorMultipleTimes]
import a
a.f()
[file a.py]
def f() -> None: pass
[file a.py.2]
def f(x: int) ->
[file a.py.3]
def f(x: int
      ) -> None
[file a.py.4]
def f(x: int) -> None: pass
[out]
==
a.py:1: error: invalid syntax
==
a.py:2: error: invalid syntax
==
main:2: error: Too few arguments for "f"

[case testSemanticAnalysisBlockingError]
import a
a.f()
[file a.py]
def f() -> None: pass
[file a.py.2]
def f() -> None: pass
break
[file a.py.3]
def f(x: int) -> None: pass
[out]
==
a.py:2: error: 'break' outside loop
==
main:2: error: Too few arguments for "f"

[case testBlockingErrorWithPreviousError]
import a
import b
a.f(1)
def g() -> None:
    b.f(1)
[file a.py]
def f() -> None: pass
[file b.py]
def f() -> None: pass
[file a.py.2]
def f() -> None
[file a.py.3]
def f() -> None: pass
[out]
main:3: error: Too many arguments for "f"
main:5: error: Too many arguments for "f"
==
a.py:1: error: invalid syntax
==
main:3: error: Too many arguments for "f"
main:5: error: Too many arguments for "f"

[case testUpdateClassReferenceAcrossBlockingError]
import a
c: a.C

def f() -> None:
    c.f()
[file a.py]
class C:
    def f(self) -> None: pass
[file a.py.2]
error error
[file a.py.3]
class C:
    def f(self, x: int) -> None: pass
[out]
==
a.py:1: error: invalid syntax
==
main:5: error: Too few arguments for "f" of "C"
