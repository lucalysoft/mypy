[case testSetAttrWithProperty]
from typing import Any
class Foo:
    _a = 1
    def __setattr__(self, name: str, value: Any) -> None:
        self._a = value
    @property
    def a(self) -> int:
        return self._a
f = Foo()
f.a = 2
[builtins fixtures/property.pyi]

[case testInheritedSetAttrWithProperty]
from typing import Any
class Foo:
    _a = 1
    def __setattr__(self, name: str, value: Any) -> None:
        self._a = value
class Bar(Foo):
    @property
    def a(self) -> int:
        return self._a
f = Bar()
f.a = 2
[builtins fixtures/property.pyi]

[case testSetAttrWithIncompatibleType]
from typing import Any
class Foo:
    _a = 1
    def __setattr__(self, name: str, value: Any) -> None:
        self._a = value
    @property
    def a(self) -> int:
        return self._a
f = Foo()
f.a = 'hello'  # E: Incompatible types in assignment (expression has type "str", variable has type "int")
[builtins fixtures/property.pyi]
