-- Test cases for the new semantic analyzer

[case testNewAnalyzerEmpty]
# flags: --new-semantic-analyzer

[case testNewAnalyzerSimpleAssignment]
# flags: --new-semantic-analyzer
x = 1
x.y # E: "int" has no attribute "y"
y # E: Name 'y' is not defined

[case testNewAnalyzerSimpleAnnotation]
# flags: --new-semantic-analyzer
x: int = 0
y: str = 0 \
    # E: Incompatible types in assignment (expression has type "int", variable has type "str")

[case testNewAnalyzerSimpleClass]
# flags: --new-semantic-analyzer
class A:
    x: int
a: A
a.x
a.y # E: "A" has no attribute "y"

[case testNewAnalyzerErrorInClassBody]
# flags: --new-semantic-analyzer
class A:
    x # E: Name 'x' is not defined

[case testNewAnalyzerTypeAnnotationForwardReference]
# flags: --new-semantic-analyzer
class A:
    b: B
class B:
    a: A
a: A
b: B
a.b = a # E: Incompatible types in assignment (expression has type "A", variable has type "B")
a.b = b
b.a = a
b.a = b # E: Incompatible types in assignment (expression has type "B", variable has type "A")

[case testNewAnalyzerTypeAnnotationCycle1]
# flags: --new-semantic-analyzer
import b
[file a.py]
import b
class A: pass
y: b.B
y() # E: "B" not callable
[file b.py]
import a
class B: pass
x: a.A
reveal_type(x) # E: Revealed type is 'a.A'

[case testNewAnalyzerTypeAnnotationCycle2]
# flags: --new-semantic-analyzer
import a
[file a.py]
from b import B
class A: pass
y: B
y()
[file b.py]
from a import A
class B: pass
x: A
x()
[out]
tmp/b.py:4: error: "A" not callable
tmp/a.py:4: error: "B" not callable

[case testNewAnalyzerTypeAnnotationCycle3]
# flags: --new-semantic-analyzer
import b
[file a.py]
from b import bad # E: Module 'b' has no attribute 'bad'
[file b.py]
from a import bad2 # E: Module 'a' has no attribute 'bad2'

[case testNewAnalyzerTypeAnnotationCycle4]
# flags: --new-semantic-analyzer
import b
[file a.py]
from b import bad # E: Module 'b' has no attribute 'bad'
[file b.py]
# TODO: Could we generate an error here as well?
from a import bad

[case testNewAnalyzerSimpleFunction]
# flags: --new-semantic-analyzer
def f(x: int) -> str:
    return 'x'

def g(x: int) -> int:
    y = f(1)
    return y # E: Incompatible return value type (got "str", expected "int")

[case testNewAnalyzerSimpleMethod]
# flags: --new-semantic-analyzer
class A:
    def __init__(self, x: int) -> None:
        self.x = x

    def f(self) -> str:
        return self.x # E: Incompatible return value type (got "int", expected "str")

    def g(self) -> int:
        return self.f() # E: Incompatible return value type (got "str", expected "int")

[case testNewAnalyzerFunctionForwardRef]
# flags: --new-semantic-analyzer
def f() -> None:
    x = g(1) # E: Argument 1 to "g" has incompatible type "int"; expected "str"
    reveal_type(x) # E: Revealed type is 'builtins.str'

def g(x: str) -> str:
    return x

[case testNewAnalyzerExportedImportThreePasses]
# flags: --new-semantic-analyzer
import b

[file a.py]
from b import b1 as a2
from b import b2 as a3

def a1() -> int: pass

reveal_type(a3()) # E: Revealed type is 'builtins.int'

[file b.py]
from a import a1 as b2
from a import a2 as b3

def b1() -> str: pass

reveal_type(b3()) # E: Revealed type is 'builtins.str'

[case testNewAnalyzerBool]
# flags: --new-semantic-analyzer
reveal_type(True) # E: Revealed type is 'builtins.bool'
reveal_type(False) # E: Revealed type is 'builtins.bool'

[case testNewAnalyzerNewTypeMultiplePasses]
# flags: --new-semantic-analyzer
import b

[file a.py]
from typing import NewType
import b
class A: pass
N2 = NewType('N2', b.N1)
def f1(x: A) -> None: pass
def f2(x: b.N1) -> None: pass
def f3(x: N2) -> None: pass
a = A()
n1 = b.N1(a)
n2 = N2(n1)
f1(a)
f1(n1)
f1(n2)
f2(a) # E: Argument 1 to "f2" has incompatible type "A"; expected "N1"
f2(n1)
f2(n2)
f3(a) # E: Argument 1 to "f3" has incompatible type "A"; expected "N2"
f3(n1) # E: Argument 1 to "f3" has incompatible type "N1"; expected "N2"
f3(n2)

# Test N2 etc.

[file b.py]
from typing import NewType
import a
N1 = NewType('N1', a.A)

[case testNewAnalyzerInheritanceForwardRef]
# flags: --new-semantic-analyzer
class C(B):
    pass
class B(A):
    pass
class A:
    def __init__(self, x: str) -> None: pass
    def f(self, x: int) -> None: pass

C(1) # E: Argument 1 to "C" has incompatible type "int"; expected "str"
B(1) # E: Argument 1 to "B" has incompatible type "int"; expected "str"
C('').f('') # E: Argument 1 to "f" of "A" has incompatible type "str"; expected "int"
B('').f('') # E: Argument 1 to "f" of "A" has incompatible type "str"; expected "int"

[case testNewAnalyzerInheritanceMROInCycle]
# flags: --new-semantic-analyzer
import a

[file a.py]
from b import A
import b

class B(A):
    b: int

class D(b.C):
    d: int

d = D()
reveal_type(d.a) # E: Revealed type is 'builtins.int'
reveal_type(d.b) # E: Revealed type is 'builtins.int'
reveal_type(d.c) # E: Revealed type is 'builtins.int'
reveal_type(d.d) # E: Revealed type is 'builtins.int'

[file b.py]
from a import B

class A:
    a: int

class C(B):
    c: int
