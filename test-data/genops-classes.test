[case testGetAttribute]
class A:
    x: int

def f(a: A) -> int:
    return a.x
[out]
def f(a):
    a :: A
    r0 :: int
L0:
    r0 = a.x
    return r0

[case testSetAttribute]
class A:
    x: int

def f(a: A) -> None:
    a.x = 1
[out]
def f(a):
    a :: A
    r0 :: int
    r1 :: bool
    r2 :: None
L0:
    r0 = 1
    a.x = r0; r1 = is_error
    r2 = None
    return r2

[case testUserClassInList]
class C:
    x: int

def f() -> int:
    c = C()
    c.x = 5
    a = [c]
    d = a[0]
    return d.x + 1
[out]
def f():
    c, r0 :: C
    r1 :: int
    r2 :: bool
    a, r3 :: list
    d :: C
    r4 :: int
    r5 :: object
    r6 :: C
    r7, r8, r9 :: int
L0:
    r0 = C()
    c = r0
    r1 = 5
    c.x = r1; r2 = is_error
    r3 = [c]
    a = r3
    r4 = 0
    r5 = a[r4] :: list
    r6 = cast(C, r5)
    d = r6
    r7 = d.x
    r8 = 1
    r9 = r7 + r8 :: int
    return r9

[case testMethodCall]
class A:
    def f(self, x: int, y: str) -> int:
        return x + 10

def g(a: A) -> None:
    a.f(1, 'hi')
[out]
def A.f(self, x, y):
    self :: A
    x :: int
    y :: str
    r0, r1 :: int
L0:
    r0 = 10
    r1 = x + r0 :: int
    return r1
def g(a):
    a :: A
    r0 :: int
    r1 :: str
    r2 :: int
    r3 :: None
L0:
    r0 = 1
    r1 = unicode_0 :: static  ('hi')
    r2 = a.f(r0, r1)
    r3 = None
    return r3

[case testForwardUse]
def g(a: A) -> int:
    return a.n

class A:
    n : int

[out]
def g(a):
    a :: A
    r0 :: int
L0:
    r0 = a.n
    return r0

[case testOptionalMember]
from typing import Optional
class Node:
    next: Optional[Node]
    def length(self) -> int:
        if self.next is not None:
            return 1 + self.next.length()
        return 1
[out]
def Node.length(self):
    self :: Node
    r0 :: optional[Node]
    r1 :: int
    r2 :: optional[Node]
    r3 :: Node
    r4, r5, r6 :: int
L0:
    r0 = self.next
    if not r0 is None goto L1 else goto L2 :: object
L1:
    r1 = 1
    r2 = self.next
    r3 = cast(Node, r2)
    r4 = r3.length()
    r5 = r1 + r4 :: int
    return r5
L2:
    r6 = 1
    return r6

[case testSubclass]
class A:
    def __init__(self) -> None:
        self.x = 10
class B(A):
    def __init__(self) -> None:
        self.x = 20
        self.y = 30
[out]
def A.__init__(self):
    self :: A
    r0 :: int
    r1 :: bool
    r2 :: None
L0:
    r0 = 10
    self.x = r0; r1 = is_error
    r2 = None
    return r2
def B.__init__(self):
    self :: B
    r0 :: int
    r1 :: bool
    r2 :: int
    r3 :: bool
    r4 :: None
L0:
    r0 = 20
    self.x = r0; r1 = is_error
    r2 = 30
    self.y = r2; r3 = is_error
    r4 = None
    return r4

[case testAttrLvalue]
class O(object):
    def __init__(self) -> None:
        self.x = 1

def increment(o: O) -> O:
    o.x += 1
    return o
[out]
def O.__init__(self):
    self :: O
    r0 :: int
    r1 :: bool
    r2 :: None
L0:
    r0 = 1
    self.x = r0; r1 = is_error
    r2 = None
    return r2
def increment(o):
    o :: O
    r0, r1, r2 :: int
    r3 :: bool
L0:
    r0 = 1
    r1 = o.x
    r2 = r1 + r0 :: int
    o.x = r2; r3 = is_error
    return o

[case testSubclassSpecialize2]
class A:
    def foo(self, x: int) -> object:
        return str(x)
class B(A):
    def foo(self, x: object) -> object:
        return x
class C(B):
    def foo(self, x: object) -> int:
        return id(x)

def use_a(x: A, y: int) -> object:
    return x.foo(y)

def use_b(x: B, y: object) -> object:
    return x.foo(y)

def use_c(x: C, y: object) -> int:
    return x.foo(y)
[out]
def A.foo(self, x):
    self :: A
    x :: int
    r0 :: object
    r1 :: str
L0:
    r0 = box(int, x)
    r1 = str r0 :: object
    return r1
def B.foo(self, x):
    self :: B
    x :: object
L0:
    return x
def B.foo__A_glue(self, x):
    self :: B
    x :: int
    r0, r1 :: object
L0:
    r0 = box(int, x)
    r1 = self.foo(r0)
    return r1
def C.foo(self, x):
    self :: C
    x, r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: int
L0:
    r0 = builtins.module :: static
    r1 = unicode_0 :: static  ('id')
    r2 = getattr r0, r1
    r3 = r2(x) :: object
    r4 = unbox(int, r3)
    return r4
def C.foo__B_glue(self, x):
    self :: C
    x :: object
    r0 :: int
    r1 :: object
L0:
    r0 = self.foo(x)
    r1 = box(int, r0)
    return r1
def C.foo__A_glue(self, x):
    self :: C
    x :: int
    r0 :: object
    r1 :: int
    r2 :: object
L0:
    r0 = box(int, x)
    r1 = self.foo(r0)
    r2 = box(int, r1)
    return r2
def use_a(x, y):
    x :: A
    y :: int
    r0 :: object
L0:
    r0 = x.foo(y)
    return r0
def use_b(x, y):
    x :: B
    y, r0 :: object
L0:
    r0 = x.foo(y)
    return r0
def use_c(x, y):
    x :: C
    y :: object
    r0 :: int
L0:
    r0 = x.foo(y)
    return r0

[case testIsInstance]
class A: pass
class B(A): pass

def f(x: A) -> B:
    if isinstance(x, B):
        return x
    return B()
[out]
def f(x):
    x :: A
    r0 :: object
    r1 :: bool
    r2, r3 :: B
L0:
    r0 = __main__.B :: type
    r1 = isinstance x, r0
    if r1 goto L1 else goto L2 :: bool
L1:
    r2 = cast(B, x)
    return r2
L2:
    r3 = B()
    return r3
