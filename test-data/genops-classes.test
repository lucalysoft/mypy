[case testGetAttribute]
class A:
    x: int

def f(a: A) -> int:
    return a.x
[out]
def f(a):
    a :: A
    r0 :: int
L0:
    r0 = a.x
    return r0

[case testSetAttribute]
class A:
    x: int

def f(a: A) -> None:
    a.x = 1
[out]
def f(a):
    a :: A
    r0 :: int
    r1 :: bool
    r2 :: None
L0:
    r0 = 1
    a.x = r0; r1 = is_error
    r2 = None
    return r2

[case testUserClassInList]
class C:
    x: int

def f() -> int:
    c = C()
    c.x = 5
    a = [c]
    d = a[0]
    return d.x + 1
[out]
def f():
    c :: C
    r0 :: int
    r1 :: bool
    a :: list
    d :: C
    r2 :: int
    r3 :: object
    r4, r5, r6 :: int
L0:
    c = C()
    r0 = 5
    c.x = r0; r1 = is_error
    a = [c]
    r2 = 0
    r3 = a[r2] :: list
    d = cast(C, r3)
    r4 = d.x
    r5 = 1
    r6 = r4 + r5 :: int
    return r6

[case testMethodCall]
class A:
    def f(self, x: int, y: str) -> int:
        return x + 10

def g(a: A) -> None:
    a.f(1, 'hi')
[out]
def f(self, x, y):
    self :: A
    x :: int
    y :: str
    r0, r1 :: int
L0:
    r0 = 10
    r1 = x + r0 :: int
    return r1
def g(a):
    a :: A
    r0 :: int
    r1 :: str
    r2 :: int
    r3 :: None
L0:
    r0 = 1
    r1 = __unicode_0 :: static
    r2 = a.f(r0, r1)
    r3 = None
    return r3
