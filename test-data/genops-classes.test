[case testGetAttribute]
class A:
    x: int

def f(a: A) -> int:
    return a.x
[out]
def f(a):
    a :: A
    r0 :: int
L0:
    r0 = a.x
    return r0

[case testSetAttribute]
class A:
    x: int

def f(a: A) -> None:
    a.x = 1
[out]
def f(a):
    a :: A
    r0 :: int
    r1 :: bool
    r2 :: None
L0:
    r0 = 1
    a.x = r0; r1 = is_error
    r2 = None
    return r2

[case testUserClassInList]
class C:
    x: int

def f() -> int:
    c = C()
    c.x = 5
    a = [c]
    d = a[0]
    return d.x + 1
[out]
def f():
    c, r0 :: C
    r1 :: int
    r2 :: bool
    a, r3 :: list
    d :: C
    r4 :: int
    r5 :: object
    r6 :: C
    r7, r8, r9 :: int
L0:
    r0 = C()
    c = r0
    r1 = 5
    c.x = r1; r2 = is_error
    r3 = [c]
    a = r3
    r4 = 0
    r5 = a[r4] :: list
    r6 = cast(C, r5)
    d = r6
    r7 = d.x
    r8 = 1
    r9 = r7 + r8 :: int
    return r9

[case testMethodCall]
class A:
    def f(self, x: int, y: str) -> int:
        return x + 10

def g(a: A) -> None:
    a.f(1, 'hi')
[out]
def f(self, x, y):
    self :: A
    x :: int
    y :: str
    r0, r1 :: int
L0:
    r0 = 10
    r1 = x + r0 :: int
    return r1
def g(a):
    a :: A
    r0 :: int
    r1 :: str
    r2 :: int
    r3 :: None
L0:
    r0 = 1
    r1 = __unicode_0 :: static
    r2 = a.f(r0, r1)
    r3 = None
    return r3

[case testForwardUse]
def g(a: A) -> int:
    return a.n

class A:
    n : int

[out]
def g(a):
    a :: A
    r0 :: int
L0:
    r0 = a.n
    return r0
