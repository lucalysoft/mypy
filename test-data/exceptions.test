-- Test cases for exception handling insertion transform.
--
-- The result includes refcount handling since these two transforms interact.

[case testListGetAndUnboxError]
from typing import List
def f(x: List[int]) -> int:
    return x[0]
[out]
L0:
    r0 = 0
    r1 = x[r0] :: list
    dec_ref r0 :: int
    if is_error(r1) goto L3 (error at f:3) else goto L1
L1:
    r2 = unbox(int, r1)
    dec_ref r1
    if is_error(r2) goto L3 (error at f:3) else goto L2
L2:
    return r2
L3:
    r3 = <error> :: int
    return r3

[case testListAppendAndSetItemError]
from typing import List
def f(x: List[int], y: int, z: int) -> None:
    x.append(y)
    x[y] = z
[out]
L0:
    inc_ref y :: int
    r0 = box(int, y)
    r1 = x.append(r0) :: list
    dec_ref r0
    if not r1 goto L3 (error at f:3) else goto L1 :: bool
L1:
    r2 = None
    dec_ref r2
    inc_ref z :: int
    r3 = box(int, z)
    r4 = x.__setitem__(y, r3) :: list
    dec_ref r3
    if not r4 goto L3 (error at f:4) else goto L2 :: bool
L2:
    r5 = None
    return r5
L3:
    r6 = <error> :: None
    return r6

[case testOptionalHandling]
from typing import Optional

class A: pass

def f(x: Optional[A]) -> int:
    if x is None:
        return 1
    if x is not None:
        return 2
    return 3
[out]
L0:
    r0 = x is None
    if r0 goto L1 else goto L2 :: bool
L1:
    r1 = 1
    return r1
L2:
    inc_ref x
    r2 = cast(A, x)
    if is_error(r2) goto L6 (error at f:8) else goto L3
L3:
    r3 = r2 is None
    dec_ref r2
    r4 = !r3
    if r4 goto L4 else goto L5 :: bool
L4:
    r5 = 2
    return r5
L5:
    r6 = 3
    return r6
L6:
    r7 = <error> :: int
    return r7

[case testListSum]
from typing import List
def sum(a: List[int], l: int) -> int:
    sum = 0
    i = 0
    while i < l:
        sum = sum + a[i]
        i = i + 1
    return sum
[out]
L0:
    r0 = 0
    sum = r0
    r1 = 0
    i = r1
L1:
    r2 = i < l :: int
    if r2 goto L2 else goto L7 :: bool
L2:
    r3 = a[i] :: list
    if is_error(r3) goto L8 (error at sum:6) else goto L3
L3:
    r4 = unbox(int, r3)
    dec_ref r3
    if is_error(r4) goto L9 (error at sum:6) else goto L4
L4:
    r5 = sum + r4 :: int
    dec_ref sum :: int
    dec_ref r4 :: int
    sum = r5
    r6 = 1
    r7 = i + r6 :: int
    dec_ref i :: int
    dec_ref r6 :: int
    i = r7
    goto L1
L5:
    return sum
L6:
    r8 = <error> :: int
    return r8
L7:
    dec_ref i :: int
    goto L5
L8:
    dec_ref sum :: int
    dec_ref i :: int
    goto L6
L9:
    dec_ref sum :: int
    dec_ref i :: int
    goto L6

[case testTryExcept]
def g() -> None:
    try:
        object()
    except:
        print("weeee")
[out]
L0:
L1:
    r0 = builtins.module :: static
    r1 = unicode_0 :: static  ('object')
    r2 = getattr r0, r1
    if is_error(r2) goto L4 (error at g:3) else goto L2
L2:
    r3 = py_call(r2)
    dec_ref r2
    if is_error(r3) goto L4 (error at g:3) else goto L10
L3:
    goto L8
L4:
    clear_exception(); r4 = 0
    r5 = unicode_1 :: static  ('weeee')
    r6 = builtins.module :: static
    r7 = unicode_2 :: static  ('print')
    r8 = getattr r6, r7
    if is_error(r8) goto L9 (error at g:5) else goto L5
L5:
    r9 = py_call(r8, r5)
    dec_ref r8
    if is_error(r9) goto L9 (error at g:5) else goto L6
L6:
    r10 = cast(None, r9)
    if is_error(r10) goto L9 (error at g:5) else goto L11
L7:
L8:
    r11 = None
    return r11
L9:
    r12 = <error> :: None
    return r12
L10:
    dec_ref r3
    goto L3
L11:
    dec_ref r10
    goto L7
