-- Test cases for exception handling insertion transform.
--
-- The result includes refcount handling since these two transforms interact.

[case testListGetAndUnboxError]
from typing import List
def f(x: List[int]) -> int:
    return x[0]
[out]
def f(x):
    x :: list
    r0 :: int
    r1 :: object
    r2, r3 :: int
L0:
    r0 = 0
    r1 = x[r0] :: list
    dec_ref r0 :: int
    if is_error(r1) goto L3 (error at f:3) else goto L1
L1:
    r2 = unbox(int, r1)
    dec_ref r1
    if is_error(r2) goto L3 (error at f:3) else goto L2
L2:
    return r2
L3:
    r3 = <error> :: int
    return r3

[case testListAppendAndSetItemError]
from typing import List
def f(x: List[int], y: int, z: int) -> None:
    x.append(y)
    x[y] = z
[out]
def f(x, y, z):
    x :: list
    y, z :: int
    r0 :: object
    r1 :: bool
    r2 :: None
    r3 :: object
    r4 :: bool
    r5, r6 :: None
L0:
    inc_ref y :: int
    r0 = box(int, y)
    r1 = x.append(r0) :: list
    dec_ref r0
    if not r1 goto L3 (error at f:3) else goto L1 :: bool
L1:
    r2 = None
    inc_ref z :: int
    r3 = box(int, z)
    r4 = x.__setitem__(y, r3) :: list
    dec_ref r3
    if not r4 goto L3 (error at f:4) else goto L2 :: bool
L2:
    r5 = None
    inc_ref r5
    return r5
L3:
    r6 = <error> :: None
    return r6

[case testOptionalHandling]
from typing import Optional

class A: pass

def f(x: Optional[A]) -> int:
    if x is None:
        return 1
    if x is not None:
        return 2
    return 3
[out]
def f(x):
    x :: union[A, None]
    r0 :: None
    r1 :: bool
    r2 :: int
    r3 :: A
    r4 :: None
    r5, r6 :: bool
    r7, r8, r9 :: int
L0:
    r0 = None
    r1 = x is r0
    if r1 goto L1 else goto L2 :: bool
L1:
    r2 = 1
    return r2
L2:
    inc_ref x
    r3 = cast(A, x)
    if is_error(r3) goto L6 (error at f:8) else goto L3
L3:
    r4 = None
    r5 = r3 is r4
    dec_ref r3
    r6 = !r5
    if r6 goto L4 else goto L5 :: bool
L4:
    r7 = 2
    return r7
L5:
    r8 = 3
    return r8
L6:
    r9 = <error> :: int
    return r9

[case testListSum]
from typing import List
def sum(a: List[int], l: int) -> int:
    sum = 0
    i = 0
    while i < l:
        sum = sum + a[i]
        i = i + 1
    return sum
[out]
def sum(a, l):
    a :: list
    l, r0, sum, r1, i :: int
    r2 :: bool
    r3 :: object
    r4, r5, r6, r7, r8 :: int
L0:
    r0 = 0
    sum = r0
    r1 = 0
    i = r1
L1:
    r2 = i < l :: int
    if r2 goto L2 else goto L7 :: bool
L2:
    r3 = a[i] :: list
    if is_error(r3) goto L8 (error at sum:6) else goto L3
L3:
    r4 = unbox(int, r3)
    dec_ref r3
    if is_error(r4) goto L8 (error at sum:6) else goto L4
L4:
    r5 = sum + r4 :: int
    dec_ref sum :: int
    dec_ref r4 :: int
    sum = r5
    r6 = 1
    r7 = i + r6 :: int
    dec_ref i :: int
    dec_ref r6 :: int
    i = r7
    goto L1
L5:
    return sum
L6:
    r8 = <error> :: int
    return r8
L7:
    dec_ref i :: int
    goto L5
L8:
    dec_ref sum :: int
    dec_ref i :: int
    goto L6

[case testTryExcept]
def g() -> None:
    try:
        object()
    except:
        print("weeee")
[out]
def g():
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: tuple[object, object, object]
    r5 :: str
    r6 :: object
    r7 :: str
    r8, r9 :: object
    r10 :: None
    r11 :: bool
    r12, r13 :: None
L0:
L1:
    r0 = builtins.module :: static
    r1 = unicode_0 :: static  ('object')
    r2 = getattr r0, r1
    if is_error(r2) goto L4 (error at g:3) else goto L2
L2:
    r3 = py_call(r2)
    dec_ref r2
    if is_error(r3) goto L4 (error at g:3) else goto L13
L3:
    goto L11
L4:
    r4 = error_catch
    r5 = unicode_1 :: static  ('weeee')
    r6 = builtins.module :: static
    r7 = unicode_2 :: static  ('print')
    r8 = getattr r6, r7
    if is_error(r8) goto L9 (error at g:5) else goto L5
L5:
    r9 = py_call(r8, r5)
    dec_ref r8
    if is_error(r9) goto L9 (error at g:5) else goto L6
L6:
    r10 = cast(None, r9)
    if is_error(r10) goto L9 (error at g:5) else goto L14
L7:
L8:
    restore_exc_info r4
    dec_ref r4
    goto L11
L9:
    restore_exc_info r4
    dec_ref r4
    r11 = keep_propagating
    if not r11 goto L12 else goto L10 :: bool
L10:
    unreachable
L11:
    r12 = None
    inc_ref r12
    return r12
L12:
    r13 = <error> :: None
    return r13
L13:
    dec_ref r3
    goto L3
L14:
    dec_ref r10
    goto L7

[case testGenopsTryFinally]
def a() -> str:
    try:
        print()
        return 'hi'
    finally:
        print('goodbye!')
[out]
def a():
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: None
    r5, r6 :: str
    r7 :: tuple[object, object, object]
    r8 :: str
    r9 :: tuple[object, object, object]
    r10 :: str
    r11 :: tuple[object, object, object]
    r12 :: str
    r13 :: object
    r14 :: str
    r15, r16 :: object
    r17 :: None
    r18, r19 :: bool
    r20 :: str
L0:
L1:
    r0 = builtins.module :: static
    r1 = unicode_0 :: static  ('print')
    r2 = getattr r0, r1
    if is_error(r2) goto L7 (error at a:3) else goto L2
L2:
    r3 = py_call(r2)
    dec_ref r2
    if is_error(r3) goto L7 (error at a:3) else goto L3
L3:
    r4 = cast(None, r3)
    if is_error(r4) goto L7 (error at a:3) else goto L24
L4:
    r5 = unicode_1 :: static  ('hi')
    inc_ref r5
    r6 = r5
    goto L6
L5:
    r8 = <error> :: str
    r6 = r8
L6:
    r9 = <error> :: tuple[object, object, object]
    r7 = r9
    goto L8
L7:
    r10 = <error> :: str
    r6 = r10
    r11 = error_catch
    r7 = r11
L8:
    r12 = unicode_2 :: static  ('goodbye!')
    r13 = builtins.module :: static
    r14 = unicode_0 :: static  ('print')
    r15 = getattr r13, r14
    if is_error(r15) goto L17 (error at a:6) else goto L9
L9:
    r16 = py_call(r15, r12)
    dec_ref r15
    if is_error(r16) goto L17 (error at a:6) else goto L10
L10:
    r17 = cast(None, r16)
    if is_error(r17) goto L17 (error at a:6) else goto L25
L11:
    if is_error(r7) goto L14 else goto L12
L12:
    reraise_exc; r18 = 0
    if not r18 goto L17 else goto L26 :: bool
L13:
    unreachable
L14:
    if is_error(r6) goto L16 else goto L15
L15:
    return r6
L16:
    goto L22
L17:
    if is_error(r6) goto L18 else goto L27
L18:
    if is_error(r7) goto L20 else goto L19
L19:
    restore_exc_info r7
    dec_ref r7
L20:
    r19 = keep_propagating
    if not r19 goto L23 else goto L21 :: bool
L21:
    unreachable
L22:
    unreachable
L23:
    r20 = <error> :: str
    return r20
L24:
    dec_ref r4
    goto L4
L25:
    dec_ref r17
    goto L11
L26:
    dec_ref r6
    dec_ref r7
    goto L13
L27:
    dec_ref r6
    goto L18

[case testDocstring1]
def lol() -> None:
    """Hello"""
    pass
[out]
def lol():
    r0 :: str
    r1 :: None
L0:
    r0 = unicode_0 :: static  ('Hello')
    r1 = None
    inc_ref r1
    return r1

[case testExceptUndefined]
def lol(x: object) -> int:
    try:
        st = id(x)
    except Exception:
        return -1
    return st + 1
[out]
def lol(x):
    x, r0 :: object
    r1 :: str
    r2, r3 :: object
    r4, st :: int
    r5 :: tuple[object, object, object]
    r6 :: object
    r7 :: str
    r8 :: object
    r9 :: bool
    r10, r11 :: int
    r12, r13 :: bool
    r14, r15, r16 :: int
L0:
L1:
    r0 = builtins.module :: static
    r1 = unicode_0 :: static  ('id')
    r2 = getattr r0, r1
    if is_error(r2) goto L5 (error at lol:3) else goto L2
L2:
    r3 = py_call(r2, x)
    dec_ref r2
    if is_error(r3) goto L5 (error at lol:3) else goto L3
L3:
    r4 = unbox(int, r3)
    dec_ref r3
    if is_error(r4) goto L5 (error at lol:3) else goto L4
L4:
    st = r4
    goto L13
L5:
    r5 = error_catch
    r6 = builtins.module :: static
    r7 = unicode_1 :: static  ('Exception')
    r8 = getattr r6, r7
    if is_error(r8) goto L11 (error at lol:4) else goto L6
L6:
    r9 = exc_matches r8
    dec_ref r8
    if r9 goto L7 else goto L8 :: bool
L7:
    r10 = 1
    r11 = -r10 :: int
    dec_ref r10 :: int
    restore_exc_info r5
    dec_ref r5
    return r11
L8:
    reraise_exc; r12 = 0
    if not r12 goto L11 else goto L15 :: bool
L9:
    unreachable
L10:
    restore_exc_info r5
    dec_ref r5
    goto L13
L11:
    restore_exc_info r5
    dec_ref r5
    r13 = keep_propagating
    if not r13 goto L14 else goto L12 :: bool
L12:
    unreachable
L13:
    r14 = 1
    r15 = st + r14 :: int
    dec_ref st :: int
    dec_ref r14 :: int
    return r15
L14:
    r16 = <error> :: int
    return r16
L15:
    dec_ref r5
    goto L9
