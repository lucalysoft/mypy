#!/usr/bin/env python3
"""Mypyc command-line tool.

Usage:

    $ mypyc foo.py [...]
    $ python3 -c 'import foo'  # Uses compiled 'foo'


This is just a thin wrapper that generates a setup.py file that uses
mypycify, suitable for prototyping and testing.
"""

import os
import os.path
import sys
import tempfile
import time

base_path = os.path.join(os.path.dirname(__file__), '..')
sys.path.append(base_path)

from distutils.core import run_setup

setup_format = """\
from distutils.core import setup
from mypyc.build import mypycify, MypycifyBuildExt

setup(name='mypyc_output',
      ext_modules=mypycify([], {}, {}),
      cmdclass={{'build_ext': MypycifyBuildExt}},
)
"""

def main() -> None:
    build_dir = 'build'  # can this be overridden??
    try:
        os.mkdir(build_dir)
    except FileExistsError:
        pass

    opt_level = os.getenv("MYPYC_OPT_LEVEL", '')

    setup_file = os.path.join(build_dir, 'setup.py')
    with open(setup_file, 'w') as f:
        f.write(setup_format.format(sys.argv[1:], opt_level))

    run_setup(setup_file, ['build_ext', '--inplace'])

if __name__ == '__main__':
    main()
