# Stubs for xml.etree.ElementTree (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Undefined, Any
import io
from _elementtree import SubElement, Element, ParseError, TreeBuilder, XMLParser

SubElement = SubElement
Element = Element
ParseError = ParseError
TreeBuilder = TreeBuilder
XMLParser = XMLParser

VERSION = Undefined(Any)

def iselement(element): pass

def Comment(text=None): pass
def ProcessingInstruction(target, text=None): pass

PI = Undefined(Any)

class QName:
    text = Undefined(Any)
    def __init__(self, text_or_uri, tag=None): pass
    def __hash__(self): pass
    def __le__(self, other): pass
    def __lt__(self, other): pass
    def __ge__(self, other): pass
    def __gt__(self, other): pass
    def __eq__(self, other): pass
    def __ne__(self, other): pass

class ElementTree:
    def __init__(self, element=None, file=None): pass
    def getroot(self): pass
    def parse(self, source, parser=None): pass
    def iter(self, tag=None): pass
    def getiterator(self, tag=None): pass
    def find(self, path, namespaces=None): pass
    def findtext(self, path, default=None, namespaces=None): pass
    def findall(self, path, namespaces=None): pass
    def iterfind(self, path, namespaces=None): pass
    def write(self, file_or_filename, encoding=None, xml_declaration=None, default_namespace=None, method=None, *, short_empty_elements=True): pass
    def write_c14n(self, file): pass

def register_namespace(prefix, uri): pass
def tostring(element, encoding=None, method=None, *, short_empty_elements=True): pass

class _ListDataStream(io.BufferedIOBase):
    lst = Undefined(Any)
    def __init__(self, lst): pass
    def writable(self): pass
    def seekable(self): pass
    def write(self, b): pass
    def tell(self): pass

def tostringlist(element, encoding=None, method=None, *, short_empty_elements=True): pass
def dump(elem): pass
def parse(source, parser=None): pass
def iterparse(source, events=None, parser=None): pass

class XMLPullParser:
    def __init__(self, events=None, *, _parser=None): pass
    def feed(self, data): pass
    def close(self): pass
    def read_events(self): pass

class _IterParseIterator:
    root = Undefined(Any)
    def __init__(self, source, events, parser, close_source=False): pass
    def __next__(self): pass
    def __iter__(self): pass

def XML(text, parser=None): pass
def XMLID(text, parser=None): pass

fromstring = Undefined(Any)

def fromstringlist(sequence, parser=None): pass

class TreeBuilder:
    def __init__(self, element_factory=None): pass
    def close(self): pass
    def data(self, data): pass
    def start(self, tag, attrs): pass
    def end(self, tag): pass
