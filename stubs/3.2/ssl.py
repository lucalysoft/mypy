# Stubs for ssl (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Undefined, Any
from enum import Enum as _Enum
from _ssl import _SSLContext
from socket import socket
from collections import namedtuple

socket_error = Undefined(Any)
CHANNEL_BINDING_TYPES = Undefined(Any)

class CertificateError(ValueError): pass

def match_hostname(cert, hostname): pass

DefaultVerifyPaths = namedtuple('DefaultVerifyPaths', 'cafile capath openssl_cafile_env openssl_cafile openssl_capath_env openssl_capath')

def get_default_verify_paths(): pass

class _ASN1Object:
    def __new__(cls, oid): pass
    @classmethod
    def fromnid(cls, nid): pass
    @classmethod
    def fromname(cls, name): pass

class Purpose(_ASN1Object, _Enum):
    SERVER_AUTH = Undefined(Any)
    CLIENT_AUTH = Undefined(Any)

class SSLContext(_SSLContext):
    def __new__(cls, protocol, *args, **kwargs): pass
    protocol = Undefined(Any)
    def __init__(self, protocol): pass
    def wrap_socket(self, sock, server_side=False, do_handshake_on_connect=True, suppress_ragged_eofs=True, server_hostname=None): pass
    def set_npn_protocols(self, npn_protocols): pass
    def load_default_certs(self, purpose=Undefined): pass

def create_default_context(purpose=Undefined, *, cafile=None, capath=None, cadata=None): pass

class SSLSocket(socket):
    keyfile = Undefined(Any)
    certfile = Undefined(Any)
    cert_reqs = Undefined(Any)
    ssl_version = Undefined(Any)
    ca_certs = Undefined(Any)
    ciphers = Undefined(Any)
    server_side = Undefined(Any)
    server_hostname = Undefined(Any)
    do_handshake_on_connect = Undefined(Any)
    suppress_ragged_eofs = Undefined(Any)
    context = Undefined(Any)  # TODO: This should be a property.
    def __init__(self, sock=None, keyfile=None, certfile=None, server_side=False, cert_reqs=Undefined, ssl_version=Undefined, ca_certs=None, do_handshake_on_connect=True, family=Undefined, type=Undefined, proto=0, fileno=None, suppress_ragged_eofs=True, npn_protocols=None, ciphers=None, server_hostname=None, _context=None): pass
    def dup(self): pass
    def read(self, len=0, buffer=None): pass
    def write(self, data): pass
    def getpeercert(self, binary_form=False): pass
    def selected_npn_protocol(self): pass
    def cipher(self): pass
    def compression(self): pass
    def send(self, data, flags=0): pass
    def sendto(self, data, flags_or_addr, addr=None): pass
    def sendmsg(self, *args, **kwargs): pass
    def sendall(self, data, flags=0): pass
    def recv(self, buflen=1024, flags=0): pass
    def recv_into(self, buffer, nbytes=None, flags=0): pass
    def recvfrom(self, buflen=1024, flags=0): pass
    def recvfrom_into(self, buffer, nbytes=None, flags=0): pass
    def recvmsg(self, *args, **kwargs): pass
    def recvmsg_into(self, *args, **kwargs): pass
    def pending(self): pass
    def shutdown(self, how): pass
    def unwrap(self): pass
    def do_handshake(self, block=False): pass
    def connect(self, addr): pass
    def connect_ex(self, addr): pass
    def accept(self): pass
    def get_channel_binding(self, cb_type=''): pass

def wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=Undefined, ssl_version=Undefined, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None): pass
def cert_time_to_seconds(cert_time): pass

PEM_HEADER = Undefined(Any)
PEM_FOOTER = Undefined(Any)

def DER_cert_to_PEM_cert(der_cert_bytes): pass
def PEM_cert_to_DER_cert(pem_cert_string): pass
def get_server_certificate(addr, ssl_version=Undefined, ca_certs=None): pass
def get_protocol_name(protocol_code): pass
