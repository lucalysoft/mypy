# Stubs for logging (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

CRITICAL = ...  # type: Any
FATAL = ...  # type: Any
ERROR = ...  # type: Any
WARNING = ...  # type: Any
WARN = ...  # type: Any
INFO = ...  # type: Any
DEBUG = ...  # type: Any
NOTSET = ...  # type: Any

def getLevelName(level): pass
def addLevelName(level, levelName): pass

class LogRecord:
    name = ...  # type: Any
    msg = ...  # type: Any
    args = ...  # type: Any
    levelname = ...  # type: Any
    levelno = ...  # type: Any
    pathname = ...  # type: Any
    filename = ...  # type: Any
    module = ...  # type: Any
    exc_info = ...  # type: Any
    exc_text = ...  # type: Any
    stack_info = ...  # type: Any
    lineno = ...  # type: Any
    funcName = ...  # type: Any
    created = ...  # type: Any
    msecs = ...  # type: Any
    relativeCreated = ...  # type: Any
    thread = ...  # type: Any
    threadName = ...  # type: Any
    processName = ...  # type: Any
    process = ...  # type: Any
    def __init__(self, name, level, pathname, lineno, msg, args, exc_info, func=None, sinfo=None,
                 **kwargs): pass
    def getMessage(self): pass

def setLogRecordFactory(factory): pass
def getLogRecordFactory(): pass
def makeLogRecord(dict): pass

class PercentStyle:
    default_format = ...  # type: Any
    asctime_format = ...  # type: Any
    asctime_search = ...  # type: Any
    def __init__(self, fmt): pass
    def usesTime(self): pass
    def format(self, record): pass

class StrFormatStyle(PercentStyle):
    default_format = ...  # type: Any
    asctime_format = ...  # type: Any
    asctime_search = ...  # type: Any
    def format(self, record): pass

class StringTemplateStyle(PercentStyle):
    default_format = ...  # type: Any
    asctime_format = ...  # type: Any
    asctime_search = ...  # type: Any
    def __init__(self, fmt): pass
    def usesTime(self): pass
    def format(self, record): pass

BASIC_FORMAT = ...  # type: Any

class Formatter:
    converter = ...  # type: Any
    datefmt = ...  # type: Any
    def __init__(self, fmt=None, datefmt=None, style=''): pass
    default_time_format = ...  # type: Any
    default_msec_format = ...  # type: Any
    def formatTime(self, record, datefmt=None): pass
    def formatException(self, ei): pass
    def usesTime(self): pass
    def formatMessage(self, record): pass
    def formatStack(self, stack_info): pass
    def format(self, record): pass

class BufferingFormatter:
    linefmt = ...  # type: Any
    def __init__(self, linefmt=None): pass
    def formatHeader(self, records): pass
    def formatFooter(self, records): pass
    def format(self, records): pass

class Filter:
    name = ...  # type: Any
    nlen = ...  # type: Any
    def __init__(self, name=''): pass
    def filter(self, record): pass

class Filterer:
    filters = ...  # type: Any
    def __init__(self): pass
    def addFilter(self, filter): pass
    def removeFilter(self, filter): pass
    def filter(self, record): pass

class Handler(Filterer):
    level = ...  # type: Any
    formatter = ...  # type: Any
    def __init__(self, level=...): pass
    def get_name(self): pass
    def set_name(self, name): pass
    name = ...  # type: Any
    lock = ...  # type: Any
    def createLock(self): pass
    def acquire(self): pass
    def release(self): pass
    def setLevel(self, level): pass
    def format(self, record): pass
    def emit(self, record): pass
    def handle(self, record): pass
    def setFormatter(self, fmt): pass
    def flush(self): pass
    def close(self): pass
    def handleError(self, record): pass

class StreamHandler(Handler):
    terminator = ...  # type: Any
    stream = ...  # type: Any
    def __init__(self, stream=None): pass
    def flush(self): pass
    def emit(self, record): pass

class FileHandler(StreamHandler):
    baseFilename = ...  # type: Any
    mode = ...  # type: Any
    encoding = ...  # type: Any
    delay = ...  # type: Any
    stream = ...  # type: Any
    def __init__(self, filename, mode='', encoding=None, delay=False): pass
    def close(self): pass
    def emit(self, record): pass

class _StderrHandler(StreamHandler):
    def __init__(self, level=...): pass

lastResort = ...  # type: Any

class PlaceHolder:
    loggerMap = ...  # type: Any
    def __init__(self, alogger): pass
    def append(self, alogger): pass

def setLoggerClass(klass): pass
def getLoggerClass(): pass

class Manager:
    root = ...  # type: Any
    disable = ...  # type: Any
    emittedNoHandlerWarning = ...  # type: Any
    loggerDict = ...  # type: Any
    loggerClass = ...  # type: Any
    logRecordFactory = ...  # type: Any
    def __init__(self, rootnode): pass
    def getLogger(self, name): pass
    def setLoggerClass(self, klass): pass
    def setLogRecordFactory(self, factory): pass

class Logger(Filterer):
    name = ...  # type: Any
    level = ...  # type: Any
    parent = ...  # type: Any
    propagate = ...  # type: Any
    handlers = ...  # type: Any
    disabled = ...  # type: Any
    def __init__(self, name, level=...): pass
    def setLevel(self, level): pass
    def debug(self, msg, *args, **kwargs): pass
    def info(self, msg, *args, **kwargs): pass
    def warning(self, msg, *args, **kwargs): pass
    def warn(self, msg, *args, **kwargs): pass
    def error(self, msg, *args, **kwargs): pass
    def exception(self, msg, *args, **kwargs): pass
    def critical(self, msg, *args, **kwargs): pass
    fatal = ...  # type: Any
    def log(self, level, msg, *args, **kwargs): pass
    def findCaller(self, stack_info=False): pass
    def makeRecord(self, name, level, fn, lno, msg, args, exc_info, func=None, extra=None,
                   sinfo=None): pass
    def handle(self, record): pass
    def addHandler(self, hdlr): pass
    def removeHandler(self, hdlr): pass
    def hasHandlers(self): pass
    def callHandlers(self, record): pass
    def getEffectiveLevel(self): pass
    def isEnabledFor(self, level): pass
    def getChild(self, suffix): pass

class RootLogger(Logger):
    def __init__(self, level): pass

class LoggerAdapter:
    logger = ...  # type: Any
    extra = ...  # type: Any
    def __init__(self, logger, extra): pass
    def process(self, msg, kwargs): pass
    def debug(self, msg, *args, **kwargs): pass
    def info(self, msg, *args, **kwargs): pass
    def warning(self, msg, *args, **kwargs): pass
    def warn(self, msg, *args, **kwargs): pass
    def error(self, msg, *args, **kwargs): pass
    def exception(self, msg, *args, **kwargs): pass
    def critical(self, msg, *args, **kwargs): pass
    def log(self, level, msg, *args, **kwargs): pass
    def isEnabledFor(self, level): pass
    def setLevel(self, level): pass
    def getEffectiveLevel(self): pass
    def hasHandlers(self): pass

def basicConfig(**kwargs): pass
def getLogger(name=None): pass
def critical(msg, *args, **kwargs): pass

fatal = ...  # type: Any

def error(msg, *args, **kwargs): pass
def exception(msg, *args, **kwargs): pass
def warning(msg, *args, **kwargs): pass
def warn(msg, *args, **kwargs): pass
def info(msg, *args, **kwargs): pass
def debug(msg, *args, **kwargs): pass
def log(level, msg, *args, **kwargs): pass
def disable(level): pass

class NullHandler(Handler):
    def handle(self, record): pass
    def emit(self, record): pass
    lock = ...  # type: Any
    def createLock(self): pass

def captureWarnings(capture): pass
