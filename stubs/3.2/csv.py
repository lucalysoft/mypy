# Stubs for csv (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Undefined, Any
from _csv import Error, __version__, writer, reader, register_dialect, unregister_dialect, get_dialect, list_dialects, field_size_limit, QUOTE_MINIMAL, QUOTE_ALL, QUOTE_NONNUMERIC, QUOTE_NONE, __doc__

Error = Error
__version__ = __version__
writer = writer
reader = reader
register_dialect = register_dialect
unregister_dialect = unregister_dialect
get_dialect = get_dialect
list_dialects = list_dialects
field_size_limit = field_size_limit
QUOTE_MINIMAL = QUOTE_MINIMAL
QUOTE_ALL = QUOTE_ALL
QUOTE_NONNUMERIC = QUOTE_NONNUMERIC
QUOTE_NONE = QUOTE_NONE
__doc__ = __doc__

class Dialect:
    delimiter = Undefined(Any)
    quotechar = Undefined(Any)
    escapechar = Undefined(Any)
    doublequote = Undefined(Any)
    skipinitialspace = Undefined(Any)
    lineterminator = Undefined(Any)
    quoting = Undefined(Any)
    def __init__(self): pass

class excel(Dialect):
    delimiter = Undefined(Any)
    quotechar = Undefined(Any)
    doublequote = Undefined(Any)
    skipinitialspace = Undefined(Any)
    lineterminator = Undefined(Any)
    quoting = Undefined(Any)

class excel_tab(excel):
    delimiter = Undefined(Any)

class unix_dialect(Dialect):
    delimiter = Undefined(Any)
    quotechar = Undefined(Any)
    doublequote = Undefined(Any)
    skipinitialspace = Undefined(Any)
    lineterminator = Undefined(Any)
    quoting = Undefined(Any)

class DictReader:
    restkey = Undefined(Any)
    restval = Undefined(Any)
    reader = Undefined(Any)
    dialect = Undefined(Any)
    line_num = Undefined(Any)
    def __init__(self, f, fieldnames=None, restkey=None, restval=None, dialect='', *args, **kwds): pass
    def __iter__(self): pass
    @property
    def fieldnames(self): pass
    @fieldnames.setter
    def fieldnames(self, value): pass
    def __next__(self): pass

class DictWriter:
    fieldnames = Undefined(Any)
    restval = Undefined(Any)
    extrasaction = Undefined(Any)
    writer = Undefined(Any)
    def __init__(self, f, fieldnames, restval='', extrasaction='', dialect='', *args, **kwds): pass
    def writeheader(self): pass
    def writerow(self, rowdict): pass
    def writerows(self, rowdicts): pass

class Sniffer:
    preferred = Undefined(Any)
    def __init__(self): pass
    def sniff(self, sample, delimiters=None): pass
    def has_header(self, sample): pass
