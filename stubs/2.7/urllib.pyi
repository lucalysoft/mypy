# Stubs for urllib (Python 2)
# NOTE: This dynamically typed stub was originally automatically generated by stubgen.

from typing import Any, Mapping, Union, Tuple, Sequence, IO

def url2pathname(pathname: str) -> str: ...
def pathname2url(pathname: str) -> str: ...
def urlopen(url: str, data=None, proxies: Mapping[str, str] = None, context=None) -> IO[Any]: ...
def urlretrieve(url, filename=None, reporthook=None, data=None, context=None): ...
def urlcleanup() -> None: ...

class ContentTooShortError(IOError):
    content = ... # type: Any
    def __init__(self, message, content): ...

class URLopener:
    version = ... # type: Any
    proxies = ... # type: Any
    key_file = ... # type: Any
    cert_file = ... # type: Any
    context = ... # type: Any
    addheaders = ... # type: Any
    tempcache = ... # type: Any
    ftpcache = ... # type: Any
    def __init__(self, proxies: Mapping[str, str] = None, context=None, **x509) -> None: ...
    def __del__(self): ...
    def close(self): ...
    def cleanup(self): ...
    def addheader(self, *args): ...
    type = ... # type: Any
    def open(self, fullurl: str, data=None): ...
    def open_unknown(self, fullurl, data=None): ...
    def open_unknown_proxy(self, proxy, fullurl, data=None): ...
    def retrieve(self, url, filename=None, reporthook=None, data=None): ...
    def open_http(self, url, data=None): ...
    def http_error(self, url, fp, errcode, errmsg, headers, data=None): ...
    def http_error_default(self, url, fp, errcode, errmsg, headers): ...
    def open_https(self, url, data=None): ...
    def open_file(self, url): ...
    def open_local_file(self, url): ...
    def open_ftp(self, url): ...
    def open_data(self, url, data=None): ...

class FancyURLopener(URLopener):
    auth_cache = ... # type: Any
    tries = ... # type: Any
    maxtries = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def http_error_default(self, url, fp, errcode, errmsg, headers): ...
    def http_error_302(self, url, fp, errcode, errmsg, headers, data=None): ...
    def redirect_internal(self, url, fp, errcode, errmsg, headers, data): ...
    def http_error_301(self, url, fp, errcode, errmsg, headers, data=None): ...
    def http_error_303(self, url, fp, errcode, errmsg, headers, data=None): ...
    def http_error_307(self, url, fp, errcode, errmsg, headers, data=None): ...
    def http_error_401(self, url, fp, errcode, errmsg, headers, data=None): ...
    def http_error_407(self, url, fp, errcode, errmsg, headers, data=None): ...
    def retry_proxy_http_basic_auth(self, url, realm, data=None): ...
    def retry_proxy_https_basic_auth(self, url, realm, data=None): ...
    def retry_http_basic_auth(self, url, realm, data=None): ...
    def retry_https_basic_auth(self, url, realm, data=None): ...
    def get_user_passwd(self, host, realm, clear_cache=0): ...
    def prompt_user_passwd(self, host, realm): ...

class ftpwrapper:
    user = ... # type: Any
    passwd = ... # type: Any
    host = ... # type: Any
    port = ... # type: Any
    dirs = ... # type: Any
    timeout = ... # type: Any
    refcount = ... # type: Any
    keepalive = ... # type: Any
    def __init__(self, user, passwd, host, port, dirs, timeout=..., persistent=True): ...
    busy = ... # type: Any
    ftp = ... # type: Any
    def init(self): ...
    def retrfile(self, file, type): ...
    def endtransfer(self): ...
    def close(self): ...
    def file_close(self): ...
    def real_close(self): ...

class addbase:
    fp = ... # type: Any
    read = ... # type: Any
    readline = ... # type: Any
    readlines = ... # type: Any
    fileno = ... # type: Any
    __iter__ = ... # type: Any
    next = ... # type: Any
    def __init__(self, fp): ...
    def close(self): ...

class addclosehook(addbase):
    closehook = ... # type: Any
    hookargs = ... # type: Any
    def __init__(self, fp, closehook, *hookargs): ...
    def close(self): ...

class addinfo(addbase):
    headers = ... # type: Any
    def __init__(self, fp, headers): ...
    def info(self): ...

class addinfourl(addbase):
    headers = ... # type: Any
    url = ... # type: Any
    code = ... # type: Any
    def __init__(self, fp, headers, url, code=None): ...
    def info(self): ...
    def getcode(self): ...
    def geturl(self): ...

def unwrap(url): ...
def splittype(url): ...
def splithost(url): ...
def splituser(host): ...
def splitpasswd(user): ...
def splitport(host): ...
def splitnport(host, defport=-1): ...
def splitquery(url): ...
def splittag(url): ...
def splitattr(url): ...
def splitvalue(attr): ...
def unquote(s: str) -> str: ...
def unquote_plus(s: str) -> str: ...
def quote(s: str, safe='') -> str: ...
def quote_plus(s: str, safe='') -> str: ...
def urlencode(query: Union[Sequence[Tuple[Any, Any]], Mapping[Any, Any]], doseq=0) -> str: ...

def getproxies() -> Mapping[str, str]: ... # type: Any

# Names in __all__ with no definition:
#   basejoin
