# Stubs for codecs (Python 2)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

BOM_UTF8 = ... # type: Any
BOM_LE = ... # type: Any
BOM_BE = ... # type: Any
BOM_UTF32_LE = ... # type: Any
BOM_UTF32_BE = ... # type: Any
BOM = ... # type: Any
BOM_UTF32 = ... # type: Any
BOM32_LE = ... # type: Any
BOM32_BE = ... # type: Any
BOM64_LE = ... # type: Any
BOM64_BE = ... # type: Any

class CodecInfo(tuple):
    name = ... # type: Any
    encode = ... # type: Any
    decode = ... # type: Any
    incrementalencoder = ... # type: Any
    incrementaldecoder = ... # type: Any
    streamwriter = ... # type: Any
    streamreader = ... # type: Any
    def __new__(cls, encode, decode, streamreader=None, streamwriter=None, incrementalencoder=None, incrementaldecoder=None, name=None): ...

class Codec:
    def encode(self, input, errors=''): ...
    def decode(self, input, errors=''): ...

class IncrementalEncoder:
    errors = ... # type: Any
    buffer = ... # type: Any
    def __init__(self, errors=''): ...
    def encode(self, input, final=False): ...
    def reset(self): ...
    def getstate(self): ...
    def setstate(self, state): ...

class BufferedIncrementalEncoder(IncrementalEncoder):
    buffer = ... # type: Any
    def __init__(self, errors=''): ...
    def encode(self, input, final=False): ...
    def reset(self): ...
    def getstate(self): ...
    def setstate(self, state): ...

class IncrementalDecoder:
    errors = ... # type: Any
    def __init__(self, errors=''): ...
    def decode(self, input, final=False): ...
    def reset(self): ...
    def getstate(self): ...
    def setstate(self, state): ...

class BufferedIncrementalDecoder(IncrementalDecoder):
    buffer = ... # type: Any
    def __init__(self, errors=''): ...
    def decode(self, input, final=False): ...
    def reset(self): ...
    def getstate(self): ...
    def setstate(self, state): ...

class StreamWriter(Codec):
    stream = ... # type: Any
    errors = ... # type: Any
    def __init__(self, stream, errors=''): ...
    def write(self, object): ...
    def writelines(self, list): ...
    def reset(self): ...
    def seek(self, offset, whence=0): ...
    def __getattr__(self, name, getattr=...): ...
    def __enter__(self): ...
    def __exit__(self, type, value, tb): ...

class StreamReader(Codec):
    stream = ... # type: Any
    errors = ... # type: Any
    bytebuffer = ... # type: Any
    charbuffer = ... # type: Any
    linebuffer = ... # type: Any
    def __init__(self, stream, errors=''): ...
    def decode(self, input, errors=''): ...
    def read(self, size=-1, chars=-1, firstline=False): ...
    def readline(self, size=None, keepends=True): ...
    def readlines(self, sizehint=None, keepends=True): ...
    def reset(self): ...
    def seek(self, offset, whence=0): ...
    def next(self): ...
    def __iter__(self): ...
    def __getattr__(self, name, getattr=...): ...
    def __enter__(self): ...
    def __exit__(self, type, value, tb): ...

class StreamReaderWriter:
    encoding = ... # type: Any
    stream = ... # type: Any
    reader = ... # type: Any
    writer = ... # type: Any
    errors = ... # type: Any
    def __init__(self, stream, Reader, Writer, errors=''): ...
    def read(self, size=-1): ...
    def readline(self, size=None): ...
    def readlines(self, sizehint=None): ...
    def next(self): ...
    def __iter__(self): ...
    def write(self, data): ...
    def writelines(self, list): ...
    def reset(self): ...
    def seek(self, offset, whence=0): ...
    def __getattr__(self, name, getattr=...): ...
    def __enter__(self): ...
    def __exit__(self, type, value, tb): ...

class StreamRecoder:
    data_encoding = ... # type: Any
    file_encoding = ... # type: Any
    stream = ... # type: Any
    encode = ... # type: Any
    decode = ... # type: Any
    reader = ... # type: Any
    writer = ... # type: Any
    errors = ... # type: Any
    def __init__(self, stream, encode, decode, Reader, Writer, errors=''): ...
    def read(self, size=-1): ...
    def readline(self, size=None): ...
    def readlines(self, sizehint=None): ...
    def next(self): ...
    def __iter__(self): ...
    def write(self, data): ...
    def writelines(self, list): ...
    def reset(self): ...
    def __getattr__(self, name, getattr=...): ...
    def __enter__(self): ...
    def __exit__(self, type, value, tb): ...

def open(filename, mode='', encoding=None, errors='', buffering=1): ...
def EncodedFile(file, data_encoding, file_encoding=None, errors=''): ...
def getencoder(encoding): ...
def getdecoder(encoding): ...
def getincrementalencoder(encoding): ...
def getincrementaldecoder(encoding): ...
def getreader(encoding): ...
def getwriter(encoding): ...
def iterencode(iterator, encoding, errors='', **kwargs): ...
def iterdecode(iterator, encoding, errors='', **kwargs): ...

strict_errors = ... # type: Any
ignore_errors = ... # type: Any
replace_errors = ... # type: Any
xmlcharrefreplace_errors = ... # type: Any
backslashreplace_errors = ... # type: Any

# Names in __all__ with no definition:
#   BOM_UTF16
#   BOM_UTF16_BE
#   BOM_UTF16_LE
#   decode
#   encode
#   lookup
#   lookup_error
#   register
#   register_error
