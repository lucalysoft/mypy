from typing import Any, IO, AnyStr, Callable, Tuple, List
from types import TracebackType, FrameType

def print_tb(traceback: TracebackType, limit: int = None, file: IO[str] = None) -> None: ...
def print_exception(type: type, value: Exception, limit: int = None, file: IO[str] = None) -> None: ...
def print_exc(limit: int = None, file: IO[str] = None) -> None: ...
def format_exc(limit: int = None) -> None: ...
def print_last(limit: int = None, file: IO[str] = None) -> None: ...
def print_stack(f: FrameType, limit: int = None, file: IO[AnyStr] = None) -> None: ...
def extract_tb(f: TracebackType, limit: int = None) -> List[Tuple[str, int, str, str]]: ...
def extract_stack(f: FrameType = None, limit: int = None) -> None: ...
def format_list(list: List[Tuple[str, int, str, str]]) -> str: ...
def format_exception_only(type: type, value: List[str]) -> str: ...
def format_tb(f: TracebackType, limit: int = None) -> str: ...
def format_stack(f: FrameType = None, limit: int = None) -> str: ...
def tb_lineno(tb: TracebackType) -> AnyStr: ...
