# Stubs for shutil (Python 2)
#
# NOTE: Based on a dynamically typed stub automatically generated by stubgen.

from typing import List, Iterable, Callable, IO, AnyStr, Any, Tuple, Sequence

class Error(EnvironmentError): ...
class SpecialFileError(EnvironmentError): ...
class ExecError(EnvironmentError): ...

def copyfileobj(fsrc: IO[AnyStr], fdst: IO[AnyStr], length: int = ...) -> None: ...
def copyfile(src: unicode, dst: unicode) -> None: ...
def copymode(src: unicode, dst: unicode) -> None: ...
def copystat(src: unicode, dst: unicode) -> None: ...
def copy(src: unicode, dst: unicode) -> None: ...
def copy2(src: unicode, dst: unicode) -> None: ...
def ignore_patterns(*patterns: AnyStr) -> Callable[[AnyStr, List[AnyStr]], Iterable[AnyStr]]: ...
def copytree(src: AnyStr, dst: AnyStr, symlinks: bool = False,
             ignore: Callable[[AnyStr, List[AnyStr]], Iterable[AnyStr]] = None) -> None: ...
def rmtree(path: AnyStr, ignore_errors: bool = False,
           onerror: Callable[[Any, AnyStr, Any], None] = None) -> None: ...
def move(src: unicode, dst: unicode) -> None: ...
def get_archive_formats() -> List[Tuple[str, str]]: ...
def register_archive_format(name: str, function: Callable[..., Any],
                            extra_args: Sequence[Tuple[str, Any]] = None,
                            description: str = '') -> None: ...
def unregister_archive_format(name: str) -> None: ...
def make_archive(base_name: AnyStr, format: str, root_dir: unicode = None,
                 base_dir: unicode = None, verbose: int = 0, dry_run: int = 0,
                 owner: str = None, group: str = None, logger: Any = None) -> AnyStr: ...
