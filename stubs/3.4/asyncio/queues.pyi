from typing import Any

__all__ = ['Queue', 'PriorityQueue', 'LifoQueue', 'JoinableQueue',
           'QueueFull', 'QueueEmpty']

from asyncio.events import AbstractEventLoop
from .tasks import coroutine


class QueueEmpty(Exception): ...
class QueueFull(Exception): ...


class Queue:
    def __init__(self, maxsize: int = 0, *, loop: AbstractEventLoop = None): ...
    def _init(self, maxsize: int) -> None: ...
    def _get(self) -> Any: ...
    def _put(self, item: Any) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def _format(self) -> str: ...
    def _consume_done_getters(self) -> None: ...
    def _consume_done_putters(self) -> None: ...
    def qsize(self) -> int: ...
    @property
    def maxsize(self) -> int: ...
    def empty(self) -> bool: ...
    def full(self) -> bool: ...
    @coroutine
    def put(self, item: Any) -> None: ...
    def put_nowait(self, item: Any) -> None: ...
    @coroutine
    def get(self) -> Any: ...
    def get_nowait(self) -> Any: ...


class PriorityQueue(Queue): ...


class LifoQueue(Queue): ...


class JoinableQueue(Queue):
    def task_done(self) -> None: ...
    @coroutine
    def join(self) -> None: ...
