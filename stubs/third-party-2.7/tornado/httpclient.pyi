# Stubs for tornado.httpclient (Python 2)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from tornado.util import Configurable

class HTTPClient:
    def __init__(self, async_client_class=None, **kwargs): ...
    def __del__(self): ...
    def close(self): ...
    def fetch(self, request, **kwargs): ...

class AsyncHTTPClient(Configurable):
    @classmethod
    def configurable_base(cls): ...
    @classmethod
    def configurable_default(cls): ...
    def __new__(cls, io_loop=None, force_instance=False, **kwargs): ...
    io_loop = ... # type: Any
    defaults = ... # type: Any
    def initialize(self, io_loop, defaults=None): ...
    def close(self): ...
    def fetch(self, request, callback=None, raise_error=True, **kwargs): ...
    def fetch_impl(self, request, callback): ...
    @classmethod
    def configure(cls, impl, **kwargs): ...

class HTTPRequest:
    headers = ... # type: Any
    proxy_host = ... # type: Any
    proxy_port = ... # type: Any
    proxy_username = ... # type: Any
    proxy_password = ... # type: Any
    url = ... # type: Any
    method = ... # type: Any
    body = ... # type: Any
    body_producer = ... # type: Any
    auth_username = ... # type: Any
    auth_password = ... # type: Any
    auth_mode = ... # type: Any
    connect_timeout = ... # type: Any
    request_timeout = ... # type: Any
    follow_redirects = ... # type: Any
    max_redirects = ... # type: Any
    user_agent = ... # type: Any
    decompress_response = ... # type: Any
    network_interface = ... # type: Any
    streaming_callback = ... # type: Any
    header_callback = ... # type: Any
    prepare_curl_callback = ... # type: Any
    allow_nonstandard_methods = ... # type: Any
    validate_cert = ... # type: Any
    ca_certs = ... # type: Any
    allow_ipv6 = ... # type: Any
    client_key = ... # type: Any
    client_cert = ... # type: Any
    ssl_options = ... # type: Any
    expect_100_continue = ... # type: Any
    start_time = ... # type: Any
    def __init__(self, url, method='', headers=None, body=None, auth_username=None, auth_password=None, auth_mode=None, connect_timeout=None, request_timeout=None, if_modified_since=None, follow_redirects=None, max_redirects=None, user_agent=None, use_gzip=None, network_interface=None, streaming_callback=None, header_callback=None, prepare_curl_callback=None, proxy_host=None, proxy_port=None, proxy_username=None, proxy_password=None, allow_nonstandard_methods=None, validate_cert=None, ca_certs=None, allow_ipv6=None, client_key=None, client_cert=None, body_producer=None, expect_100_continue=False, decompress_response=None, ssl_options=None): ...
    @property
    def headers(self): ...
    @headers.setter
    def headers(self, value): ...
    @property
    def body(self): ...
    @body.setter
    def body(self, value): ...
    @property
    def body_producer(self): ...
    @body_producer.setter
    def body_producer(self, value): ...
    @property
    def streaming_callback(self): ...
    @streaming_callback.setter
    def streaming_callback(self, value): ...
    @property
    def header_callback(self): ...
    @header_callback.setter
    def header_callback(self, value): ...
    @property
    def prepare_curl_callback(self): ...
    @prepare_curl_callback.setter
    def prepare_curl_callback(self, value): ...

class HTTPResponse:
    request = ... # type: Any
    code = ... # type: Any
    reason = ... # type: Any
    headers = ... # type: Any
    buffer = ... # type: Any
    effective_url = ... # type: Any
    error = ... # type: Any
    request_time = ... # type: Any
    time_info = ... # type: Any
    def __init__(self, request, code, headers=None, buffer=None, effective_url=None, error=None, request_time=None, time_info=None, reason=None): ...
    body = ... # type: Any
    def rethrow(self): ...

class HTTPError(Exception):
    code = ... # type: Any
    response = ... # type: Any
    def __init__(self, code, message=None, response=None): ...

class _RequestProxy:
    request = ... # type: Any
    defaults = ... # type: Any
    def __init__(self, request, defaults): ...
    def __getattr__(self, name): ...

def main(): ...
