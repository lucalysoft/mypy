-- Return statement
-- ----------------


[case testReturnValue]
import typing
def f() -> 'A':
    return A()
    return B()
def g() -> 'B':
    return A()
class A:
    pass
class B:
    pass
[out]
main: In function "f":
main, line 4: Incompatible return value type
main: In function "g":
main, line 6: Incompatible return value type

[case testReturnSubtype]
import typing
def f() -> 'B':
    return A()
def g() -> 'A':
    return B()
class A:
    pass
class B(A):
    pass
[out]
main: In function "f":
main, line 3: Incompatible return value type

[case testReturnWithoutAValue]
import typing
def f() -> 'A':
    return 
def g() -> None:
    return 
class A:
    pass
[out]
main: In function "f":
main, line 3: Return value expected


-- If statement
-- ------------


[case testIfStatement-skip]
from typing import Undefined
a = Undefined # type: A
b = False
if a:
    a = b # Fail
elif a:
    a = b # Fail
elif a:
    a = b # Fail
else:
    a = b # Fail
if b:
    pass
elif b:
    pass
if b:
    pass

class A: pass
[builtins fixtures/bool.py]
[out]
main, line 5: Incompatible types in assignment
main, line 7: Incompatible types in assignment
main, line 9: Incompatible types in assignment
main, line 11: Incompatible types in assignment


-- Loops
-- -----


[case testWhileStatement-skip]
from typing import Undefined
a = Undefined # type: A
b = False
while a:
    a = b    # Fail
else:
    a = b    # Fail
while b:
    b = b

class A: pass
[builtins fixtures/bool.py]
[out]
main, line 5: Incompatible types in assignment
main, line 7: Incompatible types in assignment

[case testBreakStatement]
import typing
while None:
    break
[builtins fixtures/bool.py]
[out]

[case testContinueStatement]
import typing
while None:
    continue
[builtins fixtures/bool.py]
[out]


-- Operator assignment
-- -------------------


[case testPlusAssign]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
a += b   # Fail
b += a   # Fail
c += a   # Fail
a += c

class A:
    def __add__(self, x: 'C') -> 'A': pass

class B:
    def __add__(self, x: A) -> 'C': pass

class C: pass
[out]
main, line 3: Unsupported operand types for + ("A" and "B")
main, line 4: Result type of + incompatible in assignment
main, line 5: Unsupported left operand type for + ("C")

[case testMinusAssign]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
a -= b   # Fail
b -= a   # Fail
c -= a   # Fail
a -= c

class A:
    def __sub__(self, x: 'C') -> 'A': pass

class B:
    def __sub__(self, x: A) -> 'C': pass

class C: pass
[out]
main, line 3: Unsupported operand types for - ("A" and "B")
main, line 4: Result type of - incompatible in assignment
main, line 5: Unsupported left operand type for - ("C")

[case testMulAssign]
from typing import Undefined
a, c = Undefined, Undefined # type: (A, C)
a *= a   # Fail
c *= a   # Fail
a *= c

class A:
    def __mul__(self, x: 'C') -> 'A': pass

class C: pass
[out]
main, line 3: Unsupported operand types for * ("A" and "A")
main, line 4: Unsupported left operand type for * ("C")

[case testDivAssign]
from typing import Undefined
a, c = Undefined, Undefined # type: (A, C)
a /= a   # Fail
c /= a   # Fail
a /= c

class A:
    def __truediv__(self, x: 'C') -> 'A': pass

class C: pass
[out]
main, line 3: Unsupported operand types for / ("A" and "A")
main, line 4: Unsupported left operand type for / ("C")

[case testPowAssign]
from typing import Undefined
a, c = Undefined, Undefined # type: (A, C)
a **= a   # Fail
c **= a   # Fail
a **= c

class A:
    def __pow__(self, x: 'C') -> 'A': pass

class C: pass
[out]
main, line 3: Unsupported operand types for ** ("A" and "A")
main, line 4: Unsupported left operand type for ** ("C")

[case testSubtypesInOperatorAssignment]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
b += b
b += a
a += b

class A:
    def __add__(self, x: 'A') -> 'B': pass

class B(A): pass
[out]

[case testAdditionalOperatorsInOpAssign]
from typing import Undefined
a, c = Undefined, Undefined # type: (A, C)
a &= a  # Fail
a >>= a # Fail
a //= a # Fail
a &= c
a >>= c
a //= c
class A:
    def __and__(self, x: 'C') -> 'A': pass
    def __rshift__(self, x: 'C') -> 'A': pass
    def __floordiv__(self, x: 'C') -> 'A': pass
class C: pass
[out]
main, line 3: Unsupported operand types for & ("A" and "A")
main, line 4: Unsupported operand types for >> ("A" and "A")
main, line 5: Unsupported operand types for // ("A" and "A")


-- Assert statement
-- ----------------


[case testAssert]
import typing
assert None + None # Fail
assert None
[out]
main, line 2: Unsupported left operand type for + (None)


-- Exception handling
-- ------------------


[case testRaiseStatement]
from typing import Undefined
e = Undefined # type: BaseException
f = Undefined # type: MyError
a = Undefined # type: A
raise a # Fail
raise e
raise f
class A: pass
class MyError(BaseException): pass
[builtins fixtures/exception.py]
[out]
main, line 5: Invalid exception type

[case testTryFinallyStatement]
import typing
try:
    b = object() # type: A # Fail
finally:
    c = object() # type: A # Fail
class A: pass
[out]
main, line 3: Incompatible types in assignment
main, line 5: Incompatible types in assignment

[case testSimpleTryExcept]
from typing import Undefined
try:
  pass
except BaseException as e:
  a, o = Undefined, Undefined # type: (BaseException, object)
  e = a
  e = o # Fail
class A: pass
class B: pass
[builtins fixtures/exception.py]
[out]
main, line 7: Incompatible types in assignment

[case testTypeErrorInBlock]
from typing import Undefined
while object:
  x = Undefined # type: A
  x = object()
  x = B()
class A: pass
class B: pass
[out]
main, line 4: Incompatible types in assignment
main, line 5: Incompatible types in assignment

[case testTypeErrorInvolvingBaseException]
from typing import Undefined
x, a = Undefined, Undefined # type: (BaseException, A)
a = BaseException()  # Fail
a = object()         # Fail
x = object()         # Fail
x = A()              # Fail
x = BaseException()
class A: pass
[builtins fixtures/exception.py]
[out]
main, line 3: Incompatible types in assignment
main, line 4: Incompatible types in assignment
main, line 5: Incompatible types in assignment
main, line 6: Incompatible types in assignment

[case testSimpleTryExcept2]
import typing
try:
  pass
except BaseException as e:
  e = object() # Fail
  e = BaseException()
[builtins fixtures/exception.py]
[out]
main, line 5: Incompatible types in assignment

[case testBaseClassAsExceptionTypeInExcept]
import typing
try:
  pass
except Err as e:
  e = BaseException() # Fail
  e = Err()
class Err(BaseException): pass
[builtins fixtures/exception.py]
[out]
main, line 5: Incompatible types in assignment

[case testMultipleExceptHandlers]
import typing
try:
    pass
except BaseException as e:
    pass
except Err as f:
    f = BaseException() # Fail
    f = Err()
class Err(BaseException): pass
[builtins fixtures/exception.py]
[out]
main, line 7: Incompatible types in assignment

[case testTryExceptStatement]
import typing
try:
    a = B() # type: A       # Fail
except BaseException as e:
    e = A()             # Fail
    e = Err()
except Err as f:
    f = BaseException() # Fail
    f = Err()
class A: pass
class B: pass
class Err(BaseException): pass
[builtins fixtures/exception.py]
[out]
main, line 3: Incompatible types in assignment
main, line 5: Incompatible types in assignment
main, line 8: Incompatible types in assignment

[case testTryExceptWithinFunction]
import typing
def f() -> None:
  try: pass
  except BaseException as e:
    e = object() # Fail
    e = BaseException()
  except Err as f:
    f = BaseException() # Fail
    f = Err()
class Err(BaseException): pass
[builtins fixtures/exception.py]
[out]
main: In function "f":
main, line 5: Incompatible types in assignment
main, line 8: Incompatible types in assignment

[case testTryWithElse]
import typing
try: pass
except BaseException: pass
else:
  object(None) # E: Too many arguments for "object"
[builtins fixtures/exception.py]

[case testExceptWithoutType]
import typing
try: 
    -None # E: Unsupported operand type for unary - (None)
except:
    ~None # E: Unsupported operand type for ~ (None)
[builtins fixtures/exception.py]

[case testRaiseWithoutArgument]
import typing
try:
    None
except:
    raise
[builtins fixtures/exception.py]

[case testExceptWithMultipleTypes]
import typing
class E1(BaseException): pass
class E2(E1): pass
try:
    pass
except (E1, E2): pass
except (E1, object): pass # E: Invalid exception type
except (object, E2): pass # E: Invalid exception type
[builtins fixtures/exception.py]

[case testExceptWithMultipleTypes2]
import typing
class E1(BaseException): pass
class E2(E1): pass
try:
    pass
except (E1, E2) as e1:
    x = e1 # type: E1
    y = e1 # type: E2 # E: Incompatible types in assignment
except (E2, E1) as e2:
    a = e2 # type: E1
    b = e2 # type: E2 # E: Incompatible types in assignment
[builtins fixtures/exception.py]

[case testReuseTryExceptionVariable]
import typing
class E1(BaseException): pass
class E2(BaseException): pass
try: pass
except E1 as e: pass
try: pass
except E1 as e: pass
try: pass
except E2 as e: pass # E: Incompatible types in assignment
[builtins fixtures/exception.py]

[case testArbitraryExpressionAsExceptionType]
import typing
a = BaseException
try: pass
except a as b:
    b = BaseException()
    b = object() # E: Incompatible types in assignment
[builtins fixtures/exception.py]

[case testInvalidExceptionCallable]
import typing
def exc() -> BaseException: pass
try: pass
except exc as e: pass             # E: Invalid exception type
except BaseException() as b: pass # E: Invalid exception type
[builtins fixtures/exception.py]

[case testOverloadedExceptionType]
from typing import overload
class E(BaseException):
    @overload
    def __init__(self) -> None: pass
    @overload
    def __init__(self, x) -> None: pass
try: 
    pass
except E as e:
    e = E()
    e = BaseException() # E: Incompatible types in assignment
[builtins fixtures/exception.py]


-- Del statement
-- -------------


[case testDelStmtWithIndex]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
del b[a]
del b[b] # E: Argument 1 to "__delitem__" of "B" has incompatible type "B"
del a[a] # E: "A" has no attribute "__delitem__"
del a[b] # E: "A" has no attribute "__delitem__"
class B:
  def __delitem__(self, index: 'A'): pass
class A: pass


-- Yield statement
-- ---------------


[case testSimpleYield]
from typing import Iterator
def f() -> Iterator[int]:
    yield 1
    yield '' # E: Incompatible types
[builtins fixtures/for.py]
[out]
main: In function "f":

[case testYieldInFunctionReturningAny]
from typing import Any
def f() -> Any:
    yield object()
[out]

[case testYieldInFunctionReturningFunction]
from typing import Function
def f() -> Function[[], None]:
    yield object() # E: Iterator function return type expected for "yield"
[out]
main: In function "f":

[case testYieldInDynamicallyTypedFunction]
import typing
def f():
    yield f

[case testWithInvalidInstanceReturnType-skip]
import typing
def f() -> 'A':
    yield A() # E: Iterator function return type expected for "yield"
class A: pass
[builtins fixtures/for.py]
[out]
main: In function "f":

[case testTypeInferenceContextAndYield-skip]
from typing import List, Iterator
def f() -> 'Iterator[List[A]]':
    yield []
    yield [object()] # E: List item 1 has incompatible type "object"
class A: pass
[builtins fixtures/for.py]
[out]
main: In function "f":

-- TODO both return and yield


-- With statement
-- --------------


[case testSimpleWith]
import typing
class A:
    def __enter__(self) -> None: pass
    def __exit__(self, x, y, z) -> None: pass
with A():
    object(A) # E: Too many arguments for "object"

[case testWithStmtAndInvalidExit]
import typing
class A:
    def __enter__(self) -> None: pass
    def __exit__(self, x, y) -> None: pass
with A(): # E: Too many arguments for "__exit__" of "A"
    pass

[case testWithStmtAndMissingExit]
import typing
class A:
    def __enter__(self) -> None: pass
with A(): # E: "A" has no attribute "__exit__"
    pass

[case testWithStmtAndInvalidEnter]
import typing
class A:
    def __enter__(self, x) -> None: pass
    def __exit__(self, x, y, z) -> None: pass
with A(): # E: Too few arguments for "__enter__" of "A"
    pass

[case testWithStmtAndMissingEnter]
import typing
class A:
    def __exit__(self, x, y, z) -> None: pass
with A(): # E: "A" has no attribute "__enter__"
    pass

[case testWithStmtAndMultipleExprs]
import typing
class A:
    def __enter__(self) -> None: pass
    def __exit__(self, x, y, z) -> None: pass
class B:
    def __enter__(self) -> None: pass
with A(), B(): # E: "B" has no attribute "__exit__"
    pass
with B(), A(): # E: "B" has no attribute "__exit__"
    pass

[case testWithStmtAndResult]
import typing
class B: pass
class A:
    def __enter__(self) -> B: pass
    def __exit__(self, x, y, z): pass
with A() as b:
    b = B()
    b = A() # E: Incompatible types in assignment

[case testWithStmtAndMultipleResults]
from typing import typevar, Generic
t = typevar('t')
class B: pass
class C: pass
class A(Generic[t]):
    def __enter__(self) -> t: pass
    def __exit__(self, x, y, z): pass
with A[B]() as b, A[C]() as c:
    b = B()
    c = C()
    b = c # E: Incompatible types in assignment
    c = b # E: Incompatible types in assignment


-- Chained assignment
-- ------------------


[case testChainedAssignment]
import typing
class A: pass
class B: pass
x = y = A()
x = A()
y = A()
x = B() # E: Incompatible types in assignment
y = B() # E: Incompatible types in assignment

[case testChainedAssignment2]
import typing
def f() -> None:
    x = 1
    y = 'x'
    x = y = 'x' # E: Incompatible types in assignment
    x = y = 1   # E: Incompatible types in assignment
[builtins fixtures/primitives.py]
[out]
main: In function "f":
