-- Inferring locals/globals with simple types
-- ------------------------------------------


[case testInferSimpleGvarType]
import typing
x = A()
y = B()
x = B() # Fail
x = A()
x = y   # Fail
x = x
class A: pass
class B: pass
[out]
main, line 4: Incompatible types in assignment
main, line 6: Incompatible types in assignment

[case testInferSimpleLvarType]
import typing
def f() -> None:
  x = A()
  y = B()
  x = B() # Fail
  x = A()
  x = y   # Fail
  x = x
class A: pass
class B: pass
[out]
main: In function "f":
main, line 5: Incompatible types in assignment
main, line 7: Incompatible types in assignment

[case testLvarInitializedToNoneWithoutType]
import typing
def f() -> None:
    a = None # E: Need type annotation for variable
    a.x()
[out]
main: In function "f":

[case testLvarInitializedToVoid]
import typing
def f() -> None:
    a = g()    # E: "g" does not return a value
    #b, c = g() # "g" does not return a value TODO

def g() -> None: pass
[out]
main: In function "f":

[case testInferringLvarTypeFromArgument]
import typing
def f(a: 'A') -> None:
    b = a
    b = B() # E: Incompatible types in assignment
    b = a
    a = b

class A: pass
class B: pass
[out]
main: In function "f":

[case testInferringLvarTypeFromGvar]
from typing import Undefined
g = Undefined # type: B

def f() -> None:
    a = g
    a = A() # E: Incompatible types in assignment
    a = B()

class A: pass
class B: pass
[out]
main: In function "f":

[case testInferringImplicitDynamicTypeForLvar]
import typing
def f() -> None:
    a = g()
    None(a) # E: None not callable
    a.x()
    
def g(): pass
[out]
main: In function "f":

[case testInferringExplicitDynamicTypeForLvar]
from typing import Undefined, Any
g = Undefined # type: Any

def f(a: Any) -> None:
    b = g
    None(b) # E: None not callable
    a.x()
[out]
main: In function "f":


-- Inferring types of local variables with complex types
-- -----------------------------------------------------


[case testInferringTupleTypeForLvar]
from typing import Undefined
def f() -> None:
    a = A(), B()
    aa = Undefined # type: A
    bb = Undefined # type: B
    bb = a[0] # E: Incompatible types in assignment
    aa = a[1] # E: Incompatible types in assignment
    aa = a[0]
    bb = a[1]

class A: pass
class B: pass
[builtins fixtures/tuple.py]
[out]
main: In function "f":

[case testInferringTupleTypeForLvarWithNones]
import typing
def f() -> None:
    a = A(), None # E: Need type annotation for variable
    b = None, A() # E: Need type annotation for variable

class A: pass
[builtins fixtures/tuple.py]
[out]
main: In function "f":

[case testInferringGenericTypeForLvar]
from typing import Undefined, typevar, Generic
T = typevar('T')
class A(Generic[T]): pass
a_i = Undefined # type: A[int]
a_s = Undefined # type: A[str]

def f() -> None:
    a = A[int]()
    a = a_s # E: Incompatible types in assignment
    a = a_i
[builtins fixtures/tuple.py]
[out]
main: In function "f":

[case testInferringFunctionTypeForLvar]
import typing
def f() -> None:
    a = g
    a(B()) # E: Argument 1 has incompatible type "B"
    a(A())

def g(a: 'A') -> None: pass

class A: pass
class B: pass
[out]
main: In function "f":

[case testInferringFunctionTypeForLvarFromTypeObject]
import typing
def f() -> None:
    a = A
    a(A()) # E: Too many arguments
    a()
    t = a # type: type

class A: pass
[out]
main: In function "f":


-- Inferring local variable types in multiple definition
-- -----------------------------------------------------


[case testInferringLvarTypesInMultiDef]
import typing
def f() -> None:
    a, b = A(), B()
    a = b   # E: Incompatible types in assignment
    a = B() # E: Incompatible types in assignment
    b = A() # E: Incompatible types in assignment
    
    a = A()
    b = B()

class A: pass
class B: pass
[out]
main: In function "f":

[case testInferringLvarTypesInMultiDefWithNoneTypes]
import typing
def f() -> None:
    a, b = A(), None # E: Need type annotation for variable
    c, d = None, A() # E: Need type annotation for variable

class A: pass
[out]
main: In function "f":

[case testInferringLvarTypesInMultiDefWithInvalidTuple]
from typing import Undefined, Tuple
t = Undefined # type: Tuple[object, object, object]

def f() -> None:
    a, b = t         # Fail
    c, d, e, f = t   # Fail
    g, h, i = t
[builtins fixtures/tuple.py]
[out]
main: In function "f":
main, line 5: Too many values to assign
main, line 6: Need 4 values to assign

[case testInvalidRvalueTypeInInferredMultipleLvarDefinition]
import typing
def f() -> None:
    a, b = f   # E: Incompatible types in assignment
    c, d = A() # E: Incompatible types in assignment
class A: pass
[out]
main: In function "f":

[case testInferringMultipleLvarDefinitionWithListRvalue]
from typing import List

class C: pass
class D: pass

def f() -> None:
    a, b = List[C]()
    c, d, e = List[D]()
    a = D() # E: Incompatible types in assignment
    b = D() # E: Incompatible types in assignment
    c = C() # E: Incompatible types in assignment
    b = c   # E: Incompatible types in assignment
    
    a = C()
    b = C()
    c = D()
    d = D()
    e = D()
    
    a = b
    c = d
    d = e
[builtins fixtures/list.py]
[out]
main: In function "f":

[case testInferringMultipleLvarDefinitionWithImplicitDynamicRvalue]
import typing
def f() -> None:
    a, b = g()
    a.x
    b.x
def g(): pass

[case testInferringMultipleLvarDefinitionWithExplicitDynamicRvalue]
from typing import Any
def f(d: Any) -> None:
    a, b = d
    a.x
    b.x


-- Type variable inference for generic functions
-- ---------------------------------------------


[case testInferSimpleGenericFunction]
from typing import Undefined, Tuple, typevar
T = typevar('T')
a = Undefined # type: A
b = Undefined # type: B
c = Undefined # type: Tuple[A, object]

b = id(a) # E: Argument 1 to "id" has incompatible type "A"
a = id(b) # E: Argument 1 to "id" has incompatible type "B"
a = id(c) # E: Argument 1 to "id" has incompatible type "tuple<A, object>"

a = id(a)
b = id(b)
c = id(c)

def id(a: T) -> T: pass

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testInferringGenericFunctionTypeForLvar]
# TODO this is actually a contextual inference test case
from typing import Undefined, typevar
T = typevar('T')
def f() -> None:
    a = id
    b = Undefined # type: int
    c = Undefined # type: str
    b = a(c) # E: Argument 1 has incompatible type "str"
    b = a(b)
    c = a(c)
def id(x: T) -> T:
    return x
[out]
main: In function "f":

[case testUnderspecifiedInferenceResult]
from typing import Undefined, typevar
T = typevar('T')
class A: pass
a = Undefined # type: A

def ff() -> None:
    x = f() # E: Need type annotation for variable

g(None) # Ok
f()     # Ok because not used to infer local variable type
f[A]()
g(a)

def f() -> T: pass
def g(a: T) -> None: pass
[out]
main: In function "ff":

[case testUnsolvableInferenceResult]
from typing import typevar
T = typevar('T')
f(A(), g()) # Fail
f(A(), A())

def f(a: T, b: T) -> None: pass
def g() -> None: pass
class A: pass
[out]
main, line 3: Cannot infer type argument 1 of "f"
main, line 3: "g" does not return a value

[case testInferenceWithMultipleConstraints]
from typing import Undefined, typevar
T = typevar('T')
a = Undefined # type: A
b = Undefined # type: B

b = f(a, b) # E: Argument 1 to "f" has incompatible type "A"
b = f(b, a) # E: Argument 2 to "f" has incompatible type "A"
a = f(a, b)
a = f(b, a)

def f(a: T, b: T) -> T: pass

class A: pass
class B(A): pass

[case testInferenceWithMultipleVariables]
from typing import Undefined, Tuple, typevar
T = typevar('T')
S = typevar('S')
a, b = Undefined, Undefined # type: (A, B)
taa = Undefined # type: Tuple[A, A]
tab = Undefined # type: Tuple[A, B]
tba = Undefined # type: Tuple[B, A]

taa = f(a, b) # Fail
taa = f(b, a) # Fail
tba = f(a, b) # Fail

tab = f(a, b)
tba = f(b, a)

def f(a: T, b: S) -> Tuple[T, S]: pass

class A: pass
class B: pass
[builtins fixtures/tuple.py]
[out]
main, line 9: Argument 2 to "f" has incompatible type "B"
main, line 10: Argument 1 to "f" has incompatible type "B"
main, line 11: Argument 1 to "f" has incompatible type "A"
main, line 11: Argument 2 to "f" has incompatible type "B"

[case testConstraintSolvingWithSimpleGenerics]
from typing import Undefined, typevar, Generic
T = typevar('T')
ao = Undefined # type: A[object]
ab = Undefined # type: A[B]
ac = Undefined # type: A[C]

ab = f(ao) # E: Argument 1 to "f" has incompatible type A<object>
ao = f(ab) # E: Argument 1 to "f" has incompatible type A<B>
ab = f(ac) # E: Argument 1 to "f" has incompatible type A<C>
ab = g(ao) # E: Argument 1 to "g" has incompatible type A<object>
ao = g(ab) # E: Argument 1 to "g" has incompatible type A<B>

ab = f(ab)
ac = f(ac)
ao = f(ao)

ab = g(ab)
ao = g(ao)

def f(a: 'A[T]') -> 'A[T]': pass

def g(a: T) -> T: pass

class A(Generic[T]): pass
class B: pass
class C: pass

[case testConstraintSolvingFailureWithSimpleGenerics]
from typing import Undefined, typevar, Generic
T = typevar('T')
ao = Undefined # type: A[object]
ab = Undefined # type: A[B]

f(ao, ab) # E: Cannot infer type argument 1 of "f"
f(ab, ao) # E: Cannot infer type argument 1 of "f"
f(ao, ao)
f(ab, ab)

def f(a: 'A[T]', b: 'A[T]') -> None: pass

class A(Generic[T]): pass
class B: pass

[case testTypeInferenceWithCalleeDefaultArgs]
from typing import Undefined, typevar
T = typevar('T')
a = Undefined # type: A
o = Undefined # type: object

a = f(o)    # E: Argument 1 to "f" has incompatible type "object"
a = g(a, o) # E: Argument 2 to "g" has incompatible type "object"

o = f()
o = f(o)
a = f(a)
a = g(a)

def f(a: T = None) -> T: pass
def g(a: T, b: T = None) -> T: pass

class A: pass


-- Generic function inference with interfaces
-- ------------------------------------------


[case testUniqueAndNonUniqueInterfaceInference-skip]
from typing import Undefined, typevar
from abc import abstractmethod, ABCMeta
T = typevar('T')
i, j = Undefined, Undefined # type: (I, J)

# Ambiguous join:
f(A(), B())     # E: Cannot infer type argument 1 of "f"

j = f(A(), C()) # E: Argument 2 to "f" has incompatible type "C"

i = f(A(), C())

def f(a: T, b: T) -> T:
    pass

class I(metaclass=ABCMeta): pass
class J(metaclass=ABCMeta): pass

class A(I, J): pass
class B(I, J): pass
class C(I): pass

[case testInterfaceInferenceWithInheritance1-skip]
from typing import Undefined, typevar
from abc import abstractmethod, ABCMeta
T = typevar('T')
i = Undefined # type: I

f(B(), C())  # E: Cannot infer type argument 1 of "f"

i = f(A(), B())
i = f(A(), C())

def f(a: T, b: T) -> T: pass

class I(metaclass=ABCMeta): pass
class J(metaclass=ABCMeta): pass

class A(I): pass
class B(A, J): pass
class C(I, J): pass

[case testInterfaceInferenceWithInheritance2-skip]
from typing import Undefined, typevar
from abc import abstractmethod, ABCMeta
T = typevar('T')
j, k = Undefined, Undefined # type: (J, K)

f(B(), C())     # E: Cannot infer type argument 1 of "f"
k = f(A(), C()) # E: Argument 2 to "f" has incompatible type "C"

k = f(A(), B())
j = f(A(), C())

def f(a: T, b: T) -> T:
    pass

class I(metaclass=ABCMeta): pass
class J(metaclass=ABCMeta): pass
class K(J): pass

class A(K): pass
class B(A, I): pass
class C(I, J): pass

[case testPrecedenceOfClassInferenceResultOverInterfaceResult]
from typing import Undefined, typevar
from abc import abstractmethod, ABCMeta
T = typevar('T')
a, i, j = Undefined, Undefined, Undefined # type: (A, I, J)

a = f(B(), C())

class I(metaclass=ABCMeta): pass
class J(metaclass=ABCMeta): pass

def f(a: T, b: T) -> T: pass

class A: pass
class B(A, I, J): pass
class C(A, I, J): pass


-- Generic function inference with function arguments
-- --------------------------------------------------


[case testNonOverloadedMapInference]
from typing import typevar, Function, List
t = typevar('t')
s = typevar('s')
class A: pass
b = bool()
def f(x: bool) -> A: pass
def mymap(f: Function[[t], s], a: List[t]) -> List[s]: pass

l = mymap(f, [b])
l = List[A]()
l = List[bool]() # E: Incompatible types in assignment
[builtins fixtures/for.py]


-- Literal expressions
-- -------------------


[case testDictLiteral]
from typing import Undefined, Dict
class A: pass
class B: pass
a, b = Undefined, Undefined # type: (A, B)
d = {a:b}
d = Dict[A, B]()
d = Dict[A, A]() # E: Incompatible types in assignment
d = Dict[B, B]() # E: Incompatible types in assignment
[builtins fixtures/dict.py]

[case testSetLiteral]
from typing import Undefined, Any, Set
a, x = Undefined, Undefined # type: (int, Any)
s = {a}
s = {x}
s = Set[int]()
s = Set[str]() # E: Incompatible types in assignment
[builtins fixtures/set.py]


-- For statements
-- --------------


[case testInferenceOfFor1]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)

for x in [A()]:
    b = x # E: Incompatible types in assignment
    a = x

for y in []: # E: Need type annotation for variable
    a = y # E: Cannot determine type of 'y'

class A: pass
class B: pass
[builtins fixtures/for.py]

[case testInferenceOfFor2]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
for x, y in [(A(), B())]:
    b = x # Fail
    a = y # Fail
    a = x
    b = y
for xx, yy, zz in [(A(), B())]: # Fail
    pass
for xxx, yyy in [(None, None)]: # Fail
    pass

class A: pass
class B: pass
[builtins fixtures/for.py]
[out]
main, line 4: Incompatible types in assignment
main, line 5: Incompatible types in assignment
main, line 8: Need 3 values to assign
main, line 10: Need type annotation for variable

[case testInferenceOfFor3]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)

for x, y in [[A()]]:
    b = x # E: Incompatible types in assignment
    b = y # E: Incompatible types in assignment
    a = x
    a = y

for e, f in [[]]: # E: Need type annotation for variable
    pass

class A: pass
class B: pass
[builtins fixtures/for.py]

[case testForStatementInferenceWithVoid]
import typing
for x in f(): # E: "f" does not return a value
    pass
def f() -> None: pass
[builtins fixtures/for.py]

[case testReusingInferredForIndex]
import typing
for a in [A()]: pass
a = A()
a = B() # E: Incompatible types in assignment
for a in []: pass
a = A()
a = B() # E: Incompatible types in assignment
class A: pass
class B: pass
[builtins fixtures/for.py]

[case testReusingInferredForIndex2]
import typing
def f() -> None:
    for a in [A()]: pass
    a = A()
    a = B() # E: Incompatible types in assignment
    for a in []: pass
    a = A()
    a = B() # E: Incompatible types in assignment
class A: pass
class B: pass
[builtins fixtures/for.py]
[out]
main: In function "f":


-- Regression tests
-- ----------------


[case testMultipleAssignmentWithPartialDefinition]
from typing import Undefined
a = Undefined # type: A
x, a = a, a
x = a
a = x
x = object() # E: Incompatible types in assignment
a = object() # E: Incompatible types in assignment
class A: pass

[case testMultipleAssignmentWithPartialDefinition2]
from typing import Undefined
a = Undefined # type: A
a, x = [a]
x = a
a = x
x = object() # E: Incompatible types in assignment
a = object() # E: Incompatible types in assignment
class A: pass
[builtins fixtures/for.py]

[case testMultipleAssignmentWithPartialDefinition3]
from typing import Undefined, Any
a = Undefined # type: A
x, a = Any(a)
x = a
a = x
x = object()
a = object() # E: Incompatible types in assignment
class A: pass

[case testInferGlobalDefinedInBlock]
import typing
if A:
    a = A()
    a = A()
    a = B() # E: Incompatible types in assignment
class A: pass
class B: pass


-- Inferring attribute types
-- -------------------------


[case testInferAttributeType]
import typing
class A:
    a = B()
class B: pass

A().a = B()
A().a = A() # E: Incompatible types in assignment

[case testInferAttributeTypeAndAssignInInit]
import typing
class A:
    a = B()
    def __init__(self) -> None:
        self.a = A() # E: Incompatible types in assignment
        self.a = B()
class B: pass
[out]
main: In member "__init__" of class "A":

[case testInferAttributeInInit]
import typing
class B: pass
class A:
    def __init__(self) -> None:
        self.a = A()
        self.b = B()
a = A()
a.a = A()
a.b = B()
a.a = B() # E: Incompatible types in assignment
a.b = A() # E: Incompatible types in assignment

[case testInferAttributeInInitUsingChainedAssignment]
import typing
class B: pass
class A:
    def __init__(self) -> None:
        self.a = self.b = A()
a = A()
a.a = A()
a.b = A()
a.a = B() # E: Incompatible types in assignment
a.b = B() # E: Incompatible types in assignment


-- Lambdas
-- -------


[case testInferLambdaType]
from typing import List, Function, Undefined
l = lambda: List[int]()
f1 = l # type: Function[[], List[int]]
f2 = l # type: Function[[], List[str]] # E: Incompatible types in assignment
[builtins fixtures/list.py]

[case testInferLambdaType2]
from typing import List, Function
l = lambda: [B()]
f1 = l # type: Function[[], List[B]]
f2 = l # type: Function[[], List[A]] # E: Incompatible types in assignment

class A: pass
class B: pass
[builtins fixtures/list.py]


-- Boolean operators
-- -----------------


[case testOrOperationWithGenericOperands]
from typing import Undefined, List
a = Undefined # type: List[A]
o = Undefined # type: List[object]
a2 = a or []
a = a2
a2 = o # E: Incompatible types in assignment
class A: pass
[builtins fixtures/list.py]


-- Accessing variable before its type has been inferred
-- ----------------------------------------------------


[case testAccessGlobalVarBeforeItsTypeIsAvailable]
import typing
x.y  # E: Cannot determine type of 'x' 
x = object()
x.y  # E: "object" has no attribute "y"

[case testAccessDataAttributeBeforeItsTypeIsAvailable]
from typing import Undefined
a = Undefined # type: A
a.x.y  # E: Cannot determine type of 'x'
class A:
   def __init__(self) -> None:
       self.x = object()
a.x.y  # E: "object" has no attribute "y"
