-- Methods
-- -------


[case testMethodCall]
from typing import Undefined
a = Undefined # type: A
b = Undefined # type: B

a.foo(B())        # Fail
a.bar(B(), A())   # Fail

a.foo(A())
b.bar(B(), A())

class A:
  def foo(self, x: 'A') -> None: pass
class B:
  def bar(self, x: 'B', y: A) -> None: pass
[out]
main, line 5: Argument 1 to "foo" of "A" has incompatible type "B"
main, line 6: "A" has no attribute "bar"

[case testMethodCallWithSubtype]
from typing import Undefined
a = Undefined # type: A
a.foo(A())
a.foo(B())
a.bar(A()) # Fail
a.bar(B())

class A:
  def foo(self, x: 'A') -> None: pass
  def bar(self, x: 'B') -> None: pass
class B(A): pass
[out]
main, line 5: Argument 1 to "bar" of "A" has incompatible type "A"

[case testInheritingMethod]
from typing import Undefined
a = Undefined # type: B
a.foo(A()) # Fail
a.foo(B())

class A:
  def foo(self, x: 'B') -> None: pass
class B(A): pass
[out]
main, line 3: Argument 1 to "foo" of "A" has incompatible type "A"

[case testMethodCallWithInvalidNumberOfArguments]
from typing import Undefined
a = Undefined # type: A
a.foo()               # Fail
a.foo(object(), A())  # Fail

class A:
  def foo(self, x: 'A') -> None: pass
[out]
main, line 3: Too few arguments for "foo" of "A"
main, line 4: Too many arguments for "foo" of "A"
main, line 4: Argument 1 to "foo" of "A" has incompatible type "object"

[case testMethodBody]
import typing
class A:
  def f(self) -> None:
    a = object() # type: A    # Fail
[out]
main: In member "f" of class "A":
main, line 4: Incompatible types in assignment

[case testMethodArguments]
import typing
class A:
  def f(self, a: 'A', b: 'B') -> None:
    a = B() # Fail
    b = A() # Fail
    a = A()
    b = B()
    a = a
    a = b # Fail
class B: pass
[out]
main: In member "f" of class "A":
main, line 4: Incompatible types in assignment
main, line 5: Incompatible types in assignment
main, line 9: Incompatible types in assignment

[case testReturnFromMethod]
import typing
class A:
  def f(self) -> 'A':
    return B() # Fail
    return A()
class B: pass
[out]
main: In member "f" of class "A":
main, line 4: Incompatible return value type

[case testSelfArgument]
import typing
class A:
  def f(self) -> None:
    o = self # type: B    # Fail
    self.g()      # Fail
    a = self # type: A
    self.f()
class B: pass
[out]
main: In member "f" of class "A":
main, line 4: Incompatible types in assignment
main, line 5: "A" has no attribute "g"

[case testAssignToMethodViaInstance]
import typing
class A:
    def f(self): pass
A().f = None # E: Cannot assign to a method




[case testReferToInvalidAttribute]
from typing import Undefined
class A:
  def __init__(self):
    self.x = object()
a = Undefined # type: A
a.y
a.y = object()
a.x
a.x = object()
[out]
main, line 6: "A" has no attribute "y"
main, line 7: "A" has no attribute "y"

[case testArgumentTypeInference]
from typing import Undefined
class A:
  def __init__(self, aa: 'A', bb: 'B') -> None:
    self.a = aa
    self.b = bb
class B: pass
a = Undefined # type: A
b = Undefined # type: B
a.a = b # Fail
a.b = a # Fail
b.a     # Fail
a.a = a
a.b = b
[out]
main, line 9: Incompatible types in assignment
main, line 10: Incompatible types in assignment
main, line 11: "B" has no attribute "a"

[case testExplicitAttributeInBody]
from typing import Undefined
a = Undefined # type: A
a.x = object() # Fail
a.x = A()
class A:
  x = Undefined # type: A
[out]
main, line 3: Incompatible types in assignment


-- Method overriding
-- -----------------


[case testMethodOverridingWithIdenticalSignature]
import typing
class A:
  def f(self, x: 'A') -> None: pass
  def g(self, x: 'B' , y: object) -> 'A': pass
  def h(self) -> None: pass
class B(A):
  def f(self, x: A) -> None: pass
  def g(self, x: 'B' , y: object) -> A: pass
  def h(self) -> None: pass
[out]

[case testMethodOverridingWithReturnTypeCoVariance]
import typing
class A:
  def f(self, x: 'A', y: 'B') -> 'A': pass
class B(A):
  def f(self, x: A, y: 'B') -> 'B': pass
[out]

[case testMethodOverridingWithIncompatibleTypes]
import typing
class A:
  def f(self, x: 'A', y: 'B') -> 'A': pass
  def g(self, x: 'A', y: 'B') -> 'A': pass
  def h(self, x: 'A', y: 'B') -> 'A': pass
class B(A):
  def f(self, x: 'B', y: 'B') -> A: pass  # Fail
  def g(self, x: A, y: A) -> A: pass  # Fail
  def h(self, x: A, y: 'B') -> object: pass  # Fail
[out]
main: In class "B":
main, line 7: Argument 1 of "f" incompatible with supertype "A"
main, line 8: Argument 2 of "g" incompatible with supertype "A"
main, line 9: Return type of "h" incompatible with supertype "A"

[case testMethodOverridingWithIncompatibleArgumentCount]
import typing
class A:
    def f(self, x: 'A') -> None: pass
    def g(self, x: 'A', y: 'B') -> 'A': pass
class B(A):
    def f(self, x: A, y: A) -> None: pass # Fail
    def g(self, x: A) -> A: pass # Fail
[out]
main: In class "B":
main, line 6: Signature of "f" incompatible with supertype "A"
main, line 7: Signature of "g" incompatible with supertype "A"

[case testMethodOverridingAcrossDeepInheritanceHierarchy1]
import typing
class A:
    def f(self, x: 'B') -> None: pass
class B(A): pass
class C(B): # with gap in implementations
    def f(self, x: 'C') -> None:  # Fail
        pass
[out]
main: In class "C":
main, line 6: Argument 1 of "f" incompatible with supertype "A"

[case testMethodOverridingAcrossDeepInheritanceHierarchy2]
import typing
class A:
    def f(self) -> 'B': pass
class B(A):
    def f(self) -> 'C': pass
class C(B): # with multiple implementations
    def f(self) -> B:  # Fail
        pass
[out]
main: In class "C":
main, line 7: Return type of "f" incompatible with supertype "B"

[case testMethodOverridingWithVoidReturnValue]
import typing
class A:
    def f(self) -> None: pass
    def g(self) -> 'A': pass
class B(A):
    def f(self) -> A: pass  # Fail
    def g(self) -> None: pass  # Fail
[out]
main: In class "B":
main, line 6: Return type of "f" incompatible with supertype "A"
main, line 7: Return type of "g" incompatible with supertype "A"


-- Constructors
-- ------------


[case testTrivialConstructor]
import typing
a = A() # type: A
b = A() # type: B # Fail
class A:
    def __init__(self) -> None: pass
class B: pass
[out]
main, line 3: Incompatible types in assignment

[case testConstructor]
import typing
a = A(B()) # type: A
aa = A(object()) # type: A  # Fail
b = A(B()) # type: B       # Fail
class A:
    def __init__(self, x: 'B') -> None: pass
class B: pass
[out]
main, line 3: Argument 1 to "A" has incompatible type "object"
main, line 4: Incompatible types in assignment

[case testConstructorWithTwoArguments]
import typing
a = A(C(), B()) # type: A  # Fail

class A:
    def __init__(self, x: 'B', y: 'C') -> None: pass
class B: pass
class C(B): pass
[out]
main, line 2: Argument 2 to "A" has incompatible type "B"

[case testInheritedConstructor]
import typing
b = B(C()) # type: B
a = B(D()) # type: A # Fail
class A:
    def __init__(self, x: 'C') -> None: pass
class B(A): pass
class C: pass
class D: pass
[out]
main, line 3: Argument 1 to "B" has incompatible type "D"

[case testOverridingWithIncompatibleConstructor]
import typing
A()    # Fail
B(C()) # Fail
A(C())
B()
class A:
    def __init__(self, x: 'C') -> None: pass
class B(A):
    def __init__(self) -> None: pass
class C: pass
[out]
main, line 2: Too few arguments for "A"
main, line 3: Too many arguments for "B"

[case testConstructorWithReturnValueType]
import typing
class A:
    def __init__(self) -> 'A': pass
[out]
main: In member "__init__" of class "A":
main, line 3: Cannot define return type for "__init__"

[case testGlobalFunctionInitWithReturnType]
import typing
a = __init__() # type: A
b = __init__() # type: B # Fail
def __init__() -> 'A': pass
class A: pass
class B: pass
[out]
main, line 3: Incompatible types in assignment

[case testAccessingInit-skip]
from typing import Undefined, Any
class A:
    def __init__(self, a: 'A') -> None: pass
a = Undefined # type: A
a.__init__(a)  # E: Cannot access "__init__" directly
(Any(a)).__init__(a)

[case testDeepInheritanceHierarchy]
import typing
d = C() # type: D  # Fail
d = B()      # Fail
d = A()      # Fail
d = D2()     # Fail
a = D() # type: A
a = D2()
b = D() # type: B
b = D2()

class A: pass
class B(A): pass
class C(B): pass
class D(C): pass
class D2(C): pass
[out]
main, line 2: Incompatible types in assignment
main, line 3: Incompatible types in assignment
main, line 4: Incompatible types in assignment
main, line 5: Incompatible types in assignment


-- Attribute access in class body
-- ------------------------------


[case testDataAttributeRefInClassBody]
import typing
class B: pass
class A:
    x = B()
    y = x
    b = x # type: B
    b = x
    c = x # type: A # E: Incompatible types in assignment
    c = b   # E: Incompatible types in assignment
[out]
main: In class "A":

[case testMethodRefInClassBody]
from typing import Function
class B: pass
class A:
    def f(self) -> None: pass
    g = f
    h = f # type: Function[[A], None]
    h = f
    g = h
    ff = f # type: Function[[B], None]  # E: Incompatible types in assignment
    g = ff                # E: Incompatible types in assignment
[out]
main: In class "A":


-- Arbitrary statements in class body
-- ----------------------------------


[case testStatementsInClassBody]
import typing
class B: pass
class A:
    for x in [A()]:
        y = x
        y = B() # E: Incompatible types in assignment
    x = A()
    y = A()
    x = B() # E: Incompatible types in assignment
[builtins fixtures/for.py]
[out]
main: In class "A":


-- Class attributes
-- ----------------


[case testAccessMethodViaClass]
import typing
class A:
    def f(self) -> None: pass
A.f(A())
A.f(object())     # E: Argument 1 to "f" of "A" has incompatible type "object"
A.f()             # E: Too few arguments for "f" of "A"
A.f(None, None)   # E: Too many arguments for "f" of "A"

[case testAccessAttributeViaClass]
import typing
class B: pass
class A:
    x = None # type: A
a = A.x # type: A
b = A.x # type: B # E: Incompatible types in assignment

[case testAccessingUndefinedAttributeViaClass]
import typing
class A: pass
A.x # E: "A" has no attribute "x"

[case testAccessingUndefinedAttributeViaClassWithOverloadedInit]
from typing import overload
class A: 
    @overload
    def __init__(self): pass
    @overload
    def __init__(self, x): pass
A.x # E: "A" has no attribute "x"

[case testAccessMethodOfClassWithOverloadedInit]
from typing import overload, Any
class A:
    @overload
    def __init__(self) -> None: pass
    @overload
    def __init__(self, x: Any) -> None: pass
    def f(self) -> None: pass
A.f(A())
A.f()    # E: Too few arguments for "f" of "A"

[case testAssignmentToClassDataAttribute]
import typing
class B: pass
class A:
    x = None # type: B
A.x = B()
A.x = object()  # E: Incompatible types in assignment

[case testAssignmentToInferredClassDataAttribute]
import typing
class B: pass
class A:
     x = B()
A.x = B()
A.x = A()   # E: Incompatible types in assignment

[case testInitMethodUnbound]
from typing import Undefined
class B: pass
class A:
    def __init__(self, b: B) -> None: pass
a = Undefined # type: A
b = Undefined # type: B
A.__init__(a, b)
A.__init__(b, b) # E: Argument 1 to "__init__" of "A" has incompatible type "B"
A.__init__(a, a) # E: Argument 2 to "__init__" of "A" has incompatible type "A"

[case testAssignToMethodViaClass]
import typing
class A:
    def f(self): pass
A.f = None # E: Cannot assign to a method

[case testAssignToNestedClassViaClass]
import typing
class A:
    class B: pass
A.B = None # E: Cannot assign to a type




[case testClassWithinFunction]
from typing import Undefined
def f() -> None:
    class A:
        def g(self) -> None: pass
    a = Undefined # type: A
    a.g()
    a.g(a) # E: Too many arguments for "g" of "A"
[out]
main: In function "f":

[case testConstructNestedClass]
import typing
class A:
    class B: pass
    b = B()
    b = A() # E: Incompatible types in assignment
    b = B(b) # E: Too many arguments for "B"
[out]
main: In class "A":

[case testConstructNestedClassWithCustomInit]
import typing
class A:
    def f(self) -> None:
        class B:
            def __init__(self, a: 'A') -> None: pass
        b = B(A())
        b = A() # E: Incompatible types in assignment
        b = B() # E: Too few arguments for "B"
[out]
main: In member "f" of class "A":

[case testDeclareVariableWithNestedClassType]
from typing import Undefined
def f() -> None:
    class A: pass
    a = Undefined # type: A
    a = A()
    a = object() # E: Incompatible types in assignment
[out]
main: In function "f":

[case testExternalReferenceToClassWithinClass]
from typing import Undefined
class A:
    class B: pass
b = Undefined # type: A.B
b = A.B()
b = A() # E: Incompatible types in assignment
b = A.B(b) # E: Too many arguments for "B"




[case testMultipleClassDefinition]
import typing
A()
class A: pass
class A: pass
[out]
main, line 4: Name 'A' already defined

[case testDocstringInClass]
import typing
class A:
    """Foo"""
class B:
    'x'
    y = B()
[builtins fixtures/primitives.py]

[case testErrorMessageInFunctionNestedWithinMethod]
import typing
class A:
    def f(self) -> None:
        def g() -> None:
            a = None
        b = None
[out]
main: In function "g":
main, line 5: Need type annotation for variable
main: In member "f" of class "A":
main, line 6: Need type annotation for variable


-- TODO
--   attribute inherited from superclass; assign in __init__
--   refer to attribute before type has been inferred (the initialization in
--   __init__ has not been analysed)

