-- Test cases for the type checker related to subtyping and inheritance with
-- generics.


-- Subtyping + inheritance
-- -----------------------


[case testSubtypingAndInheritingNonGenericTypeFromGenericType]
from typing import Undefined, typevar, Generic
T = typevar('T')
ac = Undefined # type: A[C]
ad = Undefined # type: A[D]
b = Undefined # type: B

b = ad # E: Incompatible types in assignment
ad = b # E: Incompatible types in assignment
b = ac # E: Incompatible types in assignment

b = b
ac = b

class C: pass
class A(Generic[T]): pass
class B(A[C]): pass
class D: pass

[case testSubtypingAndInheritingGenericTypeFromNonGenericType]
from typing import Undefined, typevar, Generic
T = typevar('T')
a = Undefined # type: A
bc = Undefined # type: B[C]
bd = Undefined # type: B[D]

bc = bd # E: Incompatible types in assignment
bd = bc # E: Incompatible types in assignment
bc = a  # E: Incompatible types in assignment
bd = a  # E: Incompatible types in assignment

a = bc
a = bd

class A: pass
class B(A, Generic[T]): pass
class C: pass
class D: pass

[case testSubtypingAndInheritingGenericTypeFromGenericType]
from typing import Undefined, typevar, Generic
T = typevar('T')
S = typevar('S')
ac = Undefined # type: A[C]
ad = Undefined # type: A[D]
bcc = Undefined # type: B[C, C]
bdc = Undefined # type: B[D, C]

ad = bcc # E: Incompatible types in assignment
ad = bdc # E: Incompatible types in assignment
bcc = ac # E: Incompatible types in assignment
bdc = ac # E: Incompatible types in assignment

bcc = bcc
bdc = bdc
ac = bcc
ac = bdc

class A(Generic[T]): pass
class B(A[S], Generic[T, S]): pass
class C: pass
class D: pass

[case testSubtypingAndInheritingGenericTypeFromGenericTypeAcrossHierarchy]
from typing import Undefined, typevar, Generic
T = typevar('T')
S = typevar('S')
X = typevar('X')
Y = typevar('Y')
ae = Undefined # type: A[A[E]]
af = Undefined # type: A[A[F]]

cef = Undefined # type: C[E, F]
cff = Undefined # type: C[F, F]
cfe = Undefined # type: C[F, E]

ae = cef # E: Incompatible types in assignment
af = cfe # E: Incompatible types in assignment

ae = cfe
af = cef
af = cff

class A(Generic[T]): pass
class B(A[S], Generic[T, S]): pass
class C(B[A[X], A[Y]], Generic[X, Y]): pass
class E: pass
class F: pass

[case testIncludingBaseClassTwice]
from typing import typevar, Generic
t = typevar('t')
class I(Generic[t]): pass
class A(I[C], I[object]): pass # E: Duplicate base class "I"
class C: pass


-- Accessing inherited generic members
-- -----------------------------------


[case testAccessingMethodInheritedFromGenericType]
from typing import Undefined, typevar, Generic
T = typevar('T')
S = typevar('S')
b = Undefined # type: B[C, D]
c, d = Undefined, Undefined # type: (C, D)

b.f(c) # E: Argument 1 to "f" of "A" has incompatible type "C"
b.f(d)

class A(Generic[T]):
    def f(self, a: T) -> None:
        pass
class B(A[S], Generic[T, S]): pass
class C: pass
class D: pass

[case testAccessingMethodInheritedFromGenericTypeInNonGenericType]
from typing import Undefined, typevar, Generic
T = typevar('T')
b, c, d = Undefined, Undefined, Undefined # type: (B, C, D)

b.f(c) # E: Argument 1 to "f" of "A" has incompatible type "C"
b.f(d)

class C: pass
class D: pass
class A(Generic[T]):
    def f(self, a: T) -> None:
        pass
class B(A[D]): pass

[case testAccessingMemberVarInheritedFromGenericType]
from typing import typevar, Generic, Undefined
T = typevar('T')
S = typevar('S')
class A(Generic[T]):
    def __init__(self, a: T) -> None:
        self.a = a
        
b = Undefined # type: B[C, D]
c, d = Undefined, Undefined # type: (C, D)

b.a = c # E: Incompatible types in assignment
b.a = d

class B(A[S], Generic[T, S]): pass
class C: pass
class D: pass


-- Overriding with generic types
-- -----------------------------


[case testOverridingMethodInSimpleTypeInheritingGenericType]
from typing import typevar, Generic
T = typevar('T')
class B(Generic[T]):
    def f(self, a: T) -> None: pass
    def g(self, a: T) -> None: pass
class C: pass
class D: pass
class A(B[C]):
    def f(self, a: D) -> None: pass \
        # E: Argument 1 of "f" incompatible with supertype "B"
    def g(self, a: C) -> None: pass
[out]
main: In class "A":

[case testOverridingMethodInGenericTypeInheritingSimpleType]
from typing import typevar, Generic
T = typevar('T')
class C: pass
class B:
    def f(self, a: C) -> None: pass
    def g(self, a: C) -> None: pass
class A(B, Generic[T]):
    def f(self, a: T) -> None: pass \
        # E: Argument 1 of "f" incompatible with supertype "B"
    def g(self, a: 'C') -> None: pass
[out]
main: In class "A":

[case testOverridingMethodInGenericTypeInheritingGenericType]
from typing import typevar, Generic
T = typevar('T')
S = typevar('S')
class B(Generic[T]):
    def f(self, a: T) -> None: pass
    def g(self, a: T) -> None: pass
class A(B[S], Generic[T, S]):
    def f(self, a: T) -> None: pass \
        # E: Argument 1 of "f" incompatible with supertype "B"
    def g(self, a: S) -> None: pass
[out]
main: In class "A":

[case testOverridingMethodInMultilevelHierarchyOfGenericTypes]
from typing import typevar, Generic
T = typevar('T')
S = typevar('S')
U = typevar('U')
V = typevar('V')

class D: pass
class C(Generic[T, U, V]):
    def f(self, a: V) -> None: pass
    def g(self, a: V) -> None: pass
class B(C[D, D, T], Generic[T]): pass
class A(B[S], Generic[T, S]):
    def f(self, a: T) -> None: pass \
        # E: Argument 1 of "f" incompatible with supertype "C"
    def g(self, a: S) -> None: pass
[out]
main: In class "A":


-- Inheritance from generic types with implicit dynamic supertype
-- --------------------------------------------------------------


[case testInheritanceFromGenericWithImplicitDynamicAndSubtyping]
from typing import Undefined, typevar, Generic
T = typevar('T')
a = Undefined # type: A
bc = Undefined # type: B[C]
bd = Undefined # type: B[D]

a = bc # E: Incompatible types in assignment
bc = a
bd = a

class B(Generic[T]): pass
class A(B): pass
class C: pass
class D: pass
[out]

[case testInheritanceFromGenericWithImplicitDynamicAndExternalAccess]
from typing import Undefined, typevar, Generic
T = typevar('T')

class B(Generic[T]):
    def f(self, a: 'B[T]') -> None: pass
    def __init__(self, x: 'B[T]') -> None:
        self.x = x
class A(B): pass
class C: pass

a = Undefined # type: A
c = Undefined # type: C
bc = Undefined # type: B[C]

a.x = c # E: Incompatible types in assignment
a.f(c)  # E: Argument 1 to "f" of "B" has incompatible type "C"
a.x = bc
a.f(bc)
[out]

[case testInheritanceFromGenericWithImplicitDynamicAndDirectAccess]
from typing import Undefined, typevar, Generic
T = typevar('T')
a = Undefined # type: A
c = Undefined # type: C
bc = Undefined # type: B[C]

class B(Generic[T]):
  def f(self, a: 'B[T]') -> None: pass
  def __init__(self, x: 'B[T]') -> None:
    self.x = x
    
class A(B):
  def g(self) -> None:
    self.x = c # E: Incompatible types in assignment
    self.f(c)  # E: Argument 1 to "f" of "B" has incompatible type "C"
    self.x = bc
    self.f(bc)

class C: pass
[out]
main: In member "g" of class "A":

[case testInheritanceFromGenericWithImplicitDynamicAndOverriding]
from typing import typevar, Generic, Tuple
T = typevar('T')
class B(Generic[T]):
    def f(self, a: T, b: 'Tuple[T, B[T]]') -> None:
        pass
class A(B):
    def f(self, a, b): pass
[builtins fixtures/tuple.py]
[out]


-- Inheritance from generic types and super expressions
-- ----------------------------------------------------


[case testSuperExpressionsWhenInheritingFromGenericType]
from typing import typevar, Generic
T = typevar('T')
S = typevar('S')
class B(Generic[T]):
    def f(self, a: T) -> None: pass
class A(B[S], Generic[T, S]):
    def g(self, t: T, s: S) -> None:
        super().f(t)   # E: Argument 1 to "f" of "B" has incompatible type "T"
        super().f(s)
[out]
main: In member "g" of class "A":

[case testSuperExpressionsWhenInheritingFromGenericTypeAndDeepHierarchy]
from typing import typevar, Generic
T = typevar('T')
S = typevar('S')
U = typevar('U')
V = typevar('V')
class C(Generic[T, U, V]):
    def f(self, a: V) -> None: pass
class D: pass
class B(C[D, D, T], Generic[T]): pass
class A(B[S], Generic[T, S]):
    def g(self, t: T, s: S) -> None:
        super().f(t)   # E: Argument 1 to "f" of "C" has incompatible type "T"
        super().f(s)
[out]
main: In member "g" of class "A":


-- Subtyping with a generic abstract base class
-- --------------------------------------------


[case testSubtypingWithGenericTypeSubclassingGenericAbstractClass]
from typing import Undefined, typevar, Generic, AbstractGeneric
from abc import abstractmethod
T = typevar('T')
S = typevar('S')
acd = Undefined # type: A[C, D]
adc = Undefined # type: A[D, C]
ic = Undefined # type: I[C]
id = Undefined # type: I[D]

ic = acd # E: Incompatible types in assignment
id = adc # E: Incompatible types in assignment
adc = ic # E: Incompatible types in assignment

ic = adc
id = acd

class I(AbstractGeneric[T]):
    @abstractmethod
    def f(self): pass
class A(I[S], AbstractGeneric[T, S]): pass
class C: pass
class D: pass

[case testSubtypingWithTypeImplementingGenericABCViaInheritance]
from typing import Undefined, typevar, AbstractGeneric
S = typevar('S')
a, b = Undefined, Undefined # type: (A, B)
ic, id, ie = Undefined, Undefined, Undefined # type: (I[C], I[D], I[E])

class I(AbstractGeneric[S]): pass
class B(I[C]): pass
class A(B): pass

ie = a # E: Incompatible types in assignment
a = ic # E: Incompatible types in assignment
a = id # E: Incompatible types in assignment
a = b  # E: Incompatible types in assignment
id = a # E: Incompatible types in assignment

ic = a
b = a

class C: pass
class D: pass
class E: pass
[out]

[case testSubtypingWithTypeImplementingGenericABCViaInheritance2-skip]
from typing import typevar, AbstractGeneric
T = typevar('T')
class I(AbstractGeneric[T]): pass
class A(I[C]): pass
class B(A, I[D]): pass # Fail

class C: pass
class D: pass
[out]
main: In class "B":
main, line 5: Class "B" has base "I" duplicated inconsistently

[case testSubtypingAndABCExtension]
from typing import Undefined, typevar, AbstractGeneric, Generic
from abc import abstractmethod, ABCMeta
t = typevar('t')
a, i, j = Undefined, Undefined, Undefined # type: (A[object], I[object], J[object])
i = a
j = a
j = i
a = i # E: Incompatible types in assignment
a = j # E: Incompatible types in assignment

class J(AbstractGeneric[t]): pass
class X(metaclass=ABCMeta): pass
class I(X, J[t], AbstractGeneric[t]): pass
class A(I[t], AbstractGeneric[t]): pass


-- Subclassing a generic ABC
-- -------------------------


[case testSubclassingGenericABC1]
from typing import typevar, AbstractGeneric
from abc import abstractmethod
T = typevar('T')
class I(AbstractGeneric[T]):
    @abstractmethod
    def f(self, a: T) -> None: pass
    @abstractmethod
    def g(self, a: T) -> None: pass
class A(I[C]):
    def f(self, a: 'D') -> None: pass \
        # E: Argument 1 of "f" incompatible with supertype "I"
    def g(self, a: 'C') -> None: pass
class C: pass
class D: pass
[out]
main: In class "A":


-- Extending a generic ABC with deep type hierarchy
-- ------------------------------------------------


[case testSubclassingGenenericABCWithDeepHierarchy]
from typing import Undefined, Any, typevar, AbstractGeneric
from abc import abstractmethod
T = typevar('T')
a = Undefined # type: A
ic, id = Undefined, Undefined # type: (I[C], I[D])

id = a # Fail
ic = a

class I(AbstractGeneric[T]):
    @abstractmethod
    def f(self, a: T, b: T) -> None: pass
    @abstractmethod
    def g(self, a: T, b: 'D') -> None: pass
class B(I[C]):
    def f(self, a: 'C', b: 'C') -> None: pass
    def g(self, a: 'C', b: Any) -> None: pass
class A(B):
    def g(self, a: 'C', b: 'C') -> None: pass \
        # E: Argument 2 of "g" incompatible with supertype "I"
    def f(self, a: 'C', b: 'C') -> None: pass
class C: pass
class D: pass
[out]
main, line 7: Incompatible types in assignment
main: In class "A":

[case testSubclassingGenenericABCWithDeepHierarchy2]
from typing import Any, typevar, AbstractGeneric
from abc import abstractmethod
T = typevar('T')
class I(AbstractGeneric[T]):
    @abstractmethod
    def f(self, a: T, b: T) -> None: pass
class B(I[C]):
    def f(self, a: 'C', b: Any) -> None: pass
class A(B):
    def f(self, a: 'C', b: 'D') -> None: pass \
        # E: Argument 2 of "f" incompatible with supertype "I"
class C: pass
class D: pass
[out]
main: In class "A":


-- Implicit Any types and subclassing generic ABC
-- ----------------------------------------------


[case testSubclassingGenericABCWithImplicitAny]
from typing import Undefined, Any, typevar, AbstractGeneric
from abc import abstractmethod
T = typevar('T')
a = Undefined # type: Any
ic = Undefined # type: I[C]
id = Undefined # type: I[D]

ic = a
id = a

class I(AbstractGeneric[T]):
    @abstractmethod
    def f(self, a: T) -> None: pass
class A(I):
    def f(self, a): pass

class C: pass
class D: pass

[case testSubclassingGenericABCWithImplicitAnyAndDeepHierarchy]
from typing import Undefined, Any, typevar, AbstractGeneric
from abc import abstractmethod
T = typevar('T')
a = Undefined # type: Any
ic = Undefined # type: I[C]
id = Undefined # type: I[D]

ic = a
id = a

class I(AbstractGeneric[T]):
    @abstractmethod
    def f(self, a: T, b: T) -> None: pass
class B(I):
    def f(self, a, b): pass
class A(B):
    def f(self, a: 'C', b: 'D') -> None: pass
class C: pass
class D: pass

[case testImplementingGenericABCWithImplicitAnyAndDeepHierarchy2]
from typing import Undefined, Any, typevar, AbstractGeneric
from abc import abstractmethod
T = typevar('T')
a = Undefined # type: Any
jc = Undefined # type: J[C]
jd = Undefined # type: J[D]

jc = a
jd = a

class J(AbstractGeneric[T]):
    @abstractmethod
    def f(self, a: T, b: T) -> None: pass
class I(J):
    @abstractmethod
    def f(self, a, b): pass
class A(I):
    def f(self, a: 'C', b: 'D') -> None: pass

class C: pass
class D: pass


-- Accessing generic ABC members
-- -----------------------------


[case testAccessingGenericABCMembers]
from typing import Undefined, typevar, AbstractGeneric
from abc import abstractmethod
T = typevar('T')
class I(AbstractGeneric[T]):
    @abstractmethod
    def f(self, a: T) -> None: pass
class A: pass
class B: pass

a, b = Undefined, Undefined # type: (A, B)
ia = Undefined # type: I[A]

ia.f(b)  # E: Argument 1 to "f" of "I" has incompatible type "B"
ia.f(a)

[case testAccessingInheritedGenericABCMembers]
from typing import Undefined, typevar, AbstractGeneric
from abc import abstractmethod
T = typevar('T')
class J(AbstractGeneric[T]):
    @abstractmethod
    def f(self, a: T) -> None: pass
class I(J[T], AbstractGeneric[T]): pass
class A: pass
class B: pass
a, b = Undefined, Undefined # type: (A, B)
ia = Undefined # type: I[A]

ia.f(b)  # E: Argument 1 to "f" of "J" has incompatible type "B"
ia.f(a)
