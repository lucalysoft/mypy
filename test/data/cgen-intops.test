-- Integer operation test cases for the C back end. 
--
-- See comment on top of cgen-basic.test for more information.

[case testIntUnaryMinus]
void p(int n):
    print(-n)
p(0)  # 0
p(3)  # -3
p(-1) # 1

[case testIntPlus]
void p(int x, int y):
    print(x + y)
p(0, 0)   # 0
p(1, 2)   # 3
p(-1, -2) # -3
p(-2, 3)  # 1
p(3, -4)  # -1

[case testIntMinus]
void p(int x, int y):
    print(x - y)
p(0, 0)   # 0
p(3, 1)   # 2
p(-1, -4) # 3
p(-2, 3)  # -5
p(3, -4)  # 7

[case testIntMul]
void p(int x, int y):
    print(x * y)
p(0, 0)   # 0
p(2, 1)   # 2
p(3, 5)   # 15
# Negative operands currently not supported

[case testIntDiv]
void p(int x, int y):
    print(x // y)
p(0, 1)   # 0
p(7, 8)   # 0
p(8, 8)   # 1
p(2, 1)   # 2
p(5, 3)   # 1
p(12, 2)  # 6
p(13, 2)  # 6
p(30, 4)  # 7
# Negative operands currently not supported

[case testIntMod]
void p(int x, int y):
    print(x % y)
p(0, 1)   # 0
p(1, 7)   # 1
p(6, 7)   # 6
p(7, 7)   # 0
p(8, 7)   # 1
p(37, 13) # 11
# Negative operands currently not supported

[case testBitwiseAnd]
void p(int x, int y):
    print(x & y)
p(0, 0) # 0
p(1, 0) # 0
p(2, 4) # 0
p(1, 1) # 1
p(3, 6) # 2
p(3, 3) # 3
p(-1, -1) # -1
p(-13, 47) # 35

[case testBitwiseOr]
void p(int x, int y):
    print(x | y)
p(0, 0) # 0
p(1, 0) # 1
p(2, 4) # 6
p(1, 1) # 1
p(3, 6) # 7
p(3, 3) # 3
p(-13, 47) # -1

[case testBitwiseXor]
void p(int x, int y):
    print(x ^ y)
p(0, 0) # 0
p(1, 0) # 1
p(2, 4) # 6
p(1, 1) # 0
p(3, 6) # 5
p(3, 3) # 0
p(-13, 47) # -36

[case testIntShiftLeft]
void p(int x, int y):
    print(x << y)
p(0, 0) # 0
p(1, 0) # 1
p(3, 2) # 12
p(1, 1) # 2
p(3, 6) # 192
# Negative operands currently not supported

[case testIntShiftRight]
void p(int x, int y):
    print(x >> y)
p(0, 0) # 0
p(1, 0) # 1
p(1, 1) # 0
p(2, 1) # 1
p(3, 1) # 1
p(192, 6) # 3
p(30, 2)  # 7
# Negative operands currently not supported

[case testBitwiseNegation]
void p(int x):
    print(~x)
p(0)  # -1
p(-1) # 0
p(6)  # -7
p(-5) # 4

[case testIntEq]
void eq(int x, int y):
     if x == y:
         print(1)
     else:
         print(0)
eq(0, 0)  # 1
eq(1, 1)  # 1
eq(0, 1)  # 0
eq(1, 0)  # 0
eq(-1, 1) # 0
eq(-1, 0) # 0

[case testIntNe]
void ne(int x, int y):
     if x != y:
         print(1)
     else:
         print(0)
ne(0, 0)  # 0
ne(1, 1)  # 0
ne(0, 1)  # 1
ne(1, 0)  # 1
ne(-1, 1) # 1
ne(-1, 0) # 1

[case testIntLt]
void lt(int x, int y):
     if x < y:
         print(1)
     else:
         print(0)
lt(0, 0)  # 0
lt(0, 1)  # 1
lt(1, 0)  # 0
lt(-1, 0) # 1
lt(-1, 1) # 1
lt(0, -1) # 0

[case testIntGt]
void gt(int x, int y):
     if x > y:
         print(1)
     else:
         print(0)
gt(0, 0)  # 0
gt(0, 1)  # 0
gt(1, 0)  # 1
gt(-1, 0) # 0
gt(-1, 1) # 0
gt(0, -1) # 1

[case testIntLe]
void le(int x, int y):
     if x <= y:
         print(1)
     else:
         print(0)
le(0, 0)   # 1
le(0, 1)   # 1
le(1, 0)   # 0
le(-1, 0)  # 1
le(-1, -1) # 1
le(-1, 1)  # 1
le(0, -1)  # 0

[case testIntGe]
void ge(int x, int y):
     if x >= y:
         print(1)
     else:
         print(0)
ge(0, 0)   # 1
ge(0, 1)   # 0
ge(1, 0)   # 1
ge(-1, 0)  # 0
ge(-1, -1) # 1
ge(-1, 1)  # 0
ge(0, -1)  # 1
