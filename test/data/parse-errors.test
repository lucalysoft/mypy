-- Test cases for parser errors. Each test case consists of two sections.
-- The first section contains [case NAME] followed by the input code, while
-- the second section contains [out] followed by the output from the parser.
--
-- The input file name in errors is "file".
--
-- Comments starting with "--" in this file will be ignored, except for lines
-- starting with "----" that are not ignored. The first two dashes of these
-- lines are interpreted as escapes and removed.

[case testInvalidFunction]
def f()
  pass
[out]
file: In function "f":
file, line 1: Parse error before end of line
file: At top level:
file, line 2: Inconsistent indentation

[case testMissingIndent]
if x:
1
[out]
file, line 2: Expected an indented block

[case testUnexpectedIndent]
1
 2
[out]
file, line 2: Inconsistent indentation

[case testInconsistentIndent]
if x:
  1
   1
[out]
file, line 3: Inconsistent indentation

[case testInconsistentIndent]
if x:
   1
  1
[out]
file, line 3: Inconsistent indentation

[case testInvalidBinaryOp]
1>
a*
a+1*
[out]
file, line 1: Parse error before end of line
file, line 2: Parse error before end of line
file, line 3: Parse error before end of line

[case testInvalidSuperClass]
class A(C[):
  pass
[out]
file: In class "A":
file, line 1: Parse error before )
file, line 2: Parse error before end of file

[case testEmptySuperClass]
class A():
  pass
[out]
file: In class "A":
file, line 1: Parse error before )

[case testMissingSuperClass]
class A(:
  pass
[out]
file: In class "A":
file, line 1: Parse error before :
file, line 2: Parse error before end of file

[case testUnexpectedEof]
if 1:
[out]
file, line 1: Expected an indented block

[case testInvalidKeywordArguments1]
f(x=y, z)
[out]
file, line 1: Parse error before "z"

[case testInvalidKeywordArguments2]
f(**x, y=z)
[out]
file, line 1: Parse error before "y"

[case testInvalidKeywordArguments3]
f(**x, y)
[out]
file, line 1: Parse error before "y"

[case testInvalidVarArgs]
f(*x, y)
[out]
file, line 1: Parse error before "y"

[case testInvalidFuncDefArgs1]
def f(x = y, x): pass
[out]
file: In function "f":
file, line 1: Invalid argument list

[case testInvalidFuncDefArgs2]
def f(*x, y): 
    pass
[out]
file: In function "f":
file, line 1: Invalid argument list

[case testInvalidFuncDefArgs3]
def f(**x, y): 
   pass
[out]
file: In function "f":
file, line 1: Invalid argument list

[case testInvalidFuncDefArgs4]
def f(**x, y=x): 
    pass
[out]
file: In function "f":
file, line 1: Invalid argument list

[case testInvalidStringLiteralType]
def f(x: 
     'A['
     ) -> None: pass
[out]
file: In function "f":
file, line 2: Parse error before end of line
file, line 3: Parse error before end of line

[case testInvalidStringLiteralType2]
def f(x: 
      'A B'
      ) -> None: pass
[out]
file: In function "f":
file, line 2: Parse error before "B"
file, line 3: Parse error before end of line

[case testInvalidTypeComment]
0
x = 0 # type: A A
[out]
file, line 2: Parse error before "A"

[case testInvalidTypeComment2]
0
x = 0 # type: A[
[out]
file, line 2: Parse error before end of line
