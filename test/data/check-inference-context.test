

-- Basic test cases
-- ----------------


[case testBasicContextInference]
A<B> ab
A<object> ao
B b

ao = f()
ab = f()
b = f() # E: Incompatible types in assignment

A<T> f<T>(): pass

class A<T>: pass
class B: pass

[case testBasicContextInferenceForConstructor]
A<B> ab
A<object> ao
B b

ao = A()
ab = A()
b = A() # E: Incompatible types in assignment

class A<T>: pass
class B: pass

[case testIncompatibleContextInference]
B b
C c
A<B> ab
A<object> ao
A<C> ac

ac = f(b) # E: Argument 1 to "f" has incompatible type "B"
ab = f(c) # E: Argument 1 to "f" has incompatible type "C"

ao = f(b)
ab = f(b)
ao = f(c)
ac = f(c)

A<T> f<T>(T a):
    pass

class A<T>: pass

class B: pass
class C: pass


-- Local variables
-- ---------------


[case testInferGenericLocalVariableTypeWithEmptyContext]
void g():
    A<object> ao
    A<B> ab
    object o
    B b

    x = f(o)
    ab = x # E: Incompatible types in assignment
    ao = x
    y = f(b)
    ao = y # E: Incompatible types in assignment
    ab = y

A<T> f<T>(T a): pass

class A<T>: pass
class B: pass
[out]
main: In function "g":

[case testInferLocalVariableTypeWithUnderspecifiedGenericType]
void g():
    x = f() # E: Need type annotation for variable

A<T> f<T>(): pass
class A<T>: pass
[out]
main: In function "g":

[case testInferMultipleLocalVariableTypesWithTupleRvalue]
void g():
    A<object> ao
    A<B> ab
    B b
    x, y = f(b), f(b)
    ao = x # E: Incompatible types in assignment
    ao = y # E: Incompatible types in assignment
    ab = x
    ab = y

A<T> f<T>(T a): pass
class A<T>: pass
class B: pass
[out]
main: In function "g":

[case testInferMultipleLocalVariableTypesWithArrayRvalueAndNesting]
void h():
    A<object> ao
    A<B> ab
    B b
    x, y = g(f(b))
    ao = x # E: Incompatible types in assignment
    ao = y # E: Incompatible types in assignment
    ab = x
    ab = y

A<T> f<T>(T a): pass
T[] g<T>(T a): pass

class A<T>: pass
class B: pass
[builtins fixtures/list.py]
[out]
main: In function "h":


-- Return types with multiple tvar instances
-- -----------------------------------------


[case testInferenceWithTypeVariableTwiceInReturnType]
B b
object o
A<B> ab
A<object> ao

ab, ao = f(b) # Fail
ao, ab = f(b) # Fail

ao, ao = f(b)
ab, ab = f(b)
ao, ao = f(o)

tuple<A<T>, A<T>> f<T>(T a): pass

class A<T>: pass
class B: pass
[builtins fixtures/tuple.py]
[out]
main, line 6: Incompatible types in assignment
main, line 7: Incompatible types in assignment

[case testInferenceWithTypeVariableTwiceInReturnTypeAndMultipleVariables]
B b
object o
A<B> ab
A<object> ao

ao, ao, ab = f(b, b)     # Fail
ao, ab, ao = g(b, b)     # Fail
ao, ab, ab, ab = h(b, b) # Fail
ab, ab, ao, ab = h(b, b) # Fail

ao, ab, ab = f(b, b)
ab, ab, ao = g(b, b)
ab, ab, ab, ab = h(b, b)

tuple<A<S>, A<T>, A<T>> f<S, T>(S a, T b): pass
tuple<A<S>, A<S>, A<T>> g<S, T>(S a, T b): pass
tuple<A<S>, A<S>, A<T>, A<T>> h<S, T>(S a, T b): pass

class A<T>: pass
class B: pass
[builtins fixtures/tuple.py]
[out]
main, line 6: Incompatible types in assignment
main, line 7: Incompatible types in assignment
main, line 8: Incompatible types in assignment
main, line 9: Incompatible types in assignment


-- Multiple tvar instances in arguments
-- ------------------------------------


[case testMultipleTvatInstancesInArgs]
A<C> ac
A<B> ab
A<object> ao
B b
C c
object o

ab = f(b, o) # E: Argument 2 to "f" has incompatible type "object"
ab = f(o, b) # E: Argument 1 to "f" has incompatible type "object"
ac = f(b, c) # E: Argument 1 to "f" has incompatible type "B"
ac = f(c, b) # E: Argument 2 to "f" has incompatible type "B"

ao = f(b, c)
ao = f(c, b)
ab = f(c, b)

A<T> f<T>(T a, T b): pass

class A<T>: pass
class B: pass
class C(B): pass


-- Nested generic function calls
-- -----------------------------


[case testNestedGenericFunctionCall1]
A<A<B>> aab
A<A<object>> aao
A<object> ao
B b
object o

aab = f(f(o)) # E: Argument 1 to "f" has incompatible type "object"

aab = f(f(b))
aao = f(f(b))
ao = f(f(b))

A<T> f<T>(T a): pass

class A<T>: pass
class B: pass

[case testNestedGenericFunctionCall2]
A<B> ab
A<object> ao
B b
object o

ab = f(g(o)) # E: Argument 1 to "g" has incompatible type "object"

ab = f(g(b))
ao = f(g(b))

T f<T>(T a): pass

A<T> g<T>(T a): pass

class A<T>: pass
class B: pass

[case testNestedGenericFunctionCall3]
A<B> ab
A<object> ao
B b
object o

ab = f(g(o), g(b)) # E: Argument 1 to "g" has incompatible type "object"
ab = f(g(b), g(o)) # E: Argument 1 to "g" has incompatible type "object"

ab = f(g(b), g(b))
ao = f(g(b), g(o))
ao = f(g(o), g(b))

T f<T>(T a, T b):
    pass

A<T> g<T>(T a): pass

class A<T>: pass
class B: pass


-- Method calls
-- ------------


[case testMethodCallWithContextInference]
object o
B b
C c
A<object> ao
A<B> ab
A<C> ac

ab.g(f(o))        # E: Argument 1 to "f" has incompatible type "object"
ac = f(b).g(f(c)) # E: Incompatible types in assignment
ac = f(c).g(f(b)) # E: Argument 1 to "f" has incompatible type "B"

ab = f(b).g(f(c))
ab.g(f(c))

A<T> f<T>(T a): pass

class A<T>:
    A<T> g(self, A<T> a): pass

class B: pass
class C(B): pass


-- List expressions
-- ----------------


[case testEmptyListExpression]
A[] aa
object[] ao
A a

a = [] # E: Incompatible types in assignment

aa = []
ao = []

class A: pass
[builtins fixtures/list.py]

[case testSingleItemListExpressions]
A[] aa
B[] ab
object[] ao
A a
B b

aa = [b] # E: List item 1 has incompatible type "B"
ab = [a] # E: List item 1 has incompatible type "A"

aa = [a]
ab = [b]
ao = [a]
aa = [None]
ao = [None]

class A: pass
class B: pass
[builtins fixtures/list.py]

[case testMultiItemListExpressions]
A[] aa
B[] ab
object[] ao
A a
B b

ab = [b, a] # E: List item 2 has incompatible type "A"
ab = [a, b] # E: List item 1 has incompatible type "A"

aa = [a, b, a]
ao = [a, b]

class A: pass
class B(A): pass
[builtins fixtures/list.py]

[case testLocalVariableInferenceFromEmptyList]
void f():
    a = []     # E: Need type annotation for variable
    b = [None]  # E: Need type annotation for variable
    c = [B()]
    c = [object()] # E: List item 1 has incompatible type "object"
    c = [B()]
class B: pass
[builtins fixtures/list.py]
[out]
main: In function "f":

[case testNestedListExpressions]
object[][] aao
B[][] aab
B[] ab
B b
object o

aao = [[o], ab] # E: List item 2 has incompatible type B[]
aab = [[], [o]] # E: List item 1 has incompatible type "object"

aao = [[None], [b], [], [o]]
aab = [[None], [b], []]
aab = [ab, []]

class B: pass
[builtins fixtures/list.py]


-- Complex context
-- ---------------


[case testParenthesesAndContext]
object[] l = ([A()])
class A: pass
[builtins fixtures/list.py]

[case testComplexTypeInferenceWithTuple]
A<k> f<k>(tuple<k> x): pass

A<A<B>> d = f((A(),))

class A<t>: pass
class B: pass
class C: pass
class D<k, v>: pass
[builtins fixtures/list.py]


-- Dictionary literals
-- -------------------


[case testDictionaryLiteralInContext]
dict<A<B>, A<C>> d = {A()    : A<C>(), 
                      A<B>() : A()}
class A<t>: pass
class B: pass
class C: pass
[builtins fixtures/dict.py]


-- Special cases (regression tests etc.)
-- -------------------------------------


[case testInitializationWithInferredGenericType]
C<A> c = f(A()) # E: Argument 1 to "f" has incompatible type "A"

T f<T>(T x): pass
class C<T>: pass
class A: pass

[case testInferredGenericTypeAsReturnValue]
A<B> t():
    return f(D()) # E: Argument 1 to "f" has incompatible type "D"
    return A()
    return f(C())

A<T> f<T>(T a): pass
class A<T>: pass
class B: pass
class C(B): pass
class D: pass
[out]
main: In function "t":

[case testIntersectionWithInferredGenericArgument]
f(A())

void f(A<B> x): pass
void f(B x): pass
class A<T>: pass
class B: pass

[case testInferenceWithInterfaceContext]
I<B> x = A()
I<B> y = A<object>() # E: Incompatible types in assignment

class A<t>(I<t>): pass
interface I<t>: pass
class B: pass

[case testInferenceWithInterfaceContext2]
A<B> a = f(A())
aa = f(A<B>())
A<t> f<t>(I<t> i): pass
class A<t>(I<t>): 
    pass
interface I<t>: 
    pass
class B: pass

[case testInferenceWithInterfaceContext3]
bool b
l = set([b])
#l = set<bool>([])
#l = set<object>([]) # Incompatible types in assignment
class set<t>:
    void __init__(self, Iterable<t> iterable): pass
[builtins fixtures/for.py]

[case testInferenceWithInterfaceContext4]
bool b
l = f([b])
l = f<bool>([])
l = f<object>([]) # E: Incompatible types in assignment
class set<t>: pass
set<t> f<t>(Iterable<t> iterable): pass
[builtins fixtures/for.py]


-- Infer generic type in 'any' context
-- -----------------------------------


[case testInferGenericTypeInAnyContext]
any x = []
any y = C()
class C<s, t>: pass
[builtins fixtures/list.py]


-- Lambdas
-- -------


[case testInferLambdaArgumentTypeUsingContext]
func<A(B)> f
f = lambda x: x.o
f = lambda x: x.x # E: "B" has no member "x"
class A: pass
class B:
  A o

[case testInferLambdaReturnTypeUsingContext]
func<A[]()> f
f = lambda: []
f = lambda: [B()]  # E: List item 1 has incompatible type "B"
class A: pass
class B: pass
[builtins fixtures/list.py]

[case testInferLambdaAsGenericFunctionArgument]
void f<t>(t[] a, func<any(t)> fn): pass
f(<A> [], lambda a: a.x)
class A:
  A x
[builtins fixtures/list.py]

[case testLambdaTypeInferenceWithExplicitArgumentType]
func<A[](A)> f
f = lambda A x: []
f = lambda A x: [B()]  # E: List item 1 has incompatible type "B"
class A: pass
class B: pass
[builtins fixtures/list.py]

[case testInvalidContextForLambda]
func<A()> f = lambda x: A()
func<A(A)> f2 = lambda: A()
class A: pass
[out]
main, line 1: Cannot infer type of lambda
main, line 1: Incompatible types in assignment
main, line 2: Cannot infer type of lambda
main, line 2: Incompatible types in assignment


-- Overloads + generic functions
-- -----------------------------


[case testMapWithOverloadedFunc]
s[] map<t, s>(func<s(t)> f, t[] seq): pass

B s(object o): pass
B s(A o, any x=None): pass

class A: pass
class B: pass

m = map(s, [A()])
B[] b = m
A[] a = m # E: Incompatible types in assignment
[builtins fixtures/list.py]


-- Special cases
-- -------------


[case testSomeTypeVarsInferredFromContext]
# Some type variables can be inferred using context, but not all of them.
A[] a
a = f(A(), B())
a = f(B(), B()) # E: Argument 1 to "f" has incompatible type "B"
s[] f<t, s>(s a, t b): pass
class A: pass
class B: pass
[builtins fixtures/list.py]

[case testSomeTypeVarsInferredFromContext2]
# Like testSomeTypeVarsInferredFromContext, but tvars in different order.
A[] a
a = f(A(), B())
a = f(B(), B()) # E: Argument 1 to "f" has incompatible type "B"
s[] f<s, t>(s a, t b): pass
class A: pass
class B: pass
[builtins fixtures/list.py]
