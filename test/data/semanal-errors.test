[case testPropagatingParseErrors]
in 1
def f():
  1 1
[out]
main, line 1: Parse error before in
main: In function "f":
main, line 3: Parse error before numeric literal

[case testUndefinedVariableInGlobalStatement]
import typing
x
y
[out]
main, line 2: Name 'x' is not defined
main, line 3: Name 'y' is not defined

[case testUndefinedVariableWithinFunctionContext]
import typing
def f():
  x
y
[out]
main: In function "f":
main, line 3: Name 'x' is not defined
main: At top level:
main, line 4: Name 'y' is not defined

[case testMethodScope]
import typing
class A:
  def f(self): pass
f
[out]
main, line 4: Name 'f' is not defined

[case testMethodScope2]
import typing
class A:
  def f(self): pass
class B:
  def g(self):
    f # error
    g # error
[out]
main: In function "g":
main, line 6: Name 'f' is not defined
main, line 7: Name 'g' is not defined

[case testInvalidType]
import typing
x = None # type: X
[out]
main, line 2: Name 'X' is not defined

[case testInvalidGenericArg]
from typing import typevar, Generic
t = typevar('t')
class A(Generic[t]): pass
x = 0 # type: A[y]
[out]
main, line 4: Name 'y' is not defined

[case testInvalidNumberOfGenericArgs]
from typing import typevar, Generic
t = typevar('t')
class A: pass
class B(Generic[t]): pass
x = 0 # type: B[A, A]
y = 0 # type: A[A]
[out]
main, line 5: "B" expects 1 type argument, but 2 given
main, line 6: "A" expects no type arguments, but 1 given

[case testVarOrFuncAsType]
import typing
def f(): pass
x = 1
y = 0 # type: f
z = 0 # type: x
[out]
main, line 4: Invalid type "__main__.f"
main, line 5: Invalid type "__main__.x"

[case testGlobalVarRedefinition]
import typing
class A: pass
x = 0 # type: A
x = 0 # type: A
[out]
main, line 4: Name 'x' already defined

[case testLocalVarRedefinition]
import typing
class A: pass
def f():
  x = 0 # type: A
  x = 0 # type: A
[out]
main: In function "f":
main, line 5: Name 'x' already defined

[case testClassVarRedefinition]
import typing
class A:
  x = 0 # type: object
  x = 0 # type: object
[out]
main, line 4: Name 'x' already defined

[case testMultipleClassDefinitions]
import typing
class A: pass
class A: pass
[out]
main, line 3: Name 'A' already defined

[case testMultipleMixedDefinitions]
import typing
x = 1
def x(): pass
class x: pass
[out]
main, line 3: Name 'x' already defined
main, line 4: Name 'x' already defined

[case testNameNotImported]
import typing
from m import y
x
[file m.py]
x = y = 1
[out]
main, line 3: Name 'x' is not defined

[case testMissingNameInImportFrom]
import typing
from m import y
[file m.py]
x = 1
[out]
main, line 2: Module has no attribute 'y'

[case testMissingModule]
import typing
import m
[out]
main, line 2: No module named 'm'

[case testMissingModule2]
import typing
from m import x
[out]
main, line 2: No module named 'm'

[case testMissingModule2]
import typing
from m import *
[out]
main, line 2: No module named 'm'

[case testModuleNotImported]
import typing
import _m
_n.x
[file _m.py]
import _n
[file _n.py]
x = 1
[out]
main, line 3: Name '_n' is not defined

[case testImportAsteriskPlusUnderscore]
import typing
from _m import *
_x
__x__
[file _m.py]
_x = __x__ = 1
[out]
main, line 3: Name '_x' is not defined
main, line 4: Name '__x__' is not defined

[case testUndefinedTypeWithQualifiedName]
import typing
import m
def f() -> m.c: pass
def g() -> n.c: pass
[file m.py]
[out]
main: In function "f":
main, line 3: Name 'm.c' is not defined
main: In function "g":
main, line 4: Name 'n' is not defined

[case testMissingPackage]
import typing
import m.n
[out]
main, line 2: No module named 'm.n'

[case testMissingPackage]
import typing
from m.n import x
from a.b import *
[out]
main, line 2: No module named 'm.n'
main, line 3: No module named 'a.b'

[case testErrorInImportedModule]
import m
[file m.py]
import typing
x = y
[out]
In module imported in main, line 1:
tmp/m.py, line 2: Name 'y' is not defined

[case testErrorInImportedModule2]
import m.n
[file m/__init__.py]
[file m/n.py]
import k
[file k.py]
import typing
x = y
[out]
In module imported in tmp/m/n.py, line 1,
                   in main, line 1:
tmp/k.py, line 2: Name 'y' is not defined

[case testPackageWithoutInitFile]
import typing
import m.n
m.n.x
[file m/n.py]
x = 1
[out]
main, line 2: No module named 'm.n'

[case testBreakOutsideLoop]
break
def f():
  break
[out]
main, line 1: 'break' outside loop
main: In function "f":
main, line 3: 'break' outside loop

[case testContinueOutsideLoop]
continue
def f():
  continue
[out]
main, line 1: 'continue' outside loop
main: In function "f":
main, line 3: 'continue' outside loop

[case testReturnOutsideFunction]
def f(): pass
return
return 1
[out]
main, line 2: 'return' outside function
main, line 3: 'return' outside function

[case testYieldOutsideFunction]
yield 1
yield
[out]
main, line 1: 'yield' outside function
main, line 2: 'yield' outside function

[case testInvalidLvalues]
1 = 1
(1) = 1
(1, 1) = 1
[1, 1] = 1
[out]
main, line 1: Invalid assignment target
main, line 2: Invalid assignment target
main, line 3: Invalid assignment target
main, line 4: Invalid assignment target

[case testInvalidLvalues2]
x = y = z = 1
x, (y, z) = 1
x, [y, z] = 1
x, (y) = 1 # ok
[out]
main, line 2: Invalid assignment target
main, line 3: Invalid assignment target

[case testInvalidLvalues3]
x = 1
x + x = 1
-x = 1
1.1 = 1
'x' = 1
x() = 1
[out]
main, line 2: Invalid assignment target
main, line 3: Invalid assignment target
main, line 4: Invalid assignment target
main, line 5: Invalid assignment target
main, line 6: Invalid assignment target

[case testInvalidDel]
import typing
x = 1
del x # not supported yet
del x.y # not supported
del x + 1
[out]
main, line 3: Invalid delete target
main, line 4: Invalid delete target
main, line 5: Invalid delete target

[case testFunctionTvarScope]
from typing import typevar
t = typevar('t')
def f(x: t) -> t: pass
x = 0 # type: t
[out]
main, line 4: Invalid type "__main__.t"

[case testClassTvarScope]
from typing import Generic, typevar
t = typevar('t')
class c(Generic[t]): pass
x = 0 # type: t
[out]
main, line 4: Invalid type "__main__.t"

[case testExpressionRefersToTypeVariable]
from typing import typevar, Generic
t = typevar('t')
class c(Generic[t]):
    def f(self): x = t
def f(y: t): x = t
[out]
main: In function "f":
main, line 4: 't' is a type variable and only valid in type context
main, line 5: 't' is a type variable and only valid in type context

[case testMissingSelf]
import typing
class A:
  def f(): pass
[out]
main, line 3: Method must have at least one argument

[case testInvalidBaseClass]
import typing
class A(B): pass
[out]
main, line 2: Name 'B' is not defined

[case testSuperOutsideClass]
class A: pass
super().x
def f(): super().y
[out]
main, line 2: "super" used outside class
main: In function "f":
main, line 3: "super" used outside class

[case testMissingSelfInMethod]
import typing
class A:
  def f() -> None: pass
  def g(): pass
[out]
main, line 3: Method must have at least one argument
main, line 4: Method must have at least one argument

[case testMultipleMethodDefinition]
import typing
class A:
  def f(self) -> None: pass
  def g(self) -> None: pass
  def f(self, x: object) -> None: pass
[out]
main, line 5: Name 'f' already defined

[case testInvalidGlobalDecl]
import typing
def f():
    global x
    x = None
[out]
main: In function "f":
main, line 4: Name 'x' is not defined

[case testNestedFunctionAndScoping]
import typing
def f(x):
    def g(y):
        z = x
    z
    y
    x
[out]
main: In function "f":
main, line 5: Name 'z' is not defined
main, line 6: Name 'y' is not defined

[case testMultipleNestedFunctionDef]
import typing
def f(x):
    def g(): pass
    x = 1
    def g(): pass
[out]
main: In function "f":
main, line 5: Name 'g' already defined

[case testRedefinedOverloadedFunction]
from typing import overload, Any
def f():
    @overload
    def p(o: object) -> None: pass # no error
    @overload
    def p(o: Any) -> None: pass    # no error
    x = 1
    def p(): pass # fail
[out]
main: In function "f":
main, line 8: Name 'p' already defined

[case testNestedFunctionInMethod]
import typing
class A:
   def f(self):
       def g():
           x
       y
[out]
main: In function "g":
main, line 5: Name 'x' is not defined
main: In function "f":
main, line 6: Name 'y' is not defined

[case testImportScope]
import typing
def f() -> None:
    import x
x.y # E: Name 'x' is not defined
[file x.py]
y = 1
[out]

[case testImportScope2]
import typing
def f() -> None:
    from x import y
    y
y # E: Name 'y' is not defined
[file x.py]
y = 1
[out]

[case testImportScope3]
import typing
def f() -> None:
    from x import *
    y
y # E: Name 'y' is not defined
[file x.py]
y = 1
[out]

[case testImportScope4]
import typing
class A:
    from x import *
    y
y # E: Name 'y' is not defined
[file x.py]
y = 1
[out]

[case testImportTwice]
import typing
from x import a, a
def f() -> None:
    from x import a
    from x import a
import x
import x # ok, since we may import multiple submodules of a package
[file x.py]
a = 1
[out]
main, line 2: Name 'a' already defined
main: In function "f":
main, line 5: Name 'a' already defined

[case testScopeOfNestedClass]
import typing
def f():
    class A: pass
    A
A # E: Name 'A' is not defined
[out]

[case testScopeOfNestedClass2]
import typing
class A:
    class B: pass
B # E: Name 'B' is not defined
[out]

[case testScopeOfNestedClass3]
import typing
class A:
    def f(self):
        class B: pass
    B # E: Name 'B' is not defined
B # E: Name 'B' is not defined
[out]

[case testInvalidNestedClassReferenceInDecl]
import typing
class A: pass
foo = 0 # type: A.x      # E: Name 'A.x' is not defined
[out]

[case testTvarScopingWithNestedClass]
from typing import typevar, Generic
t = typevar('t')
s = typevar('s')
class A(Generic[t]):
    class B(Generic[s]):
        x = 0 # type: A[s]
        y = 0 # type: A[t]        # E: Invalid type "__main__.t"
    z = 0 # type: A[s]            # E: Invalid type "__main__.s"
    a = 0 # type: A[t]
[out]

[case testTestExtendPrimitives]
class A(int): pass # E: 'int' is not a valid base class
class B(float): pass # E: 'float' is not a valid base class
class C(bool): pass # E: 'bool' is not a valid base class
class D(str): pass # ok
[builtins fixtures/primitives.py]
[out]

[case testCyclicInheritance]
class A(A): pass # E: Cycle in inheritance hierarchy
[out]

[case testAssignToFuncDef]
def f(): pass
f = None # E: Invalid assignment target
[out]

[case testAssignToFuncDefViaModule]
import m
m.f = None # E: Invalid assignment target
[file m.py]
def f(): pass
[out]

[case testAssignToFuncDefViaNestedModules]
import m.n
m.n.f = None # E: Invalid assignment target
[file m/__init__.py]
[file m/n.py]
def f(): pass
[out]

[case testAssignToFuncDefViaImport]
from m import f # E: Name 'f' already defined
f = None
[file m.py]
def f(): pass
[out]

[case testAssignToFuncDefViaImport2]
from m import * # E: Name 'f' already defined
f = None
[file m.py]
def f(): pass
[out]

[case testAssignToFuncDefViaGlobalDecl2]
import typing
from m import f
def g() -> None:
    global f
    f = None # E: Invalid assignment target
[file m.py]
def f(): pass
[out]
main: In function "g":

[case testAssignToTypeDef]
import typing
class A: pass
A = None # E: Invalid assignment target
[out]

[case testInvalidQualifiedName]
from typing import Any
x = 0 # type: Any
z = 0 # type: x.y    # E: Invalid type "__main__.x"
[out]

[case testInvalidCastTargetSyntax]
from typing import cast, typevar, Generic
t = typevar('t')
class C(Generic[t]): pass
cast(str + str, None)    # E: Cast target is not a type
cast(C[str][str], None)  # E: Cast target is not a type
cast((str).str, None)    # E: Cast target is not a type
cast(C[str + str], None) # E: Cast target is not a type
cast([int, str], None)   # E: Invalid type
[out]

[case testInvalidCastTargetType]
from typing import cast
x = 0
cast(str[str], None) # E: "str" expects no type arguments, but 1 given
cast(x, None)        # E: Invalid type "__main__.x"
cast(t, None)        # E: Name 't' is not defined
cast(__builtins__.x, None) # E: Name '__builtins__.x' is not defined
[out]

[case testInvalidNumberOfArgsToCast]
from typing import cast
cast(str) # E: 'cast' expects 2 arguments
cast(str, None, None) # E: 'cast' expects 2 arguments
[out]

[case testInvalidKindsOfArgsToCast]
from typing import cast
cast(str, *None) # E: 'cast' must be called with 2 positional arguments
cast(str, target=None) # E: 'cast' must be called with 2 positional arguments
[out]

[case testInvalidArgsToAny]
from typing import Any
Any(str, None) # E: 'Any' expects 1 argument
Any(arg=str)   # E: 'Any' must be called with 1 positional argument
[out]

[case testTypeListAsType]
def f(x:[int, str]) -> None: # E: Invalid type
    pass
[out]
main: In function "f":

[case testInvalidFunctionType]
from typing import Function
x = None # type: Function[int, str]
y = None # type: Function[int]
z = None # type: Function[int, int, int]
[out]
main, line 2: Invalid function type
main, line 3: Invalid function type
main, line 4: Invalid function type

[case testAbstractGlobalFunction]
import typing
from abc import abstractmethod
@abstractmethod
def foo(): pass
[out]
main, line 3: 'abstractmethod' used with a non-method

[case testAbstractNestedFunction]
import typing
from abc import abstractmethod
def g():
  @abstractmethod
  def foo(): pass
[out]
main: In function "g":
main, line 4: 'abstractmethod' used with a non-method

[case testInvalidTypeDeclaration]
import typing
def f(): pass
f() = 1 # type: int
[out]
main, line 3: Invalid assignment target

[case testIndexedAssignmentWithTypeDeclaration]
import typing
None[1] = 1 # type: int
[out]
main, line 2: Unexpected type declaration

[case testNonSelfMemberAssignmentWithTypeDeclaration]
import typing
None.x = 1 # type: int
[out]
main, line 2: Type cannot be declared in assignment to non-self attribute

[case testNonSelfMemberAssignmentWithTypeDeclarationInMethod]
import typing
class A:
  def f(self, x) -> None:
    x.y = 1 # type: int
[out]
main: In function "f":
main, line 4: Type cannot be declared in assignment to non-self attribute

[case testInvalidUndefined]
from typing import Undefined
y = 1
x = Undefined(Undefined) # E: Invalid type "typing.Undefined"
[out]

[case testInvalidTypeInTypeApplication]
from typing import typevar, Generic
t = typevar('t')
class A(Generic[t]): pass
A[typevar] # E: Invalid type "typing.typevar"
[out]

[case testInvalidTypeInTypeApplication2]
from typing import typevar, Generic
t = typevar('t')
class A(Generic[t]): pass
A[1] # E: Type expected within [...]
[out]

[case testVariableDeclWithInvalidNumberOfTypes]
from typing import Undefined
x, y = 1, 2 # type: int, str, int # E: Incompatible number of tuple items
[out]
