-- Test cases for intermediate representation (icode) generation.
--
-- Only functions mentioned in the [out] section are checked; others are 
-- ignored.
--
-- There is no register sharing. Each temporary value is given a new register.


-- The very basics
-- ---------------


[case testEmptyFunction]
void f(): pass
[out]
def f:
    r0 = None
    return r0

[case testReturnIntLiteral]
int f():
    return 2
[out]
def f:
    r0 = 2
    return r0
    
[case testAssignAndReturnLocalVar]
int f():
    i = 2
    return i
[out]
def f:
    r0 = 2
    return r0
    
[case testAssignTwice]
int f():
    i = 2
    i = 3
    return i
[out]
def f:
    r0 = 2
    r0 = 3
    return r0
    
[case testAssignLocalToLocal]
int f():
    i = 2
    j = i
    return j
[out]
def f:
    r0 = 2
    r1 = r0
    return r1
    
[case testFunctionArgs]
int f(int a, int b):
    c = a
    a = b
    return a
[out]
def f:
    r2 = r0
    r0 = r1
    return r0


-- Conditionals and loops
-- ----------------------


[case testSimpleWhileLoop]
void f():
    i = 0
    while i < 100:
        i = i + 1
[out]
def f:
    r0 = 0
L1:
    if r0 < 100 goto L2 else goto L3
L2:
    r0 = r0 + 1 [int]
    goto L1
L3:
    r1 = None
    return r1

[case testIfWithoutElse]
void f():
    if 2 < 3:
        i = 1
[out]
def f:
    if 2 < 3 goto L1 else goto L2
L1:
    r0 = 1
L2:
    r1 = None
    return r1

[case testIfWithElse]
void f():
    if 2 < 3:
        i = 1
    else:
        i = 2
[out]
def f:
    if 2 < 3 goto L1 else goto L2
L1:
    r0 = 1
    goto L3
L2:
    r0 = 2
L3:
    r1 = None
    return r1


-- Primitive arithmetic expressions
-- --------------------------------


[case testComplexArithmeticExpression]
int f():
    return 3 * (1 + 2) - 4
[out]
def f:
    r0 = 1 + 2 [int]
    r1 = 3 * r0 [int]
    r2 = r1 - 4 [int]
    return r2
    
[case testUnaryExpression]
int f():
    return -1 + -(4 + 5)
[out]
def f:
    r0 = 1
    r1 = -r0 [int]
    r2 = 4 + 5 [int]
    r3 = -r2 [int]
    r4 = r1 + r3 [int]
    return r4


-- Boolean expressions
-- -------------------


[case testBooleanAnd]
void f():
    if 1 == 2 and 3 > 4:
        i = 1
[out]
def f:
    if 1 == 2 goto L1 else goto L3
L1:
    if 3 > 4 goto L2 else goto L3
L2:
    r0 = 1
L3:
    r1 = None
    return r1
    
[case testBooleanOr]
void f():
    if 1 == 2 or 3 > 4:
        i = 1
[out]
def f:
    if 1 == 2 goto L2 else goto L1
L1:
    if 3 > 4 goto L2 else goto L3
L2:
    r0 = 1
L3:
    r1 = None
    return r1
    
[case testSimpleBooleanNot]
void f():
    if not 1 == 2:
        i = 1
[out]
def f:
    if 1 != 2 goto L1 else goto L2
L1:
    r0 = 1
L2:
    r1 = None
    return r1
    
[case testNotAnd]
void f():
    if not (1 == 2 and 3 == 4):
        i = 1
[out]
def f:
    if 1 != 2 goto L2 else goto L1
L1:
    if 3 != 4 goto L2 else goto L3
L2:
    r0 = 1
L3:
    r1 = None
    return r1

[case testNotOr]
void f():
    if not (1 == 2 or 3 == 4):
        i = 1
[out]
def f:
    if 1 != 2 goto L1 else goto L3
L1:
    if 3 != 4 goto L2 else goto L3
L2:
    r0 = 1
L3:
    r1 = None
    return r1


-- Calls
-- -----


[case testCallFunctionWithoutArgs]
int f():
    return f()
[out]
def f:
    r0 = f()
    return r0
    
[case testCallWithArgument]
void f(int a):
    f(a + 1)
[out]
def f:
    r1 = r0 + 1 [int]
    r2 = f(r1)
    r3 = None
    return r3

[case testCallWithArguments]
int f(int a, int b):
    return f(2, a + 1)
[out]
def f:
    r2 = 2
    r3 = r0 + 1 [int]
    r4 = f(r2, r3)
    return r4


-- Top level
-- ---------


[case testTopLevel]
f()
int f():
    return 1
f()
[out]
def __init:
    r0 = f()
    r1 = f()
    r2 = None
    return r2
def f:
    r0 = 1
    return r0


-- Print function
-- --------------


[case testPrintInt]
print(5)
[out]
def __init:
    r0 = 5
    r1 = print(r0)
    r2 = None
    return r2


-- Global variables
-- ----------------


[case testGlobalVariable]
x = 1
y = x + 1
int f():
    return y
[out]
def __init:
    r0 = 1
    __main__.x = r0
    r1 = __main__.x
    r2 = r1 + 1 [int]
    __main__.y = r2
    r3 = None
    return r3
def f:
    r0 = __main__.y
    return r0

[case testGlobalVariableInitialize]
class A: pass
n = 1
a = A()
[out]
def __init:
    r0 = None
    __main__.a = r0
    r1 = 1
    __main__.n = r1
    r2 = A()
    __main__.a = r2
    r3 = None
    return r3

[case testValueConditionalCheck]
class A: pass
void f(A a):
    if a:
        a = A()
[out]
def f:
    if r0 goto L1 else goto L2
L1:
    r0 = A()
L2:
    r1 = None
    return r1

[case testNegatedValueConditionalCheck]
class A: pass
void f(A a):
    if not a:
        a = A()
[out]
def f:
    if not r0 goto L1 else goto L2
L1:
    r0 = A()
L2:
    r1 = None
    return r1

[case testLocalWithExplicitType]
void f():
    int x = 2
    int y
    y = 3
[out]
def f:
    r0 = 2
    r1 = 3
    r2 = None
    return r2

[case testGlobalWithExplicitType]
class A: pass
int x = 2
int y
y = 3
[out]
def __init:
    r0 = 2
    __main__.x = r0
    r1 = 3
    __main__.y = r1
    r2 = None
    return r2

[case testImplicitZeroReturn]
int f(): pass
[out]
def f:
    r0 = 0
    return r0


-- Operator overloading
-- --------------------


[case testOverloadedAdd]
class A:
    int __add__(self, int x): pass
int f():
    return A() + 2
[out]
def f:
    r0 = A()
    r1 = 2
    r2 = r0.__add__(r1) [A]
    return r2

[case testOverloadedMul]
class A:
    int __mul__(self, int x): pass
int f():
    return A() * 2
[out]
def f:
    r0 = A()
    r1 = 2
    r2 = r0.__mul__(r1) [A]
    return r2

[case testOverloadedIn]
class A:
    int __contains__(self, int x): pass
int f():
    return 2 in A()
[out]
def f:
    r0 = 2
    r1 = A()
    r2 = r1.__contains__(r0) [A]
    return r2

[case testIndexedGet]
class A:
    int __getitem__(self, int x): pass
int f(A a, int n):
    return a[n]
[out]
def f:
    r2 = r0.__getitem__(r1) [A]
    return r2

    
