-- Test cases for intermediate representation (icode) generation.
--
-- Only functions mentioned in the [out] section are checked; others are 
-- ignored.
--
-- There is no register sharing. Each temporary value is given a new register.

[case testEmptyFunction]
void f(): pass
[out]
def f():
    r0 = None
    return r0

[case testReturnIntLiteral]
int f():
    return 2
[out]
def f():
    r0 = 2
    return r0
    
[case testAssignAndReturnLocalVar]
int f():
    i = 2
    return i
[out]
def f():
    r0 = 2
    r1 = r0
    return r1
    
[case testAssignTwice]
int f():
    i = 2
    i = 3
    return i
[out]
def f():
    r0 = 2
    r1 = r0
    r2 = 3
    r1 = r2
    return r1

[case testSimpleWhileLoop]
void f():
    i = 0
    while i < 100:
        i = i + 1
[out]
def f():
    r0 = 0
    r1 = r0
L1:
    r2 = 100
    if r1 < r2 goto L2 else goto L3
L2:
    r3 = 1
    r4 = r1 + r3 [int]
    r1 = r4
    goto L1
L3:
    r5 = None
    return r5

[case testCallFunctionAtTopLevel]
void f(): pass
f()
[out]
def __init():
    r0 = f()
    r1 = None
    return r1

