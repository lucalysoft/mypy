[case testEmptyFile]
[out]

[case testAssignmentAndVarDef]
from typing import Undefined
a = Undefined # type: A
b = Undefined # type: B
a = a 
a = b # Fail
class A: pass
class B: pass
[out]
main, line 5: Incompatible types in assignment

[case testConstructionAndAssignment]
from typing import Undefined
x = Undefined # type: A
x = A()
x = B()
class A: 
    def __init__(self): pass
class B:
    def __init__(self): pass
[out]
main, line 4: Incompatible types in assignment

[case testInheritInitFromObject]
from typing import Undefined
x = Undefined # type: A
x = A()
x = B()
class A(object): pass
class B(object): pass
[out]
main, line 4: Incompatible types in assignment

[case testImplicitInheritInitFromObject]
from typing import Undefined
x = Undefined # type: A
o = Undefined # type: object
x = A()
o = x
x = o # Fail
class A: pass
class B: pass
[out]
main, line 6: Incompatible types in assignment

[case testTooManyConstructorArgs]
import typing
object(object())
[out]
main, line 2: Too many arguments for "object"

[case testVarDefWithInit]
import typing
a = A() # type: A
b = object() # type: A
class A: pass
[out]
main, line 3: Incompatible types in assignment

[case testInheritanceBasedSubtyping]
import typing
x = B() # type: A
y = A() # type: B # Fail
class A: pass
class B(A): pass
[out]
main, line 3: Incompatible types in assignment


-- Simple functions and calling
-- ----------------------------


[case testFunction]
import typing
def f(x: 'A') -> None: pass
f(A())
f(B()) # Fail
class A: pass
class B: pass
[out]
main, line 4: Argument 1 to "f" has incompatible type "B"

[case testNotCallable]
import typing
A()()
class A: pass
[out]
main, line 2: "A" not callable

[case testSubtypeArgument]
import typing
def f(x: 'A', y: 'B') -> None: pass
f(B(), A()) # Fail
f(B(), B())

class A: pass
class B(A): pass
[out]
main, line 3: Argument 2 to "f" has incompatible type "A"

[case testInvalidArgumentCount]
import typing
def f(x, y) -> None: pass
f(object())
f(object(), object(), object())
[out]
main, line 3: Too few arguments for "f"
main, line 4: Too many arguments for "f"


-- Locals
-- ------


[case testLocalVariables]
from typing import Undefined
def f() -> None:
  x = Undefined # type: A
  y = Undefined # type: B
  x = x
  x = y # Fail
class A: pass
class B: pass
[out]
main: In function "f":
main, line 6: Incompatible types in assignment

[case testLocalVariableScope]
from typing import Undefined
def f() -> None:
  x = Undefined # type: A
  x = A()
def g() -> None:
  x = Undefined # type: B
  x = A() # Fail
class A: pass
class B: pass
[out]
main: In function "g":
main, line 7: Incompatible types in assignment

[case testFunctionArguments]
import typing
def f(x: 'A', y: 'B') -> None:
  x = y # Fail
  x = x
  y = B()
class A: pass
class B: pass
[out]
main: In function "f":
main, line 3: Incompatible types in assignment

[case testLocalVariableInitialization]
import typing
def f() -> None:
  a = A() # type: A
  b = B() # type: A # Fail
class A: pass
class B: pass
[out]
main: In function "f":
main, line 4: Incompatible types in assignment

[case testVariableInitializationWithSubtype]
import typing
x = B() # type: A
y = A() # type: B # Fail
class A: pass
class B(A): pass
[out]
main, line 3: Incompatible types in assignment


-- Misc
-- ----


[case testInvalidReturn]
import typing
def f() -> 'A':
  return B()
class A: pass
class B: pass
[out]
main: In function "f":
main, line 3: Incompatible return value type

[case testTopLevelContextAndInvalidReturn]
import typing
def f() -> 'A':
  return B()
a = B() # type: A
class A: pass
class B: pass
[out]
main: In function "f":
main, line 3: Incompatible return value type
main: At top level:
main, line 4: Incompatible types in assignment

[case testModule__name__]
import typing
x = __name__ # type: str
a = __name__ # type: A # TODO should be an error
class A: pass
[builtins fixtures/primitives.py]

[case testModule__doc__]
import typing
x = __doc__ # type: str
a = __doc__ # type: A # TODO should be an error
class A: pass
[builtins fixtures/primitives.py]

[case testModule__file__]
import typing
x = __file__ # type: str
a = __file__ # type: A # TODO should be an error
class A: pass
[builtins fixtures/primitives.py]


-- Scoping and shadowing
-- ---------------------


[case testLocalVariableShadowing]
from typing import Undefined
a = Undefined # type: A
a = B()       # Fail
a = A()
def f() -> None:
  a = Undefined # type: B
  a = A()     # Fail
  a = B()
a = B()       # Fail
a = A()

class A: pass
class B: pass
[out]
main, line 3: Incompatible types in assignment
main: In function "f":
main, line 7: Incompatible types in assignment
main: At top level:
main, line 9: Incompatible types in assignment

[case testGlobalDefinedInBlockWithType]
from typing import Undefined
class A: pass
while A:
    a = Undefined # type: A
    a = A()
    a = object() # E: Incompatible types in assignment


-- Using Undefined with a type argument
-- ------------------------------------


[case testDeclareGlobalUsingUndefindWithArgument]
from typing import Undefined
a = Undefined(int)
a = 1
a = '' # E: Incompatible types in assignment

[case testDeclareGlobalUsingUndefindWithAnyArgument]
from typing import Undefined, Any
a = Undefined(Any)
a = 1
a = ''
a = None

[case testDeclareLocalUsingUndefinedWithArgument]
from typing import Undefined
def f() -> None:
    a = Undefined(int)
    a = 1
    a = '' # E: Incompatible types in assignment
[out]
main: In function "f":

[case testDeclareTypeUsingUndefinedAndComment]
from typing import Undefined
x = Undefined(int) # type: str # E: Incompatible types in assignment
