-- Normal assignment and subtyping
-- -------------------------------


[case testAssignmentWithTupleTypes]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A]
t2 = Undefined # type: Tuple[B]
t3 = Undefined # type: Tuple[A, A]
t4 = Undefined # type: Tuple[A, B]
t5 = Undefined # type: Tuple[B, A]

t1 = t2 # E: Incompatible types in assignment
t1 = t3 # E: Incompatible types in assignment
t3 = t1 # E: Incompatible types in assignment
t3 = t4 # E: Incompatible types in assignment
t3 = t5 # E: Incompatible types in assignment

# Ok
t1 = t1
t2 = t2
t3 = t3
t4 = t4
t5 = t5

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testTupleSubtyping]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A, A]
t2 = Undefined # type: Tuple[A, B]
t3 = Undefined # type: Tuple[B, A]

t2 = t1  # E: Incompatible types in assignment
t2 = t3  # E: Incompatible types in assignment
t3 = t1  # E: Incompatible types in assignment
t3 = t2  # E: Incompatible types in assignment

t1 = t2
t1 = t3

class A: pass
class B(A): pass
[builtins fixtures/tuple.py]

[case testTupleCompatibilityWithOtherTypes]
from typing import Undefined, Tuple
a, o = Undefined, Undefined # type: (A, object)
t = Undefined # type: Tuple[A, A]

a = t # E: Incompatible types in assignment
t = o # E: Incompatible types in assignment
t = a # E: Incompatible types in assignment
# TODO: callable types + tuples

# Ok
o = t
t = None

class A: pass
[builtins fixtures/tuple.py]

[case testNestedTupleTypes]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A, Tuple[A, A]]
t2 = Undefined # type: Tuple[B, Tuple[B, B]]

t2 = t1 # E: Incompatible types in assignment
t1 = t2

class A: pass
class B(A): pass
[builtins fixtures/tuple.py]

[case testSubtypingWithNamedTupleType]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A, A]
t2 = Undefined # type: tuple

t1 = t2 # E: Incompatible types in assignment
t2 = t1

class A: pass
[builtins fixtures/tuple.py]

[case testTupleInitializationWithNone]
from typing import Tuple
t = None # type: Tuple[A, A]
t = None
class A: pass
[builtins fixtures/tuple.py]


-- Tuple expressions
-- -----------------


[case testTupleExpressions]
from typing import Undefined, Tuple
t1 = Undefined # type: tuple
t2 = Undefined # type: Tuple[A]
t3 = Undefined # type: Tuple[A, B]

a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)

t2 = ()        # E: Incompatible types in assignment
t2 = (a, a)    # E: Incompatible types in assignment
t3 = (a, a)    # E: Incompatible types in assignment
t3 = (b, b)    # E: Incompatible types in assignment
t3 = (a, b, a) # E: Incompatible types in assignment

t1 = ()
t1 = (a,)
t2 = (a,)
t3 = (a, b)
t3 = (a, c)
t3 = (None, None)

class A: pass
class B: pass
class C(B): pass
[builtins fixtures/tuple.py]

[case testVoidValueInTuple]
import typing
(None, f()) # E: "f" does not return a value
(f(), None) # E: "f" does not return a value

def f() -> None: pass
[builtins fixtures/tuple.py]


-- Indexing
-- --------


[case testIndexingTuples]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A, B]
t2 = Undefined # type: Tuple[A]
a, b = Undefined, Undefined # type: (A, B)
n = 0

a = t1[1] # E: Incompatible types in assignment
b = t1[0] # E: Incompatible types in assignment
t1[2]     # E: Tuple index out of range
t1[-1]    # E: Tuple index must an integer literal
t2[1]     # E: Tuple index out of range
t1[n]     # E: Tuple index must an integer literal
b = t1[(0)] # E: Incompatible types in assignment

a = t1[0]
b = t1[1]
a = t1[(0)]

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testAssigningToTupleItems]
from typing import Undefined, Tuple
t = Undefined # type: Tuple[A, B]
n = 0

t[0] = A() # E: Unsupported target for indexed assignment
t[2] = A() # E: Unsupported target for indexed assignment
t[n] = A() # E: Unsupported target for indexed assignment

class A: pass
class B: pass
[builtins fixtures/tuple.py]


-- Multiple assignment
-- -------------------


[case testMultipleAssignmentWithTuples]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A, B]
t2 = Undefined # type: Tuple[A, B, A]
a, b = Undefined, Undefined # type: (A, B)

a, a = t1 # E: Incompatible types in assignment
b, b = t1 # E: Incompatible types in assignment
a, b, b = t2 # E: Incompatible types in assignment

a, b = t1
a, b, a = t2

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testMultipleAssignmentWithInvalidNumberOfValues]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A, A, A]
a = Undefined # type: A

a, a = t1       # E: Too many values to assign
a, a, a, a = t1 # E: Need 4 values to assign

a, a, a = t1

class A: pass
[builtins fixtures/tuple.py]

[case testMultipleAssignmentWithTupleExpressionRvalue]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)

a, b = a, a # E: Incompatible types in assignment
a, b = b, a # E: Incompatible types in assignment

a, b = a, b
a, a = a, a

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testSubtypingInMultipleAssignment]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)

b, b = a, b # E: Incompatible types in assignment
b, b = b, a # E: Incompatible types in assignment

a, b = b, b
b, a = b, b

class A: pass
class B(A): pass
[builtins fixtures/tuple.py]

[case testInitializationWithMultipleValues]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)

a1, b1 = a, a # type: (A, B)  # E: Incompatible types in assignment
a2, b2 = b, b # type: (A, B)  # E: Incompatible types in assignment
a3, b3 = a # type: (A, B)     # E: Incompatible types in assignment
a4, b4 = None # type: (A, B)  # E: Incompatible types in assignment
a5, b5 = a, b, a # type: (A, B)  # E: Too many values to assign

ax, bx = a, b # type: (A, B)

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testMultipleAssignmentWithNonTupleRvalue]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
# TODO callable f

a, b = None # E: Incompatible types in assignment
a, b = a   # E: Incompatible types in assignment
#a, b = f   # Incompatible types in assignment

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testMultipleAssignmentWithIndexedLvalues]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
aa, bb = Undefined, Undefined # type: (AA, BB)

a[a], b[b] = a, bb   # E: Incompatible types in assignment
a[a], b[b] = aa, b   # E: Incompatible types in assignment
a[aa], b[b] = aa, bb # E: Invalid index type "AA" for "A"
a[a], b[bb] = aa, bb # E: Invalid index type "BB" for "B"
a[a], b[b] = aa, bb

class A:
    def __setitem__(self, x: 'A', y: 'AA') -> None: pass
class B:
    def __setitem__(self, x: 'B', y: 'BB') -> None: pass

class AA: pass
class BB: pass
[builtins fixtures/tuple.py]

[case testMultipleDeclarationWithParentheses]
from typing import Undefined
(a, b) = (None, None) # type: int, str
a = '' # E: Incompatible types in assignment
b = 1  # E: Incompatible types in assignment
a = 1
b = ''

[case testMultipleAssignmentWithExtraParentheses]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)

(a, b) = (a, a) # E: Incompatible types in assignment
(a, b) = (b, b) # E: Incompatible types in assignment
((a), (b)) = ((a), (a))  # E: Incompatible types in assignment
((a), (b)) = ((b), (b))  # E: Incompatible types in assignment
[a, b] = a, a  # E: Incompatible types in assignment
[a, b] = b, b  # E: Incompatible types in assignment

(a, b) = (a, b)
((a), (b)) = ((a), (b))
[a, b] = a, b

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testMultipleAssignmentUsingUndefinedWithArgument]
from typing import Undefined, Tuple
a, b = Undefined(Tuple[int, str])
a = 1
b = ''
a = '' # E: Incompatible types in assignment
b = 1  # E: Incompatible types in assignment

[case testMultipleAssignmentUsingRepeatedUndefinedWithArgument]
from typing import Undefined
a, b = Undefined(int), Undefined(str)
a = 1
b = ''
a = '' # E: Incompatible types in assignment
b = 1  # E: Incompatible types in assignment

[case testMultipleAssignmentUsingUndefinedWithArgumentAndNormalExpression]
from typing import Undefined
a, b = Undefined(int), ''
a = 1
b = ''
a = '' # E: Incompatible types in assignment
b = 1  # E: Incompatible types in assignment


-- Error messages
-- --------------


[case testTupleErrorMessages]
from typing import Undefined
a = Undefined # type: A

(a, a) + a  # E: Unsupported left operand type for + ("tuple")
a + (a, a)  # E: Unsupported operand types for + ("A" and "Tuple[A, A]")
f((a, a))   # E: Argument 1 to "f" has incompatible type "Tuple[A, A]"
(a, a).foo  # E: "tuple" has no attribute "foo"

def f(x: 'A') -> None: pass

class A:
    def __add__(self, x: 'A') -> 'A': pass
[builtins fixtures/tuple.py]

[case testLargeTuplesInErrorMessages]
from typing import Undefined
a = Undefined # type: LongTypeName
a + (a, a, a, a, a, a, a) # Fail

class LongTypeName:
    def __add__(self, x: 'LongTypeName') -> 'LongTypeName': pass
[builtins fixtures/tuple.py]
[out]
main, line 3: Unsupported operand types for + ("LongTypeName" and tuple)


-- Tuple methods
-- -------------


[case testTupleMethods]
from typing import Undefined, Tuple
t = Undefined # type: Tuple[int, str]
i = 0
s = ''
b = bool()

s = t.__len__()  # E: Incompatible types in assignment
i = t.__str__()  # E: Incompatible types in assignment
i = s in t       # E: Incompatible types in assignment
t.foo            # E: "tuple" has no attribute "foo"

i = t.__len__()
s = t.__str__()
b = s in t

[file builtins.py]
class object:
    def __init__(self) -> None: pass
class tuple:
    def __len__(self) -> int: pass
    def __str__(self) -> str: pass
    def __contains__(self, o: object) -> bool: pass
class int: pass
class str: pass
class bool: pass
class type: pass
