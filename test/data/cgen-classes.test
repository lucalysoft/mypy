-- Test cases for the C back end that define and use simple classes. 
--
-- See also description at the top of cgen-basic.test

[case testConstructTrivialInstance]
class A: pass
class B: pass
a = A()
print(A())  # <__main__.A object>
b = B()
print(B())  # <__main__.B object>

[case testSimpleMethodCall]
class A:
    int inc(self, int x):
        return x + 1
print(A().inc(3)) # 4
print(A().inc(5)) # 6

[case testThreeMethods]
# Verify that vtables with more than one method work.
class A:
    int inc(self, int x):
        return x + 1
    void twice(self, int y):
        print(y * 2)
    int add(self, int x, int y):
        return x + y
a = A()
print(a.inc(3))    # 4
a.twice(5)         # 10
print(a.add(4, 7)) # 11

[case testSimpleAttributeAccess]
class A:
    int x
a = A()
a.x = 5
print(a.x + 1) # 6

[case testMultipleAttributes]
class A:
    int x
    int y
class B:
    int y
a = A()
a.x = 5
a.y = 6
b = B()
b.y = 3
print(a.x + a.y) # 11
print(b.y)       # 3

[case testDefaultAttributeValues]
class A:
    A a
    int n
a = A()
print(a.a) # None
print(a.n) # 0

[case testInitializeGlobalToNone]
class A: pass
if 1 > 2:
    a = A()
print(a) # None

[case testInitializeMultipleGlobals]
class A: pass
if 1 > 2:
    a = A()
    x = 1
    b = A()
    y = 2
print(a) # None
print(x) # 0
print(b) # None
print(y) # 0

[case testNoneValue]
class A: pass
a = A()
print(a) # <__main__.A object>
a = None
print(a) # None

[case testInitMethod]
class A:
    int x
    void __init__(self, int x):
        self.x = x
a = A(5)
print(a.x) # 5
a = A(3)
print(a.x) # 3

[case testInitMethodWithTwoArguments]
class A:
    int x
    A a
    void __init__(self, int x, A a):
        self.x = x
        self.a = a
a = A(5, None)
print(a.x) # 5
print(a.a) # None
    
[case testImplicitAttribute]
class A:
    void __init__(self, int x):
        self.x = x
        self.y = 2
a = A(3)
print(a.x) # 3
print(a.y) # 2

[case testSimpleInheritance]
class A:
    void f(self):
        print(1)
class B(A):
    void a(self):
        print(3)
    void f(self):
        print(2)
a = A()
a.f()   # 1
a = B()
a.f()   # 2
B().a() # 3

[case testSimpleInheritance2]
class A:
    int x
    int y
    void f(self):
        print(self.x)
    void g(self):
        print(self.y)
class B(A):
    int z
    void f(self):
        print(self.x + 1)
    void h(self):
        print(self.z)
A a = B()
a.x = 3
a.y = 5
a.f()   # 4
a.g()   # 5
b = B()
b.z = 8
b.h()   # 8
