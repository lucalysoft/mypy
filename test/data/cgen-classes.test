-- Test cases for the C back end that define and use simple classes. 
--
-- See also description at the top of cgen-basic.test

[case testConstructTrivialInstance]
import typing
class A: pass
class B: pass
a = A()
print(A())  # <__main__.A object>
b = B()
print(B())  # <__main__.B object>

[case testSimpleMethodCall]
import typing
class A:
    def inc(self, x: int) -> int:
        return x + 1
print(A().inc(3)) # 4
print(A().inc(5)) # 6

[case testThreeMethods]
import typing
# Verify that vtables with more than one method work.
class A:
    def inc(self, x: int) -> int:
        return x + 1
    def twice(self, y: int) -> None:
        print(y * 2)
    def add(self, x: int, y: int) -> int:
        return x + y
a = A()
print(a.inc(3))    # 4
a.twice(5)         # 10
print(a.add(4, 7)) # 11

[case testSimpleAttributeAccess]
import typing
class A:
    x = 0
a = A()
a.x = 5
print(a.x + 1) # 6

[case testMultipleAttributes]
import typing
class A:
    x = 0
    y = 0
class B:
    y = 0
a = A()
a.x = 5
a.y = 6
b = B()
b.y = 3
print(a.x + a.y) # 11
print(b.y)       # 3

[case testDefaultAttributeValues]
from typing import Undefined
class A:
    a = Undefined # type: A
    n = 0
a = A()
print(a.a) # None
print(a.n) # 0

[case testInitializeGlobalToNone]
import typing
class A: pass
if 1 > 2:
    a = A()
print(a) # None

[case testInitializeMultipleGlobals]
import typing
class A: pass
if 1 > 2:
    a = A()
    x = 1
    b = A()
    y = 2
print(a) # None
print(x) # 0
print(b) # None
print(y) # 0

[case testNoneValue]
import typing
class A: pass
a = A()
print(a) # <__main__.A object>
a = None
print(a) # None

[case testInitMethod]
import typing
class A:
    x = 0
    def __init__(self, x: int) -> None:
        self.x = x
a = A(5)
print(a.x) # 5
a = A(3)
print(a.x) # 3

[case testInitMethodWithTwoArguments]
from typing import Undefined
class A:
    x = 0
    a = Undefined # type: A
    def __init__(self, x: int, a: 'A') -> None:
        self.x = x
        self.a = a
a = A(5, None)
print(a.x) # 5
print(a.a) # None
    
[case testImplicitAttribute]
import typing
class A:
    def __init__(self, x: int) -> None:
        self.x = x
        self.y = 2
a = A(3)
print(a.x) # 3
print(a.y) # 2

[case testSimpleInheritance]
import typing
class A:
    def f(self) -> None:
        print(1)
class B(A):
    def a(self) -> None:
        print(3)
    def f(self) -> None:
        print(2)
a = A()
a.f()   # 1
a = B()
a.f()   # 2
B().a() # 3

[case testSimpleInheritance2]
import typing
class A:
    x = 0
    y = 0
    def f(self) -> None:
        print(self.x)
    def g(self) -> None:
        print(self.y)
class B(A):
    z = 0
    def f(self) -> None:
        print(self.x + 1)
    def h(self) -> None:
        print(self.z)
a = B() # type: A
a.x = 3
a.y = 5
a.f()   # 4
a.g()   # 5
b = B()
b.z = 8
b.h()   # 8

[case testMultipleSubclassesForBase]
from typing import Undefined
class A:
    def f2(self) -> None: print(2)
    def f3(self) -> None: print(3)
    def f4(self) -> None: print(4)
class B(A):
    def f3(self) -> None: print(33)
class C(A):
    def f2(self) -> None: print(22)
    def f3(self) -> None: print(333)
a = Undefined # type: A
a = A()
a.f2() # 2
a.f3() # 3
a.f4() # 4
a = B()
a.f2() # 2
a.f3() # 33
a.f4() # 4
a = C()
a.f2() # 22
a.f3() # 333
a.f4() # 4

[case testDeepInheritanceHierarchy]
import typing
class A:
    def f2(self) -> None: print(2)
    def f3(self) -> None: print(3)
    def f4(self) -> None: print(4)
class B(A):
    def f2(self) -> None: print(22)
    def f4(self) -> None: print(44)
class C(B):
    def f2(self) -> None: print(222)
a = C() # type: A
a.f2() # 222
a.f3() # 3
a.f4() # 44

[case testDefineInitWithInheritance]
import typing
class A:
    def __init__(self, x: int) -> None:
        self.x = x
class B:
    def __init__(self, x: int, y: int) -> None:
        self.x = x + 1
        self.y = y
b = B(4, 6)
print(b.x) # 5
print(b.y) # 6

[case testInheritInit]
import typing
class A:
    def __init__(self, x: int) -> None:
        self.x = x
class B(A): 
    y = 0
b = B(4)
b.y = 5
print(b.x) # 4
print(b.y) # 5

[case testCallSuperInit]
import typing
class A:
    def __init__(self, x: int) -> None:
        print(x)
class B(A):
    def __init__(self, x: int, y: int) -> None:
        super().__init__(y)
B(5, 6) # 6

[case testCallSuperInitInDeepHierarchy]
import typing
class A:
    def __init__(self, x: int) -> None:
        print(x)
class B(A): pass
class C(A):
    def __init__(self, x: int, y: int) -> None:
        super().__init__(y)
C(5, 6) # 6

[case testCallSuperMethod]
import typing
class A:
    def f(self, x: int) -> int: 
        print(x)
        return 5
class B(A):
    def f(self, x: int) -> int:
        return super().f(x + 1) + 2
n = B().f(3) # 4
print(n)     # 7

[case testOperatorOverload]
import typing
class A:
    def __init__(self, x: int) -> None:
        self.x = x
    def __add__(self, y: int) -> 'A':
        return A(self.x + y + 1)
a = A(3)
print((a + 5).x) # 9
