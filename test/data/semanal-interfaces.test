[case testInterface]
from abc import abstractmethod, ABCMeta
import typing

class A(metaclass=ABCMeta):
  @abstractmethod
  def g(self) -> 'A': pass
  @abstractmethod
  def f(self) -> 'A': return self
[out]
MypyFile:1(
  TypeDef:1(
    A
    Interface
    FuncDef:2(
      g
      Args(
        Var(self))
      def (__main__.A self) -> __main__.A
      Block:-1())
    FuncDef:3(
      f
      Args(
        Var(self))
      def (__main__.A self) -> __main__.A
      Block:3(
        ReturnStmt:3(
          NameExpr(self [l]))))))

[case testSuperinterface]
from abc import abstractmethod, ABCMeta
import typing

class B(metaclass=ABCMeta): pass
class A(B): pass
[out]
MypyFile:1(
  TypeDef:1(
    B
    Interface
    PassStmt:1())
  TypeDef:2(
    A
    Interface
    BaseType(
      __main__.B)
    PassStmt:2()))

[case testClassImplementingInterface]
from abc import abstractmethod, ABCMeta
import typing

class A(metaclass=ABCMeta): pass
class B(metaclass=ABCMeta): pass
class C(A, B): pass
[out]
MypyFile:1(
  TypeDef:1(
    A
    Interface
    PassStmt:1())
  TypeDef:2(
    B
    Interface
    PassStmt:2())
  TypeDef:3(
    C
    BaseType(
      builtins.object
      __main__.A
      __main__.B)
    PassStmt:3()))

[case testInterfaceWithDocString]
from abc import abstractmethod, ABCMeta
import typing

class A(metaclass=ABCMeta):
    "foo"
    @abstractmethod
    def f(self) -> 'A': pass
[out]
MypyFile:1(
  TypeDef:1(
    A
    Interface
    ExpressionStmt:2(
      StrExpr(foo))
    FuncDef:3(
      f
      Args(
        Var(self))
      def (__main__.A self) -> __main__.A
      Block:-1())))
