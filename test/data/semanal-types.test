[case testVarWithType]
import typing
class A: pass
x = A() # type: A
y = x
[out]
MypyFile:1(
  Import:1(typing : typing)
  TypeDef:2(
    A
    PassStmt:2())
  AssignmentStmt:3(
    NameExpr(x* [__main__.x])
    CallExpr:3(
      NameExpr(A [__main__.A])
      Args())
    __main__.A)
  AssignmentStmt:4(
    NameExpr(y* [__main__.y])
    NameExpr(x [__main__.x])))

[case testInitializeToUndefined]
from typing import Undefined

class A: pass
x = Undefined # type: A
y = x
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  TypeDef:3(
    A
    PassStmt:3())
  AssignmentStmt:4(
    NameExpr(x* [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    __main__.A)
  AssignmentStmt:5(
    NameExpr(y* [__main__.y])
    NameExpr(x [__main__.x])))

[case testLocalVarWithType]
from typing import Undefined
class A: pass
def f():
  x = Undefined # type: A
  y = x
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  TypeDef:2(
    A
    PassStmt:2())
  FuncDef:3(
    f
    Block:3(
      AssignmentStmt:4(
        NameExpr(x* [l])
        NameExpr(Undefined [typing.Undefined])
        __main__.A)
      AssignmentStmt:5(
        NameExpr(y* [l])
        NameExpr(x [l])))))

[case testAnyType]
from typing import Undefined, Any
x = Undefined # type: Any
y = x
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined, Any : Any])
  AssignmentStmt:2(
    NameExpr(x* [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    Any)
  AssignmentStmt:3(
    NameExpr(y* [__main__.y])
    NameExpr(x [__main__.x])))

[case testFunctionSig]
from typing import Any
class A: pass
def f(x: A) -> A: pass
def g(x: Any, y: A) -> None:
  z = x, y
[out]
MypyFile:1(
  ImportFrom:1(typing, [Any : Any])
  TypeDef:2(
    A
    PassStmt:2())
  FuncDef:3(
    f
    Args(
      Var(x))
    def (x: __main__.A) -> __main__.A
    Block:3(
      PassStmt:3()))
  FuncDef:4(
    g
    Args(
      Var(x)
      Var(y))
    def (x: Any, y: __main__.A)
    Block:4(
      AssignmentStmt:5(
        NameExpr(z* [l])
        TupleExpr:5(
          NameExpr(x [l])
          NameExpr(y [l]))))))

[case testBaseclass]
class A: pass
class B(A): pass
[out]
MypyFile:1(
  TypeDef:1(
    A
    PassStmt:1())
  TypeDef:2(
    B
    BaseType(
      __main__.A)
    PassStmt:2()))

[case testMultipleVarDef]
from typing import Undefined
class A: pass
class B: pass
a, b = Undefined, Undefined # type: (A, B)
x = a, b
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  TypeDef:2(
    A
    PassStmt:2())
  TypeDef:3(
    B
    PassStmt:3())
  AssignmentStmt:4(
    TupleExpr:4(
      NameExpr(a* [__main__.a])
      NameExpr(b* [__main__.b]))
    TupleExpr:4(
      NameExpr(Undefined [typing.Undefined])
      NameExpr(Undefined [typing.Undefined]))
    Tuple[__main__.A, __main__.B])
  AssignmentStmt:5(
    NameExpr(x* [__main__.x])
    TupleExpr:5(
      NameExpr(a [__main__.a])
      NameExpr(b [__main__.b]))))

[case testGenericType]
from typing import typevar, Generic, Any

t = typevar('t')

class A(Generic[t]): pass
class B: pass
x = None # type: A[B]
y = None # type: A[Any]
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic, Any : Any])
  AssignmentStmt:3(
    NameExpr(t* [__main__.t])
    CallExpr:3(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  TypeDef:5(
    A
    TypeVars(
      t)
    PassStmt:5())
  TypeDef:6(
    B
    PassStmt:6())
  AssignmentStmt:7(
    NameExpr(x* [__main__.x])
    NameExpr(None [builtins.None])
    __main__.A[__main__.B])
  AssignmentStmt:8(
    NameExpr(y* [__main__.y])
    NameExpr(None [builtins.None])
    __main__.A[Any]))

[case testGenericType2]
from typing import typevar, Generic, Any
t = typevar('t')
s = typevar('s')
class A(Generic[t, s]): pass
class B: pass
x = None # type: A[B, Any]
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic, Any : Any])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  AssignmentStmt:3(
    NameExpr(s* [__main__.s])
    CallExpr:3(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(s))))
  TypeDef:4(
    A
    TypeVars(
      t
      s)
    PassStmt:4())
  TypeDef:5(
    B
    PassStmt:5())
  AssignmentStmt:6(
    NameExpr(x* [__main__.x])
    NameExpr(None [builtins.None])
    __main__.A[__main__.B, Any]))

[case testAssignmentAfterDef]
from typing import Undefined

class A: pass
a = Undefined # type: A
a = 1
def f():
  b = Undefined # type: A
  b = 1
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  TypeDef:3(
    A
    PassStmt:3())
  AssignmentStmt:4(
    NameExpr(a* [__main__.a])
    NameExpr(Undefined [typing.Undefined])
    __main__.A)
  AssignmentStmt:5(
    NameExpr(a [__main__.a])
    IntExpr(1))
  FuncDef:6(
    f
    Block:6(
      AssignmentStmt:7(
        NameExpr(b* [l])
        NameExpr(Undefined [typing.Undefined])
        __main__.A)
      AssignmentStmt:8(
        NameExpr(b [l])
        IntExpr(1)))))

[case testCast]
from typing import typevar, Generic, Any, cast
t = typevar('t')
class c: pass
class d(Generic[t]): pass
cast(Any, 1)
cast(c, 1)
cast(d[c], c)
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic, Any : Any, cast : cast])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  TypeDef:3(
    c
    PassStmt:3())
  TypeDef:4(
    d
    TypeVars(
      t)
    PassStmt:4())
  ExpressionStmt:5(
    CastExpr:5(
      IntExpr(1)
      Any))
  ExpressionStmt:6(
    CastExpr:6(
      IntExpr(1)
      __main__.c))
  ExpressionStmt:7(
    CastExpr:7(
      NameExpr(c [__main__.c])
      __main__.d[__main__.c])))

[case testCastToQualifiedTypeAndCast]
import typing
import _m
typing.cast(_m.C, object)
[file _m.py]
class C: pass
[out]
MypyFile:1(
  Import:1(typing : typing)
  Import:2(_m : _m)
  ExpressionStmt:3(
    CastExpr:3(
      NameExpr(object [builtins.object])
      _m.C)))

[case testLongQualifiedCast]
import typing
import _m._n
typing.cast(_m._n.C, object)
[file _m/__init__.py]
[file _m/_n.py]
class C: pass
[out]
MypyFile:1(
  Import:1(typing : typing)
  Import:2(_m._n : _m._n)
  ExpressionStmt:3(
    CastExpr:3(
      NameExpr(object [builtins.object])
      _m._n.C)))

[case testCastTargetWithTwoTypeArgs]
from typing import typevar, Generic, cast
t = typevar('t')
s = typevar('s')
class C(Generic[t, s]): pass
cast(C[str, int], C)
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic, cast : cast])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  AssignmentStmt:3(
    NameExpr(s* [__main__.s])
    CallExpr:3(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(s))))
  TypeDef:4(
    C
    TypeVars(
      t
      s)
    PassStmt:4())
  ExpressionStmt:5(
    CastExpr:5(
      NameExpr(C [__main__.C])
      __main__.C[builtins.str, builtins.int])))

[case testCastToAny]
from typing import Any
Any(None)
[out]
MypyFile:1(
  ImportFrom:1(typing, [Any : Any])
  ExpressionStmt:2(
    CastExpr:2(
      NameExpr(None [builtins.None])
      Any)))

[case testCastToTupleType]
from typing import Tuple, cast
cast(Tuple[int, str], None)
[out]
MypyFile:1(
  ImportFrom:1(typing, [Tuple : Tuple, cast : cast])
  ExpressionStmt:2(
    CastExpr:2(
      NameExpr(None [builtins.None])
      Tuple[builtins.int, builtins.str])))

[case testCastToFunctionType]
from typing import Function, cast
cast(Function[[int], str], None)
[out]
MypyFile:1(
  ImportFrom:1(typing, [Function : Function, cast : cast])
  ExpressionStmt:2(
    CastExpr:2(
      NameExpr(None [builtins.None])
      def (builtins.int) -> builtins.str)))

[case testFunctionTypeVariable]
from typing import typevar, Undefined
t = typevar('t')
def f(x: t) -> None:
  y = Undefined # type: t
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Undefined : Undefined])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  FuncDef:3(
    f
    Args(
      Var(x))
    def [t] (x: t`-1)
    Block:3(
      AssignmentStmt:4(
        NameExpr(y* [l])
        NameExpr(Undefined [typing.Undefined])
        t`-1))))

[case testTwoFunctionTypeVariables]
from typing import typevar
t = typevar('t')
u = typevar('u')
def f(x: t, y: u, z: t) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  AssignmentStmt:3(
    NameExpr(u* [__main__.u])
    CallExpr:3(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(u))))
  FuncDef:4(
    f
    Args(
      Var(x)
      Var(y)
      Var(z))
    def [t, u] (x: t`-1, y: u`-2, z: t`-1)
    Block:4(
      PassStmt:4())))

[case testNestedGenericFunctionTypeVariable]
from typing import typevar
t = typevar('t')
class A(Generic[t]): pass
def f(x: A[t], y) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  TypeDef:3(
    A
    TypeVars(
      t)
    PassStmt:3())
  FuncDef:4(
    f
    Args(
      Var(x)
      Var(y))
    def [t] (x: __main__.A[t`-1], y: Any)
    Block:4(
      PassStmt:4())))

[case testNestedGenericFunctionTypeVariable2]
from typing import typevar, Tuple
t = typevar('t')
class A(Generic[t]): pass
def f(x: Tuple[int, t]) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Tuple : Tuple])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  TypeDef:3(
    A
    TypeVars(
      t)
    PassStmt:3())
  FuncDef:4(
    f
    Args(
      Var(x))
    def [t] (x: Tuple[builtins.int, t`-1])
    Block:4(
      PassStmt:4())))

[case testNestedGenericFunctionTypeVariable3]
from typing import typevar, Function
t = typevar('t')
class A(Generic[t]): pass
def f(x: Function[[int, t], int]) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Function : Function])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  TypeDef:3(
    A
    TypeVars(
      t)
    PassStmt:3())
  FuncDef:4(
    f
    Args(
      Var(x))
    def [t] (x: def (builtins.int, t`-1) -> builtins.int)
    Block:4(
      PassStmt:4())))

[case testNestedGenericFunctionTypeVariable4]
from typing import typevar, Function
t = typevar('t')
class A(Generic[t]): pass
def f(x: Function[[], t]) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Function : Function])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  TypeDef:3(
    A
    TypeVars(
      t)
    PassStmt:3())
  FuncDef:4(
    f
    Args(
      Var(x))
    def [t] (x: def () -> t`-1)
    Block:4(
      PassStmt:4())))

[case testGenericFunctionTypeVariableInReturnType]
from typing import typevar
t = typevar('t')
def f() -> t: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  FuncDef:3(
    f
    def [t] () -> t`-1
    Block:3(
      PassStmt:3())))

[case testSelfType]
class A:
  def f(self, o: object) -> None: pass
[out]
MypyFile:1(
  TypeDef:1(
    A
    FuncDef:2(
      f
      Args(
        Var(self)
        Var(o))
      def (self: __main__.A, o: builtins.object)
      Block:2(
        PassStmt:2()))))
        
[case testNestedGenericFunction]
from typing import typevar
t = typevar('t')
def f() -> None:
    def g() -> t: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  FuncDef:3(
    f
    def ()
    Block:3(
      FuncDef:4(
        g
        def [t] () -> t`-1
        Block:4(
          PassStmt:4())))))

[case testClassTvar]
from typing import typevar, Generic

t = typevar('t')

class c(Generic[t]):
  def f(self) -> t: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic])
  AssignmentStmt:3(
    NameExpr(t* [__main__.t])
    CallExpr:3(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  TypeDef:5(
    c
    TypeVars(
      t)
    FuncDef:6(
      f
      Args(
        Var(self))
      def (self: __main__.c[t`1]) -> t`1
      Block:6(
        PassStmt:6()))))

[case testClassTvar2]
from typing import typevar, Generic

t = typevar('t')
s = typevar('s')

class c(Generic[t, s]):
  def f(self, x: s) -> t: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic])
  AssignmentStmt:3(
    NameExpr(t* [__main__.t])
    CallExpr:3(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  AssignmentStmt:4(
    NameExpr(s* [__main__.s])
    CallExpr:4(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(s))))
  TypeDef:6(
    c
    TypeVars(
      t
      s)
    FuncDef:7(
      f
      Args(
        Var(self)
        Var(x))
      def (self: __main__.c[t`1, s`2], x: s`2) -> t`1
      Block:7(
        PassStmt:7()))))

[case testGenericBaseClass]
from typing import typevar, Generic
t = typevar('t')
class d(Generic[t]): pass
class c(d[t], Generic[t]): pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  TypeDef:3(
    d
    TypeVars(
      t)
    PassStmt:3())
  TypeDef:4(
    c
    TypeVars(
      t)
    BaseType(
      __main__.d[t`1])
    PassStmt:4()))

[case testTupleType]
from typing import Tuple
t = None # type: tuple
t1 = None # type: Tuple[object]
t2 = None # type: Tuple[int, object]
[builtins fixtures/tuple.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [Tuple : Tuple])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    NameExpr(None [builtins.None])
    builtins.tuple)
  AssignmentStmt:3(
    NameExpr(t1* [__main__.t1])
    NameExpr(None [builtins.None])
    Tuple[builtins.object])
  AssignmentStmt:4(
    NameExpr(t2* [__main__.t2])
    NameExpr(None [builtins.None])
    Tuple[builtins.int, builtins.object]))

[case testFunctionTypes]
from typing import Function
f = None # type: Function[[object, int], str]
g = None # type: Function[[], None]
[out]
MypyFile:1(
  ImportFrom:1(typing, [Function : Function])
  AssignmentStmt:2(
    NameExpr(f* [__main__.f])
    NameExpr(None [builtins.None])
    def (builtins.object, builtins.int) -> builtins.str)
  AssignmentStmt:3(
    NameExpr(g* [__main__.g])
    NameExpr(None [builtins.None])
    def ()))

[case testOverloadedFunction]
from typing import overload
@overload
def f(o: object) -> int: o
@overload
def f(a: str) -> object: a
[out]
MypyFile:1(
  ImportFrom:1(typing, [overload : overload])
  OverloadedFuncDef:2(
    Overload(def (o: builtins.object) -> builtins.int, \
             def (a: builtins.str) -> builtins.object)
    Decorator:2(
      Var(f)
      NameExpr(overload [typing.overload])
      FuncDef:3(
        f
        Args(
          Var(o))
        def (o: builtins.object) -> builtins.int
        Block:3(
          ExpressionStmt:3(
            NameExpr(o [l])))))
    Decorator:4(
      Var(f)
      NameExpr(overload [typing.overload])
      FuncDef:5(
        f
        Args(
          Var(a))
        def (a: builtins.str) -> builtins.object
        Block:5(
          ExpressionStmt:5(
            NameExpr(a [l])))))))

[case testReferenceToOverloadedFunction]
from typing import overload
@overload
def f() -> None: pass
@overload
def f(x: int) -> None: pass
x = f
[out]
MypyFile:1(
  ImportFrom:1(typing, [overload : overload])
  OverloadedFuncDef:2(
    Overload(def (), def (x: builtins.int))
    Decorator:2(
      Var(f)
      NameExpr(overload [typing.overload])
      FuncDef:3(
        f
        def ()
        Block:3(
          PassStmt:3())))
    Decorator:4(
      Var(f)
      NameExpr(overload [typing.overload])
      FuncDef:5(
        f
        Args(
          Var(x))
        def (x: builtins.int)
        Block:5(
          PassStmt:5()))))
  AssignmentStmt:6(
    NameExpr(x* [__main__.x])
    NameExpr(f [__main__.f])))

[case testNestedOverloadedFunction]
from typing import overload
def f():
    @overload
    def g(): pass
    @overload
    def g(x): pass
    y = g
[out]
MypyFile:1(
  ImportFrom:1(typing, [overload : overload])
  FuncDef:2(
    f
    Block:2(
      OverloadedFuncDef:3(
        Overload(def () -> Any, def (x: Any) -> Any)
        Decorator:3(
          Var(g)
          NameExpr(overload [typing.overload])
          FuncDef:4(
            g
            Block:4(
              PassStmt:4())))
        Decorator:5(
          Var(g)
          NameExpr(overload [typing.overload])
          FuncDef:6(
            g
            Args(
              Var(x))
            Block:6(
              PassStmt:6()))))
      AssignmentStmt:7(
        NameExpr(y* [l])
        NameExpr(g [l])))))

[case testImplicitGenericTypeArgs]
from typing import typevar, Generic, Undefined
t = typevar('t')
s = typevar('s')
class A(Generic[t, s]): pass
x = Undefined # type: A
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic, Undefined : Undefined])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  AssignmentStmt:3(
    NameExpr(s* [__main__.s])
    CallExpr:3(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(s))))
  TypeDef:4(
    A
    TypeVars(
      t
      s)
    PassStmt:4())
  AssignmentStmt:5(
    NameExpr(x* [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    __main__.A[Any, Any]))

[case testImplicitTypeArgsAndGenericBaseClass]
from typing import typevar, Generic
t = typevar('t')
s = typevar('s')
class B(Generic[s]): pass
class A(B, Generic[t]): pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    CallExpr:2(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(t))))
  AssignmentStmt:3(
    NameExpr(s* [__main__.s])
    CallExpr:3(
      NameExpr(typevar [typing.typevar])
      Args(
        StrExpr(s))))
  TypeDef:4(
    B
    TypeVars(
      s)
    PassStmt:4())
  TypeDef:5(
    A
    TypeVars(
      t)
    BaseType(
      __main__.B[Any])
    PassStmt:5()))
