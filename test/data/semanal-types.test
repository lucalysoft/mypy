[case testVarWithType]
import typing
class A: pass
x = A() # type: A
y = x
[out]
MypyFile:1(
  Import:1(typing : typing)
  TypeDef:2(
    A
    PassStmt:2())
  AssignmentStmt:3(
    NameExpr(x* [__main__.x])
    CallExpr:3(
      NameExpr(A [__main__.A])
      Args())
    __main__.A)
  AssignmentStmt:4(
    NameExpr(y* [__main__.y])
    NameExpr(x [__main__.x])))

[case testInitializeToUndefined]
from typing import Undefined

class A: pass
x = Undefined # type: A
y = x
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  TypeDef:3(
    A
    PassStmt:3())
  AssignmentStmt:4(
    NameExpr(x* [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    __main__.A)
  AssignmentStmt:5(
    NameExpr(y* [__main__.y])
    NameExpr(x [__main__.x])))

[case testLocalVarWithType]
from typing import Undefined

class A: pass
def f():
  x = Undefined # type: A
  y = x
[out]
MypyFile:1(
  TypeDef:1(
    A
    PassStmt:1())
  FuncDef:2(
    f
    Block:2(
      VarDef:3(
        Var(x)
        Type(__main__.A))
      AssignmentStmt:4(
        NameExpr(y* [l])
        NameExpr(x [l])))))

[case testAnyType]
from typing import Undefined, Any

x = Undefined # type: Any
y = x
[out]
MypyFile:1(
  VarDef:1(
    Var(x)
    Type(any))
  AssignmentStmt:2(
    NameExpr(y* [__main__.y])
    NameExpr(x [__main__.x])))

[case testFunctionSig]
from typing import Any

class A: pass
def f(x: A) -> A: pass
def g(x: Any, y: A) -> None:
  z = x, y
[out]
MypyFile:1(
  TypeDef:1(
    A
    PassStmt:1())
  FuncDef:2(
    f
    Args(
      Var(x))
    def (__main__.A x) -> __main__.A
    Block:2(
      PassStmt:2()))
  FuncDef:3(
    g
    Args(
      Var(x)
      Var(y))
    def (any x, __main__.A y)
    Block:3(
      AssignmentStmt:4(
        NameExpr(z* [l])
        TupleExpr:4(
          NameExpr(x [l])
          NameExpr(y [l]))))))

[case testBaseclass]
class A: pass
class B(A): pass
[out]
MypyFile:1(
  TypeDef:1(
    A
    PassStmt:1())
  TypeDef:2(
    B
    BaseType(
      __main__.A)
    PassStmt:2()))

[case testVarDefWithInit]
class A: pass
x = 1
a = x # type: A
[out]
MypyFile:1(
  TypeDef:1(
    A
    PassStmt:1())
  AssignmentStmt:2(
    NameExpr(x* [__main__.x])
    IntExpr(1))
  VarDef:3(
    Var(a)
    Type(__main__.A)
    NameExpr(x [__main__.x])))

[case testMultipleVarDef]
from typing import Undefined

class A: pass
class B: pass
a, b = Undefined, Undefined # type: (A, B)
x = a, b
[out]
MypyFile:1(
  TypeDef:1(
    A
    PassStmt:1())
  TypeDef:2(
    B
    PassStmt:2())
  VarDef:3(
    Var(a)
    Type(__main__.A)
    Var(b)
    Type(__main__.B))
  AssignmentStmt:4(
    NameExpr(x* [__main__.x])
    TupleExpr:4(
      NameExpr(a [__main__.a])
      NameExpr(b [__main__.b]))))

[case testGenericType]
from typing import typevar, Generic, Undefined, Any

t = typevar('t')

class A(Generic[t]): pass
class B: pass
x = Undefined # type: A[B]
y = Undefined # type: A[Any]
[out]
MypyFile:1(
  TypeDef:1(
    A
    TypeVars(
      t)
    PassStmt:1())
  TypeDef:2(
    B
    PassStmt:2())
  VarDef:3(
    Var(x)
    Type(__main__.A<__main__.B>))
  VarDef:4(
    Var(y)
    Type(__main__.A<any>)))

[case testGenericType2]
from typing import typevar, Generic, Undefined, Any

t = typevar('t')
s = typevar('s')

class A(Generic[t, s]): pass
class B: pass
x = Undefined # type: A[B, Any]
[out]
MypyFile:1(
  TypeDef:1(
    A
    TypeVars(
      t
      s)
    PassStmt:1())
  TypeDef:2(
    B
    PassStmt:2())
  VarDef:3(
    Var(x)
    Type(__main__.A<__main__.B, any>)))

[case testAssignmentAfterDef]
from typing import Undefined

class A: pass
a = Undefined # type: A
a = 1
def f():
  b = Undefined # type: A
  b = 1
[out]
MypyFile:1(
  TypeDef:1(
    A
    PassStmt:1())
  VarDef:2(
    Var(a)
    Type(__main__.A))
  AssignmentStmt:3(
    NameExpr(a [__main__.a])
    IntExpr(1))
  FuncDef:4(
    f
    Block:4(
      VarDef:5(
        Var(b)
        Type(__main__.A))
      AssignmentStmt:6(
        NameExpr(b [l])
        IntExpr(1)))))

[case testCast]
from typing import typevar, Generic, Any, cast

t = typevar('t')

class c: pass
class d(Generic[t]): pass
Any(1)
cast(c, 1)
cast(d[c], c)
[out]
MypyFile:1(
  TypeDef:1(
    c
    PassStmt:1())
  TypeDef:2(
    d
    TypeVars(
      t)
    PassStmt:2())
  ExpressionStmt:3(
    CastExpr:3(
      IntExpr(1)
      any))
  ExpressionStmt:4(
    CastExpr:4(
      IntExpr(1)
      __main__.c))
  ExpressionStmt:5(
    CastExpr:5(
      NameExpr(c [__main__.c])
      __main__.d<__main__.c>)))

[case testFunctionTvar]
from typing import typevar, Undefined

t = typevar('t')

def f(x: t) -> None:
  y = Undefined # type: t
[out]
MypyFile:1(
  FuncDef:1(
    f
    Args(
      Var(x))
    def <t> (t`-1 x)
    Block:1(
      VarDef:2(
        Var(y)
        Type(t`-1)))))

[case testFunctionTvar2]
from typing import typevar

t = typevar('t')
u = typevar('u')

def f(x: t, y: u) -> None: pass
[out]
MypyFile:1(
  FuncDef:1(
    f
    Args(
      Var(x)
      Var(y))
    def <t, u> (t`-1 x, u`-2 y)
    Block:1(
      PassStmt:1())))

[case testSelfType]
class A:
  def f(self, o: object) -> None: pass
[out]
MypyFile:1(
  TypeDef:1(
    A
    FuncDef:2(
      f
      Args(
        Var(self)
        Var(o))
      def (__main__.A self, builtins.object o)
      Block:2(
        PassStmt:2()))))

[case testClassTvar]
from typing import typevar, Generic

t = typevar('t')

class c(Generic[t]):
  def f(self) -> t: pass
[out]
MypyFile:1(
  TypeDef:1(
    c
    TypeVars(
      t)
    FuncDef:2(
      f
      Args(
        Var(self))
      def (__main__.c<t`1> self) -> t`1
      Block:2(
        PassStmt:2()))))

[case testClassTvar2]
from typing import typevar, Generic

t = typevar('t')
s = typevar('s')

class c(Generic[t, s]):
  def f(self, x: s) -> t: pass
[out]
MypyFile:1(
  TypeDef:1(
    c
    TypeVars(
      t
      s)
    FuncDef:2(
      f
      Args(
        Var(self)
        Var(x))
      def (__main__.c<t`1, s`2> self, s`2 x) -> t`1
      Block:2(
        PassStmt:2()))))

[case testGenericBaseClass]
from typing import typevar, Generic

t = typevar('t')

class d(Generic[t]): pass
class c(d[t], Generic[t]): pass
[out]
MypyFile:1(
  TypeDef:1(
    d
    TypeVars(
      t)
    PassStmt:1())
  TypeDef:2(
    c
    TypeVars(
      t)
    BaseType(
      __main__.d<t`1>)
    PassStmt:2()))

[case testTupleType]
from typing import Undefined, Tuple, Any

t = Undefined # type: tuple
t1 = Undefined # type: Tuple[object]
t2 = Undefined # type: Tuple[Any, object]
[builtins fixtures/tuple.py]
[out]
MypyFile:1(
  VarDef:1(
    Var(t)
    Type(builtins.tuple))
  VarDef:2(
    Var(t1)
    Type(tuple<builtins.object>))
  VarDef:3(
    Var(t2)
    Type(tuple<any, builtins.object>)))

[case testFunctionTypes]
from typing import Undefined, Function

f = Undefined # type: Function[[object, type], A]
g = Undefined # type: Function[[], None]
class A: pass
[out]
MypyFile:1(
  VarDef:1(
    Var(f)
    Type(def (builtins.object, builtins.type) -> __main__.A))
  VarDef:2(
    Var(g)
    Type(def ()))
  TypeDef:3(
    A
    PassStmt:3()))

[case testOverloadedFunction]
from typing import overload, Any

@overload
def f(o: object) -> Any: o
@overload
def f(a: Any) -> object: a
[out]
MypyFile:1(
  OverloadedFuncDef:1(
    Overload(def (builtins.object o) -> any, def (any a) -> builtins.object)
    FuncDef:1(
      f
      Args(
        Var(o))
      def (builtins.object o) -> any
      Block:1(
        ExpressionStmt:1(
          NameExpr(o [l]))))
    FuncDef:2(
      f
      Args(
        Var(a))
      def (any a) -> builtins.object
      Block:2(
        ExpressionStmt:2(
          NameExpr(a [l]))))))

[case testReferenceToOverloadedFunction]
from typing import overload, Any

@overload
def f() -> None: pass
@overload
def f(x: Any) -> None: pass
x = f
[out]
MypyFile:1(
  OverloadedFuncDef:1(
    Overload(def (), def (any x))
    FuncDef:1(
      f
      def ()
      Block:1(
        PassStmt:1()))
    FuncDef:2(
      f
      Args(
        Var(x))
      def (any x)
      Block:2(
        PassStmt:2())))
  AssignmentStmt:3(
    NameExpr(x* [__main__.x])
    NameExpr(f [__main__.f])))

[case testImplicitGenericType]
from typing import typevar, Generic, Undefined

t = typevar('t')
s = typevar('s')

class A(Generic[t, s]): pass
x = Undefined # type: A
[out]
MypyFile:1(
  TypeDef:1(
    A
    TypeVars(
      t
      s)
    PassStmt:1())
  VarDef:2(
    Var(x)
    Type(__main__.A<any, any>)))

[case testImplicitGenericBaseClass]
from typing import typevar, Generic

t = typevar('t')
s = typevar('s')

class A('B', Generic[t]): pass
class B(Generic[s]): pass
[out]
MypyFile:1(
  TypeDef:1(
    A
    TypeVars(
      t)
    BaseType(
      __main__.B<any>)
    PassStmt:1())
  TypeDef:2(
    B
    TypeVars(
      s)
    PassStmt:2()))
