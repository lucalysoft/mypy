-- Test cases for exporting node types from the type checker.
--
-- Each test case consists of at least two sections.
-- The first section contains [case NAME-skip] followed by the input code,
-- while the second section contains [out] followed by the output from the type
-- checker.
--
-- The first line of input code should be a regexp in comment that describes
-- the information to dump (prefix with ##). The regexp is matched against
-- the following items:
--
--   * each name of an expression node
--   * each type string of a node (e.g. OpExpr)
--
-- Lines starting with "--" in this file will be ignored.


-- Expressions
-- -----------


[case testConstructorCall]
import typing
A()
B()
class A: pass
class B: pass
[out]
CallExpr(2) : A
NameExpr(2) : def () -> A
CallExpr(3) : B
NameExpr(3) : def () -> B

[case testLiterals]
import typing
5
2.3
'foo'
None
[builtins fixtures/primitives.py]
[out]
IntExpr(2) : builtins.int
FloatExpr(3) : builtins.float
StrExpr(4) : builtins.str
NameExpr(5) : 'None'

[case testNameExpression]
from typing import Undefined
a = Undefined # type: A
a # node
def f(aa: 'A') -> None:
  b = Undefined # type: B
  aa # node
  b  # node
class A:
  def g(self) -> None:
    self # node
class B: pass
[out]
NameExpr(3) : A
NameExpr(6) : A
NameExpr(7) : B
NameExpr(10) : A

[case testMemberAccess]
## MemberExpr|CallExpr
from typing import Undefined
a = Undefined # type: A
a.m
a.f
a.f()
class A:
  m = Undefined # type: A
  def f(self) -> 'B': pass
class B: pass
[out]
MemberExpr(4) : A
MemberExpr(5) : def () -> B
CallExpr(6) : B
MemberExpr(6) : def () -> B

[case testCastExpression]
## CastExpr|[a-z]
from typing import Undefined, Any, cast
d = Undefined # type: Any
b = Undefined # type: B
class A: pass
class B(A): pass
cast(A, d)
cast(A, b)
cast(B, b)
[out]
CastExpr(7) : A
NameExpr(7) : Any
CastExpr(8) : A
NameExpr(8) : B
CastExpr(9) : B
NameExpr(9) : B

[case testArithmeticOps]
## OpExpr
import typing
a = 1 + 2
1.2 * 3
2.2 - 3
1 / 2
[file builtins.py]
class object:
    def __init__(self) -> None: pass
class int:
    def __add__(self, x: int) -> int: pass
    def __truediv__(self, x: int) -> float: pass
class float:
    def __mul__(self, x: int) -> float: pass
    def __sub__(self, x: int) -> float: pass
class type: pass
[out]
OpExpr(3) : builtins.int
OpExpr(4) : builtins.float
OpExpr(5) : builtins.float
OpExpr(6) : builtins.float

[case testComparisonOps]
## OpExpr
import typing
1 == object()
1 == 2
2 < 3
[file builtins.py]
class object:
    def __init__(self) -> None: pass
class int:
    def __eq__(self, x: object) -> bool: pass
    def __lt__(selef, x: int) -> bool: pass
class bool: pass
class type: pass
[out]
OpExpr(3) : builtins.bool
OpExpr(4) : builtins.bool
OpExpr(5) : builtins.bool

[case testBooleanOps-skip]
## OpExpr|UnaryExpr
import typing
a = bool()
a and a
a or a
not a
[builtins fixtures/bool.py]
[out]
OpExpr(4) : builtins.bool
OpExpr(5) : builtins.bool
UnaryExpr(6) : builtins.bool

[case testFunctionCall]
## CallExpr
from typing import Tuple
f(
  A(),
  B())
class A: pass
class B: pass
def f(a: A, b: B) -> Tuple[A, B]: pass
[builtins fixtures/tuple.py]
[out]
CallExpr(3) : Tuple[A, B]
CallExpr(4) : A
CallExpr(5) : B


-- Statements
-- ----------


[case testSimpleAssignment]
from typing import Undefined, Any
a = Undefined # type: A
b = a # type: Any
b = a
a = b

class A: pass
[out]
NameExpr(3) : A
NameExpr(4) : A
NameExpr(4) : Any
NameExpr(5) : A
NameExpr(5) : Any

[case testMemberAssignment]
from typing import Undefined, Any
class A:
  a = Undefined # type: A
  b = Undefined # type: Any
  def f(self) -> None:
    self.b = self.a
    self.a.a = self.b
[out]
MemberExpr(6) : A
MemberExpr(6) : Any
NameExpr(6) : A
NameExpr(6) : A
MemberExpr(7) : A
MemberExpr(7) : A
MemberExpr(7) : Any
NameExpr(7) : A
NameExpr(7) : A

[case testIf-skip]
import typing
a = False
if a:
  None
elif not a:
  None
[builtins fixtures/bool.py]
[out]
NameExpr(2) : builtins.bool
NameExpr(3) : 'None'
NameExpr(4) : builtins.bool
UnaryExpr(4) : builtins.bool
NameExpr(5) : 'None'

[case testWhile-skip]
import typing
a = False
while a:
  None
[builtins fixtures/bool.py]
[out]
NameExpr(2) : builtins.bool
NameExpr(3) : 'None'


-- Simple type inference
-- ---------------------


[case testInferSingleType]
import typing
x = 1
[builtins fixtures/primitives.py]
[out]
IntExpr(2) : builtins.int
NameExpr(2) : builtins.int

[case testInferTwoTypes]
## NameExpr
import typing
(s, 
i) = 'x', 1
[builtins fixtures/primitives.py]
[out]
NameExpr(3) : builtins.str
NameExpr(4) : builtins.int

[case testInferSingleLocalVarType]
import typing
def f() -> None:
    x = 1
[builtins fixtures/primitives.py]
[out]
IntExpr(3) : builtins.int
NameExpr(3) : builtins.int


-- Basic generics
-- --------------


[case testImplicitBoundTypeVarsForMethod]
## MemberExpr
from typing import typevar, Generic, Undefined
T = typevar('T')
class A(Generic[T]):
  def f(self) -> T: pass
class B: pass
def g() -> None:
  a = Undefined # type: A[B]
  f = a.f
[out]
MemberExpr(9) : def [1:B] () -> B

[case testImplicitBoundTypeVarsForConstructor]
## CallExpr|TypeApplication|NameExpr
from typing import Any, typevar, Generic
T = typevar('T')
class A(Generic[T]):
  def __init__(self) -> None: pass
class B: pass
A[B]()
A[Any]()
[out]
CallExpr(7) : A[B]
NameExpr(7) : def [-1:B] () -> A[B]
TypeApplication(7) : def [-1:B] () -> A[B]
CallExpr(8) : A[Any]
NameExpr(8) : def [-1:Any] () -> A[Any]
TypeApplication(8) : def [-1:Any] () -> A[Any]

[case testImplicitBoundTypeVarsForSelfMethodReference]
from typing import typevar, Generic
T = typevar('T')
class A(Generic[T]):
  def f(self) -> T:
    self.f()
[out]
CallExpr(5) : T`1
MemberExpr(5) : def [1:T`1] () -> T`1
NameExpr(5) : A[T`1]

[case testGenericFunctionCallWithTypeApp]
## CallExpr|TypeApplication|NameExpr
from typing import Any, typevar, Tuple
T = typevar('T')
class A: pass
f[A](A())
f[Any](A())
def f(a: T) -> Tuple[T, T]: pass
[builtins fixtures/tuple.py]
[out]
CallExpr(5) : A
CallExpr(5) : Tuple[A, A]
NameExpr(5) : def () -> A
NameExpr(5) : def [-1:A] (a: A) -> Tuple[A, A]
TypeApplication(5) : def [-1:A] (a: A) -> Tuple[A, A]
CallExpr(6) : A
CallExpr(6) : Tuple[Any, Any]
NameExpr(6) : def () -> A
NameExpr(6) : def [-1:Any] (a: Any) -> Tuple[Any, Any]
TypeApplication(6) : def [-1:Any] (a: Any) -> Tuple[Any, Any]

[case testGenericMethodCallWithTypeApp-skip]
## CallExpr|MemberExpr|TypeApplication
from typing import Any, typevar, Tuple, Undefined
T = typevar('T')
a.f['A'](a)
a.f[Any](a)
class A:
  def f(self, a: T) -> Tuple[T, T]: pass
a = Undefined # type: A
[builtins fixtures/tuple.py]
[out]
CallExpr(2) : Tuple[A, A]
MemberExpr(2) : def [-1:A] (A a) -> Tuple[A, A]
TypeApplication(2) : def [-1:A] (A a) -> Tuple[A, A]
CallExpr(3) : Tuple[Any, Any]
MemberExpr(3) : def [-1:Any] (any a) -> Tuple[Any, Any]
TypeApplication(3) : def [-1:Any] (any a) -> Tuple[Any, Any]

[case testGenericMethodCallInGenericTypeWithTypeApp-skip]
## CallExpr|MemberExpr|TypeApplication
from typing import Any, typevar, Generic, Tuple, Undefined
T = typevar('T')
S = typevar('S')
class B: pass
class C: pass
a.f[B](b)
a.f[Any](b)
class A(Generic[T]):
  def f(self, a: S) -> Tuple[T, S]: pass
a = Undefined # type: A[C]
b = Undefined # type: B
[builtins fixtures/tuple.py]
[out]
CallExpr(6) : Tuple[C, B]
MemberExpr(6) : def [1:C, -1:B] (B a) -> Tuple[C, B]
TypeApplication(6) : def [1:C, -1:B] (B a) -> Tuple[C, B]
CallExpr(7) : Tuple[C, Any]
MemberExpr(7) : def [1:C, -1:Any] (any a) -> Tuple[C, Any]
TypeApplication(7) : def [1:C, -1:Any] (any a) -> Tuple[C, Any]

[case testGenericFunctionWithTwoArgsAndTypeApp]
## CallExpr|TypeApplication
from typing import Any, typevar, Tuple
S = typevar('S')
T = typevar('T')
class A: pass
f[A, Any]()
def f() -> Tuple[S, T]: pass
[builtins fixtures/tuple.py]
[out]
CallExpr(6) : Tuple[A, Any]
TypeApplication(6) : def [-1:A, -2:Any] () -> Tuple[A, Any]

[case testGenericTypeVariableInference]
from typing import typevar, Generic
T = typevar('T')
class A(Generic[T]):
  def __init__(self, a: T) -> None: pass
class B: pass
A(A(B()))
[out]
CallExpr(6) : A[A[B]]
CallExpr(6) : A[B]
CallExpr(6) : B
NameExpr(6) : def [-1:A[B]] (a: A[B]) -> A[A[B]]
NameExpr(6) : def [-1:B] (a: B) -> A[B]
NameExpr(6) : def () -> B


-- Generic inheritance
-- -------------------


[case testInheritedMethodReferenceWithGenericInheritance]
from typing import typevar, Generic
T = typevar('T')
class C: pass
class A(Generic[T]):
  def f(self, a: T) -> None: pass
class B(A[C]):
  def g(self, c: C) -> None:
    self.f(c)
[out]
CallExpr(8) : void
MemberExpr(8) : def [1:C] (a: C)
NameExpr(8) : C
NameExpr(8) : B

[case testInheritedMethodReferenceWithGenericSubclass]
from typing import typevar, Generic
S = typevar('S')
T = typevar('T')
class C: pass
class A(Generic[S, T]):
  def f(self, a: C) -> None: pass
class B(A[C, T], Generic[T]):
  def g(self, c: C) -> None:
    self.f(c)
[out]
CallExpr(9) : void
MemberExpr(9) : def [1:C, 2:T`1] (a: C)
NameExpr(9) : C
NameExpr(9) : B[T`1]

[case testExternalReferenceWithGenericInheritance]
from typing import typevar, Generic, Undefined
T = typevar('T')
class C: pass
class A(Generic[T]):
  def f(self, a: T) -> None: pass
class B(A[C]): pass
b = Undefined # type: B
c = Undefined # type: C
b.f(c)
[out]
CallExpr(9) : void
MemberExpr(9) : def [1:C] (a: C)
NameExpr(9) : B
NameExpr(9) : C


-- Implicit Any types
-- ------------------


[case testDynamicallyTypedFunction]
from typing import Undefined
def f(x):
  y = x + o
  z = o
  z
o = Undefined # type: object
[out]
NameExpr(3) : builtins.object
NameExpr(3) : Any
NameExpr(3) : Any
OpExpr(3) : Any
NameExpr(4) : builtins.object
NameExpr(4) : Any
NameExpr(5) : Any

[case testDynamicallyTypedMethod]
from typing import Undefined
class A:
  def f(self, x):
    y = (
         o)  # Place y and o on separate lines
    x
    y
o = Undefined # type: object
[out]
NameExpr(4) : Any
ParenExpr(4) : Any
NameExpr(5) : builtins.object
NameExpr(6) : Any
NameExpr(7) : Any

[case testDynamicallyTypedConstructor]
from typing import Undefined
class A:
  def __init__(self, x):
    y = o
    x
    y
o = Undefined # type: object
[out]
NameExpr(4) : builtins.object
NameExpr(4) : Any
NameExpr(5) : Any
NameExpr(6) : Any

[case testCallInDynamicallyTypedFunction]
from typing import Undefined
def f():
  g(o)
def g(a: object) -> object: pass
o = Undefined # type: object
[out]
CallExpr(3) : builtins.object
NameExpr(3) : def (a: builtins.object) -> builtins.object
NameExpr(3) : builtins.object

[case testExpressionInDynamicallyTypedFn]
import typing
def f():
  x = None
  x.f()
[out]
NameExpr(3) : 'None'
NameExpr(3) : Any
CallExpr(4) : Any
MemberExpr(4) : Any
NameExpr(4) : Any

[case testGenericCall]
from typing import typevar, Generic, Undefined
T = typevar('T')
def f() -> None:
  a1 = A(b) # type: A[B]
  a2 = A(b) # type: A[object]
class A(Generic[T]):
  def __init__(self, a: T) -> None: pass
class B: pass
b = Undefined # type: B
[out]
CallExpr(4) : A[B]
NameExpr(4) : def [-1:B] (a: B) -> A[B]
NameExpr(4) : B
CallExpr(5) : A[builtins.object]
NameExpr(5) : def [-1:builtins.object] (a: builtins.object) -> A[builtins.object]
NameExpr(5) : B

[case testGenericCallInDynamicallyTypedFunction]
from typing import typevar, Generic
T = typevar('T')
def f():
  A()
class A(Generic[T]): pass
[out]
CallExpr(4) : A[Any]
NameExpr(4) : def [-1:Any] () -> A[Any]

[case testGenericCallInDynamicallyTypedFunction2]
from typing import typevar, Generic
T = typevar('T')
def f():
  A(f)
class A(Generic[T]): 
    def __init__(self, x: T) -> None: pass
[out]
CallExpr(4) : A[Any]
NameExpr(4) : def [-1:Any] (x: Any) -> A[Any]
NameExpr(4) : def () -> Any

[case testGenericCallInDynamicallyTypedFunction3]
from typing import typevar
t = typevar('t')
def f():
  g(None)
def g(x: t) -> t: pass
[out]
CallExpr(4) : Any
NameExpr(4) : 'None'
NameExpr(4) : def [-1:Any] (x: Any) -> Any


-- Generic types and type inference
-- --------------------------------


[case testInferenceInArgumentContext]
## CallExpr
from typing import Undefined, typevar, Generic
T = typevar('T')
f(g())
f(h(b))
f(h(c))

b = Undefined # type: B
c = Undefined # type: C

def f(a: 'A[B]') -> None: pass

def g() -> 'A[T]': pass
def h(a: T) -> 'A[T]': pass

class A(Generic[T]): pass
class B: pass
class C(B): pass
[out]
CallExpr(4) : void
CallExpr(4) : A[B]
CallExpr(5) : void
CallExpr(5) : A[B]
CallExpr(6) : void
CallExpr(6) : A[B]

[case testInferGenericTypeForLocalVariable]
from typing import Undefined, typevar, Generic
T = typevar('T')
def f() -> None:
  a = A(b)
  a
  a2, a3 = A(b), A(c)
  a2
  a3
b = Undefined # type: B
c = Undefined # type: C
class A(Generic[T]):
  def __init__(self, x: T) -> None: pass
class B: pass
class C: pass
[out]
CallExpr(4) : A[B]
NameExpr(4) : def [-1:B] (x: B) -> A[B]
NameExpr(4) : A[B]
NameExpr(4) : B
NameExpr(5) : A[B]
CallExpr(6) : A[B]
CallExpr(6) : A[C]
NameExpr(6) : def [-1:B] (x: B) -> A[B]
NameExpr(6) : def [-1:C] (x: C) -> A[C]
NameExpr(6) : A[B]
NameExpr(6) : A[C]
NameExpr(6) : B
NameExpr(6) : C
TupleExpr(6) : Tuple[A[B], A[C]]
NameExpr(7) : A[B]
NameExpr(8) : A[C]

[case testNestedGenericCalls]
from typing import Undefined, typevar, Generic
T = typevar('T')
S = typevar('S')
def h() -> None:
  g(f(c))

c = Undefined # type: C

class A(Generic[T]): pass
class B(Generic[T]): pass
class C: pass
def f(a: T) -> A[T]: pass
def g(a: S) -> B[S]: pass
[out]
CallExpr(5) : A[C]
CallExpr(5) : B[A[C]]
NameExpr(5) : C
NameExpr(5) : def [-1:C] (a: C) -> A[C]
NameExpr(5) : def [-1:A[C]] (a: A[C]) -> B[A[C]]

[case testInferListLiterals]
from typing import List
a = [] # type: List[A]
class A: pass
[builtins fixtures/list.py]
[out]
ListExpr(2) : builtins.list[A]

[case testInferGenericTypeInTypeAnyContext]
from typing import Any
a = [] # type: Any
[builtins fixtures/list.py]
[out]
ListExpr(2) : builtins.list[Any]

[case testHigherOrderFunction]
from typing import typevar, Function, List
t = typevar('t')
s = typevar('s')
map(
    f, 
    [A()])
def map(f: Function[[t], s], a: List[t]) -> List[s]: pass
class A: pass
class B: pass
def f(a: A) -> B: pass
[builtins fixtures/list.py]
[out]
CallExpr(4) : builtins.list[B]
NameExpr(4) : def [-1:A, -2:B] (f: def (A) -> B, a: builtins.list[A]) -> builtins.list[B]
NameExpr(5) : def (a: A) -> B
CallExpr(6) : A
ListExpr(6) : builtins.list[A]
NameExpr(6) : def () -> A


-- Lambdas
-- -------


[case testLambdaWithInferredType-skip]
from typing import Function, Undefined
f = lambda x: x.a # type: Function[[B], A]
class A: pass
class B:
  a = Undefined # type: A
[out]
FuncExpr(1) : def (B) -> A
MemberExpr(1) : A
NameExpr(1) : B

[case testLambdaWithInferredType2-skip]
from typing import List, Function, Undefined
f = lambda x: [] # type: Function[[B], List[A]]
class A: pass
class B:
  a = Undefined # type: A
[builtins fixtures/list.py]
[out]
FuncExpr(1) : def (B) -> builtins.list[A]
ListExpr(1) : builtins.list[A]

[case testLambdaAndHigherOrderFunction-skip]
from typing import typevar, Function, List
t = typevar('t')
s = typevar('s')
map(
  lambda x: f(x), [])
def map(f: Function[[t], s], a: List[t]) -> List[s]: pass
def f(a: 'A') -> 'B': pass
class A: pass
class B: pass
[builtins fixtures/list.py]
[out]
CallExpr(1) : builtins.list[B]
NameExpr(1) : def [-1:A, -2:B] (def (A) -> B f, builtins.list[A] a) -> builtins.list[B]
CallExpr(2) : B
FuncExpr(2) : def (A) -> B
NameExpr(2) : def (a: A) -> B
NameExpr(2) : A
ListExpr(3) : builtins.list[A]

[case testLambdaAndHigherOrderFunction2-skip]
## FuncExpr|NameExpr|ListExpr
from typing import typevar, List, Function
t = typevar('t')
s = typevar('s')
map(
  lambda x: [f(x)], [])
def map(f: Function[[t], List[s]], a: List[t]) -> List[s]: pass
def f(a: 'A') -> 'B': pass
class A: pass
class B: pass
[builtins fixtures/list.py]
[out]
NameExpr(2) : def [-1:A, -2:B] (def (A) -> builtins.list[B] f, builtins.list[A] a) -> builtins.list[B]
FuncExpr(3) : def (A) -> builtins.list[B]
ListExpr(3) : builtins.list[B]
NameExpr(3) : def (a: A) -> B
NameExpr(3) : A
ListExpr(4) : builtins.list[A]

[case testLambdaInListAndHigherOrderFunction-skip]
from typing import typevar, Function, List
t = typevar('t')
s = typevar('s')
map(
  [lambda x: x], [])
def map(f: List[Function[[t], s]], a: List[t]) -> List[s]: pass
class A: pass
[builtins fixtures/list.py]
[out]
-- TODO We probably should not silently infer 'any' types in statically typed 
--      context. Perhaps just fail instead?
CallExpr(1) : builtins.list[Any]
NameExpr(1) : def [-1:A, -2:any] (builtins.list[def (A) -> Any] f, builtins.list[A] a) -> builtins.list[Any]
FuncExpr(2) : def (A) -> A
ListExpr(2) : builtins.list[def (A) -> Any]
NameExpr(2) : A
ListExpr(3) : builtins.list[A]

[case testLambdaAndHigherOrderFunction3-skip]
from typing import typevar, Function, List, Undefined
t = typevar('t')
s = typevar('s')
map(
  lambda x: x.b, [])
def map(f: Function[[t], s], a: List[t]) -> List[s]: pass
class A:
  b = Undefined # type: B
class B: pass
[builtins fixtures/list.py]
[out]
CallExpr(1) : builtins.list[B]
NameExpr(1) : def [-1:A, -2:B] (def (A) -> B f, builtins.list[A] a) -> builtins.list[B]
FuncExpr(2) : def (A) -> B
MemberExpr(2) : B
NameExpr(2) : A
ListExpr(3) : builtins.list[A]

[case testLambdaAndHigherOrderFunctionAndKeywordArgs-skip]
from typing import typevar, Function, List, Undefined
t = typevar('t')
s = typevar('s')
map(
  a= [],
  f=lambda x: x.b)
def map(f: Function[[t], s], a: List[t]) -> List[s]: pass
class A:
  b = Undefined # type: B
class B: pass
[builtins fixtures/list.py]
[out]
CallExpr(1) : builtins.list[B]
NameExpr(1) : def [-1:A, -2:B] (def (A) -> B f, builtins.list[A] a) -> builtins.list[B]
ListExpr(2) : builtins.list[A]
FuncExpr(3) : def (A) -> B
MemberExpr(3) : B
NameExpr(3) : A


-- Boolean operations
-- ------------------


[case testBooleanOr-skip]
from typing import Undefined, List
a = Undefined # type: List[A]
a or []
a = a or []
a = [] or a
class A: pass
[builtins fixtures/list.py]
[out]
ListExpr(2) : builtins.list[A]
NameExpr(2) : builtins.list[A]
OpExpr(2) : builtins.list[A]
ListExpr(3) : builtins.list[A]
NameExpr(3) : builtins.list[A]
NameExpr(3) : builtins.list[A]
OpExpr(3) : builtins.list[A]
ListExpr(4) : builtins.list[A]
NameExpr(4) : builtins.list[A]
NameExpr(4) : builtins.list[A]
OpExpr(4) : builtins.list[A]


-- Class attributes
-- ----------------


[case testUnboundMethod]
## MemberExpr
import typing
class A:
    def f(self) -> None: pass
A.f
[out]
MemberExpr(5) : def (self: A)

[case testUnboundMethodWithImplicitSig]
## MemberExpr
import typing
class A:
    def f(self): pass
A.f
[out]
MemberExpr(5) : def (self: Any) -> Any

[case testOverloadedUnboundMethod]
## MemberExpr
from typing import overload
class A:
    @overload
    def f(self) -> None: pass
    @overload
    def f(self, x: object) -> None: pass
A.f
[out]
MemberExpr(8) : Overload(def (self: A), def (self: A, x: builtins.object))

[case testOverloadedUnboundMethodWithImplicitSig]
## MemberExpr
from typing import overload
class A:
    @overload
    def f(self): pass
    @overload
    def f(self, x): pass
A.f
[out]
MemberExpr(8) : Overload(def (self: Any) -> Any, def (self: Any, x: Any) -> Any)

[case testUnboundMethodWithInheritance]
## MemberExpr
import typing
class A:
    def __init__(self) -> None: pass
    def f(self) -> None: pass
class B(A):
    pass
B.f
[out]
MemberExpr(8) : def (self: A)

[case testUnboundGenericMethod]
## MemberExpr
from typing import typevar
t = typevar('t')
class B: pass
class A:
    def f(self, x: t) -> None: pass
A.f(A(), B())
[out]
MemberExpr(7) : def [-1:B] (self: A, x: B)

[case testUnboundMethodOfGenericClass]
## MemberExpr
from typing import typevar, Generic
t = typevar('t')
class B: pass
class A(Generic[t]):
    def f(self, x: t) -> None: pass
A.f
A.f(A[B](), B())
[out]
MemberExpr(7) : def [t] (self: A[t`1], x: t`1)
MemberExpr(8) : def [1:B] (self: A[B], x: B)

[case testUnboundOverloadedMethodOfGenericClass]
## CallExpr
from typing import typevar, Generic, overload, Undefined
t = typevar('t')
class B: pass
class A(Generic[t]):
    @overload
    def f(self, x: t) -> t: pass
    @overload
    def f(self) -> object: pass
ab, b = Undefined, Undefined # type: (A[B], B)
A.f(ab, b)
[out]
CallExpr(11) : B

[case testUnboundMethodOfGenericClassWithImplicitSig]
## MemberExpr
from typing import typevar, Generic
t = typevar('t')
class B: pass
class A(Generic[t]):
    def f(self, x): pass
A.f(None, None)
[out]
MemberExpr(7) : def (self: Any, x: Any) -> Any

[case testGenericMethodOfGenericClass]
## MemberExpr
from typing import typevar, Generic, Undefined
t = typevar('t')
s = typevar('s')
class B: pass
class A(Generic[t]):
    def f(self, y: s) -> None: pass
ab = Undefined # type: A[B]
o = Undefined # type: object
A.f(ab, o)
[out]
MemberExpr(10) : def [1:B, -1:builtins.object] (self: A[B], y: builtins.object)


-- Special cases
-- -------------


[case testImplicitDataAttributeInit-skip]
## NameExpr
import typing
class A:
    def __init__(self) -> None:
        self.x = (
                  A())
[out]
NameExpr(4) : A
NameExpr(5) : def () -> A


-- TODO
--
-- test expressions
--   list literal
--   tuple literal
--   unary minus
--   indexing
--   super expression
--   more complex lambda (multiple arguments etc.)
--   list comprehension
--   generator expression
-- overloads
-- other things
--   type inference
--   default argument value
--   for loop variable
--   exception variable
--   varargs
-- generics
--   explicit types
