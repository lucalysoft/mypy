-- Test cases for intermediate representation (icode) generation.
--
-- These test cases are related to simple (non-generic) classes.


-- Methods
-- -------


[case testEmptyMethod]
import typing
class A:
    def f(self) -> None: pass
[out]
def A.f:
    r1 = None
    return r1

[case testMethodWithArguments]
import typing
class A:
    def f(self, x: int, y: int) -> int:
        return x + y
[out]
def A.f:
    r3 = r1 + r2 [int]
    return r3
    
[case testCallMethodWithoutArguments]
import typing
class A:
    def f(self) -> None: pass
def g(a: A) -> None:
    a.f()
[out]
def g:
    r1 = r0.f() [A]
    r2 = None
    return r2
    
[case testCallMethodWithArguments]
import typing
class A:
    def f(self, x: int, y: int) -> int: return 1
def g(a: A) -> int:
    return a.f(1, 3)
[out]
def g:
    r1 = 1
    r2 = 3
    r3 = r0.f(r1, r2) [A]
    return r3
    
[case testCallMethodViaSelf]
import typing
class A:
    def f(self) -> None:
        self.f()
[out]
def A.f:
    r1 = r0.f() [A]
    r2 = None
    return r2


-- Attributes
-- ----------


[case testAttributeAccessors]
from typing import Undefined
class A:
    x = Undefined(int)
    y = Undefined(int)
[out]
def A.$x:
    r1 = r0.x [A]
    return r1
def A.set$x:
    r0.x = r1 [A]
    r2 = None
    return r2
def A.$y:
    r1 = r0.y [A]
    return r1
def A.set$y:
    r0.y = r1 [A]
    r2 = None
    return r2

[case testSetAndQueryAttribute]
import typing
class A:
    x = 0
    y = 0
def f(a: A) -> None:
    a.x = a.y
[out]
def f:
    r1 = r0.$y() [A]
    r2 = r0.set$x(r1) [A]
    r3 = None
    return r3


-- Constructing instances
-- ----------------------


[case testConstructInstanceWithDefaultConstructor]
import typing
class A:
    pass
A()
[out]
def __init:
    r0 = A()
    r1 = None
    return r1
def A:
    r0 = <construct A>
    return r0
    
[case testNonDefaultInit]
import typing
class A:
    def __init__(self, x: int) -> None:
        x = 2
A(2)
[out]
def __init:
    r0 = 2
    r1 = A(r0)
    r2 = None
    return r2
def A:
    r1 = <construct A>
    r2 = r1.__init__(r0) [static A]
    return r1
def A.__init__:
    r1 = 2
    r2 = None
    return r2

[case testInitializeAttributesWhenConstructing]
from typing import Undefined
class A:
    x = 0
    a = Undefined # type: A
[out]
def A:
    r0 = <construct A>
    r1 = None
    r0.a = r1 [A]
    r2 = 0
    r0.x = r2 [A]
    return r0
    
[case testAttributesAndInit]
import typing
class A:
    x = 0
    def __init__(self, y: int) -> None: pass
[out]
def A:
    r1 = <construct A>
    r2 = 0
    r1.x = r2 [A]
    r3 = r1.__init__(r0) [static A]
    return r1
    
[case testInheritedInit]
import typing
class A:
    def __init__(self, x: int) -> None:
        self.x = 2
class B(A): pass
[out]
def B:
    r1 = <construct B>
    r2 = r1.__init__(r0) [static A]
    return r1


-- None values
-- -----------


[case testNoneExpression]
import typing
class A: pass
def f(a: A) -> None:
    a = None
[out]
def f:
    r0 = None
    r1 = None
    return r1


-- super()
-- -------


[case testCallSuperInit]
import typing
class A:
    def __init__(self, x: int) -> None: pass
class B(A):
    def __init__(self, x: int, y: int) -> None:
        super().__init__(y)
[out]
def B.__init__:
    r3 = r0.__init__(r2) [static A]
    r4 = None
    return r4

[case testCallSuperMethod]
import typing
class A:
    def f(self, x: int) -> None: pass
class B(A):
    def f(self, x: int) -> None:
        super().f(x)
[out]
def B.f:
    r2 = r0.f(r1) [static A]
    r3 = None
    return r3
