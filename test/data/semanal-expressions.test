[case testLiterals]
(1, 'x', 1.1)
[out]
MypyFile:1(
  ExpressionStmt:1(
    ParenExpr:1(
      TupleExpr:1(
        IntExpr(1)
        StrExpr(x)
        FloatExpr(1.1)))))

[case testMemberExpr]
x = 1
x.y
[out]
MypyFile:1(
  AssignmentStmt:1(
    Lvalues(
      NameExpr(x*))
    IntExpr(1))
  ExpressionStmt:2(
    MemberExpr:2(
      NameExpr(x [__main__.x])
      y)))

[case testIndexExpr]
x = y = 1
x[y]
[out]
MypyFile:1(
  AssignmentStmt:1(
    Lvalues(
      NameExpr(x*)
      NameExpr(y*))
    IntExpr(1))
  ExpressionStmt:2(
    IndexExpr:2(
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y]))))

[case testBinaryOperations]
x = y = 1
x + y
x | y
x is not y
x == y
[out]
MypyFile:1(
  AssignmentStmt:1(
    Lvalues(
      NameExpr(x*)
      NameExpr(y*))
    IntExpr(1))
  ExpressionStmt:2(
    OpExpr:2(
      +
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y])))
  ExpressionStmt:3(
    OpExpr:3(
      |
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y])))
  ExpressionStmt:4(
    OpExpr:4(
      is not
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y])))
  ExpressionStmt:5(
    OpExpr:5(
      ==
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y]))))

[case testUnaryOperations]
x = 1
-x
~x
+x
not x
[out]
MypyFile:1(
  AssignmentStmt:1(
    Lvalues(
      NameExpr(x*))
    IntExpr(1))
  ExpressionStmt:2(
    UnaryExpr:2(
      -
      NameExpr(x [__main__.x])))
  ExpressionStmt:3(
    UnaryExpr:3(
      ~
      NameExpr(x [__main__.x])))
  ExpressionStmt:4(
    UnaryExpr:4(
      +
      NameExpr(x [__main__.x])))
  ExpressionStmt:5(
    UnaryExpr:5(
      not
      NameExpr(x [__main__.x]))))

[case testSlices]
x = y = z = 1
x[y:z:x]
x[:]
x[:y]
[out]
MypyFile:1(
  AssignmentStmt:1(
    Lvalues(
      NameExpr(x*)
      NameExpr(y*)
      NameExpr(z*))
    IntExpr(1))
  ExpressionStmt:2(
    IndexExpr:2(
      NameExpr(x [__main__.x])
      SliceExpr:2(
        NameExpr(y [__main__.y])
        NameExpr(z [__main__.z])
        NameExpr(x [__main__.x]))))
  ExpressionStmt:3(
    IndexExpr:3(
      NameExpr(x [__main__.x])
      SliceExpr:3(
        <empty>
        <empty>)))
  ExpressionStmt:4(
    IndexExpr:4(
      NameExpr(x [__main__.x])
      SliceExpr:4(
        <empty>
        NameExpr(y [__main__.y])))))
        
[case testTupleLiteral]
x = y = 1
x, y
[out]
MypyFile:1(
  AssignmentStmt:1(
    Lvalues(
      NameExpr(x*)
      NameExpr(y*))
    IntExpr(1))
  ExpressionStmt:2(
    TupleExpr:2(
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y]))))

[case testListLiteral]
x = y = 1
([], [x, y])
[out]
MypyFile:1(
  AssignmentStmt:1(
    Lvalues(
      NameExpr(x*)
      NameExpr(y*))
    IntExpr(1))
  ExpressionStmt:2(
    ParenExpr:2(
      TupleExpr:2(
        ListExpr:2()
        ListExpr:2(
          NameExpr(x [__main__.x])
          NameExpr(y [__main__.y]))))))

[case testDictLiterals]
x = y = 1
{ x : y, y : x }
[out]
MypyFile:1(
  AssignmentStmt:1(
    Lvalues(
      NameExpr(x*)
      NameExpr(y*))
    IntExpr(1))
  ExpressionStmt:2(
    DictExpr:2(
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y])
      NameExpr(y [__main__.y])
      NameExpr(x [__main__.x]))))

[case testListComprehension]
any a
([x + 1 for x in a])
[out]
MypyFile:1(
  VarDef:1(
    Var(a)
    Type(any))
  ExpressionStmt:2(
    ParenExpr:2(
      ListComprehension:2(
        GeneratorExpr:2(
          OpExpr:2(
            +
            NameExpr(x [l])
            IntExpr(1))
          NameExpr(x* [l])
          NameExpr(a [__main__.a]))))))

[case testListComprehensionInFunction]
void f(a):
    [x for x in a]
[out]
MypyFile:1(
  FuncDef:1(
    f
    Args(
      Var(a))
    Type:1(def (any a))
    Block:1(
      ExpressionStmt:2(
        ListComprehension:2(
          GeneratorExpr:2(
            NameExpr(x [l])
            NameExpr(x* [l])
            NameExpr(a [l])))))))

[case testListComprehensionWithCondition]
any a
a=[x for x in a if x]
[out]
MypyFile:1(
  VarDef:1(
    Var(a)
    Type(any))
  AssignmentStmt:2(
    Lvalues(
      NameExpr(a [__main__.a]))
    ListComprehension:2(
      GeneratorExpr:2(
        NameExpr(x [l])
        NameExpr(x* [l])
        NameExpr(a [__main__.a])
        NameExpr(x [l])))))

[case testGeneratorExpression]
any a
x for x in a
[out]
MypyFile:1(
  VarDef:1(
    Var(a)
    Type(any))
  ExpressionStmt:2(
    GeneratorExpr:2(
      NameExpr(x [l])
      NameExpr(x* [l])
      NameExpr(a [__main__.a]))))

[case testLambda]
any x
lambda: x
[out]
MypyFile:1(
  VarDef:1(
    Var(x)
    Type(any))
  ExpressionStmt:2(
    FuncExpr:2(
      Block:2(
        ReturnStmt:2(
          NameExpr(x [__main__.x]))))))

[case testLambdaWithArguments]
lambda x, y: x + y
[out]
MypyFile:1(
  ExpressionStmt:1(
    FuncExpr:1(
      Args(
        Var(x)
        Var(y))
      Block:1(
        ReturnStmt:1(
          OpExpr:1(
            +
            NameExpr(x [l])
            NameExpr(y [l])))))))

[case testLambdaWithSignature]
lambda A x: x
class A: pass
[out]
MypyFile:1(
  ExpressionStmt:1(
    FuncExpr:1(
      Args(
        Var(x))
      Type:1(def (__main__.A x) -> any)
      Block:1(
        ReturnStmt:1(
          NameExpr(x [l])))))
  TypeDef:2(
    A
    PassStmt:2()))
