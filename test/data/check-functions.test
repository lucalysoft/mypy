-- Test cases for the type checker related to functions, function types and 
-- calls.

-- See also check-varargs.test.


-- Function type basics
-- --------------------


[case testCallingVariableWithFunctionType]
func<B(A)> f
A a, B b
a = f(a)    # E: Incompatible types in assignment
b = f(b)    # E: Argument 1 has incompatible type "B"
b = f()     # E: Too few arguments
b = f(a, a) # E: Too many arguments
b = f(a)

class A: pass
class B: pass

[case testSubtypingFunctionTypes]
func<A(B)> f
func<A(A)> g
func<B(B)> h  # subtype of f
g = f  # E: Incompatible types in assignment
g = h  # E: Incompatible types in assignment
h = f  # E: Incompatible types in assignment
h = g  # E: Incompatible types in assignment
f = g
f = h
f = f
g = g
h = h

class A: pass
class B(A): pass

[case testFunctionTypeCompatibilityWithOtherTypes]
func<void()> f
A a, object o
a = f   # E: Incompatible types in assignment
f = a   # E: Incompatible types in assignment
f = o   # E: Incompatible types in assignment
f = f() # E: Function does not return a value

f = f
f = None
o = f

class A: pass

[case testFunctionSubtypingWithVoid]
func<void()> f
func<object()> g
f = g  # E: Incompatible types in assignment
g = f  # E: Incompatible types in assignment

f = f
g = g

[case testFunctionSubtypingWithMultipleArgs]
func<void(A, A)> f
func<void(A, B)> g
func<void(B, B)> h
f = g  # E: Incompatible types in assignment
f = h  # E: Incompatible types in assignment
g = h  # E: Incompatible types in assignment
g = f
h = f
h = g
f = f
g = g
h = h

class A: pass
class B(A): pass

[case testFunctionTypesWithDifferentArgumentCounts]
func<void()> f
func<void(A)> g
func<void(A, A)> h

f = g   # E: Incompatible types in assignment
f = h   # E: Incompatible types in assignment
h = f   # E: Incompatible types in assignment
h = g   # E: Incompatible types in assignment

f = f
g = g
h = h

class A: pass
[out]

[case testCompatibilityOfSimpleTypeObjectWithStdType]
type t
A a

a = A # E: Incompatible types in assignment
t = f # E: Incompatible types in assignment
t = A

class A:
    void __init__(self, A a): pass

void f(): pass

[case testFunctionTypesWithOverloads]
func<A(AA)> f
func<B(B)> g
func<AA(A)> h

h = i  # E: Incompatible types in assignment
f = j

f = i
g = i
g = j

A i(AA x):
    pass
B i(B x):
    pass
    
B j(B x):
    pass
AA j(A x):
    pass

class A: pass
class AA(A): pass
class B: pass

[case testOverloadWithThreeItems]
func<A(A)> g1
func<B(B)> g2
func<C(C)> g3
func<B(A)> g4
A a, B b, C c

b = f(a)  # E: Incompatible types in assignment
a = f(b)  # E: Incompatible types in assignment
b = f(c)  # E: Incompatible types in assignment
g4 = f    # E: Incompatible types in assignment

g1 = f
g2 = f
g3 = f
a = f(a)
b = f(b)
c = f(c)

A f(A x):
    pass

B f(B x):
    pass

C f(C x):
    pass

class A: pass
class B: pass
class C: pass


-- Default argument values
-- -----------------------


[case testDefaultArgumentExpressions]
void f(A x=A()):
    B b = x # Fail
    A a = x

void g(A x=B()): # Fail
    B b = x # Fail
    A a = x

class B: pass
class A: pass
[out]
main: In function "f":
main, line 2: Incompatible types in assignment
main: In function "g":
main, line 5: Incompatible types in assignment
main, line 6: Incompatible types in assignment

[case testDefaultArgumentsWithSubtypes]
void f(B x=A()): # E: Incompatible types in assignment
    pass
void g(A x=B()):
    pass

class A: pass
class B(A): pass
[out]
main: In function "f":

[case testMultipleDefaultArgumentExpressions]
void f(A x=B(), B y=B()): # Fail
    pass
void g(A x=A(), B y=A()): # Fail
    pass
void h(A x=A(), B y=B()):
    pass

class A: pass
class B: pass
[out]
main: In function "f":
main, line 1: Incompatible types in assignment
main: In function "g":
main, line 3: Incompatible types in assignment

[case testCallingFunctionsWithDefaultArgumentValues]
A a, B b
a = f()     # E: Incompatible types in assignment
b = f(b)    # E: Argument 1 to "f" has incompatible type "B"
b = f(a, a) # E: Too many arguments for "f"

b = f()
b = f(a)
b = f(AA())

B f(A x = None): pass

class A: pass
class AA(A): pass
class B: pass


-- Default argument values
-- -----------------------


[case testDefaultArgumentExpressions]
void f(A x=A()):
    B b = x # E: Incompatible types in assignment
    A a = x

class B: pass
class A: pass
[out]
main: In function "f":

[case testDefaultArgumentExpressions]
void f(A x=B()): # E: Incompatible types in assignment
    B b = x      # E: Incompatible types in assignment
    A a = x

class B: pass
class A: pass
[out]
main: In function "f":

[case testDefaultArgumentsWithSubtypes]
void f(B x=A()): # E: Incompatible types in assignment
    pass
void g(A x=B()):
    pass

class A: pass
class B(A): pass
[out]
main: In function "f":

[case testMultipleDefaultArgumentExpressions]
void f(A x=B(), B y=B()): # E: Incompatible types in assignment
    pass
void h(A x=A(), B y=B()):
    pass

class A: pass
class B: pass
[out]
main: In function "f":

[case testMultipleDefaultArgumentExpressions2]
void g(A x=A(), B y=A()): # E: Incompatible types in assignment
    pass

class A: pass
class B: pass
[out]
main: In function "g":

[case testCallingFunctionsWithDefaultArgumentValues]
A a, B b
a = f()     # Fail
b = f(b)    # Fail
b = f(a, a) # Fail

b = f()
b = f(a)
b = f(AA())

B f(A x=None): pass

class A: pass
class AA(A): pass 
class B: pass
[out]
main, line 2: Incompatible types in assignment
main, line 3: Argument 1 to "f" has incompatible type "B"
main, line 4: Too many arguments for "f"


-- Access to method defined as a data attribute
-- --------------------------------------------


[case testMethodAsDataAttribute]
class B: pass
any x
class A:
    func<void(A)> f = x
    func<void(A, B)> g = x
A a
a.f()
a.g(B())
a.f(a) # E: Too many arguments
a.g()  # E: Too few arguments

[case testMethodWithInvalidMethodAsDataAttribute]
class B: pass
any x
class A:
    func<void()> f = x
    func<void(B)> g = x
A a
a.f() # E: Invalid method type
a.g() # E: Invalid method type

[case testMethodWithDynamicallyTypedMethodAsDataAttribute]
class B: pass
any x
class A:
    func<any(any)> f = x
A a
a.f()
a.f(a) # E: Too many arguments

[case testOverloadedMethodAsDataAttribute]
class B: pass
class A:
    void f(self): pass
    void f(self, B b): pass
    g = f
A a
a.g()
a.g(B())
a.g(a) # E: No overload variant matches argument types

[case testMethodAsDataAttributeInferredFromDynamicallyTypedMethod]
class A:
    def f(self, x): pass
    g = f
A a
a.g(object())
a.g(a, a) # E: Too many arguments
a.g()     # E: Too few arguments

[case testMethodAsDataAttributeInGenericClass]
class B: pass
class A<t>:
    void f(self, t x): pass
    g = f
A<B> a
a.g(B())
a.g(a)   # E: Argument 1 has incompatible type A<B>

[case testInvalidMethodAsDataAttributeInGenericClass]
class B: pass
class C: pass
any x
class A<t>:
    func<void(A<B>)> f = x
A<B> ab
A<C> ac
ab.f()
ac.f()   # E: Invalid method type

[case testPartiallyTypedSelfInMethodDataAttribute]
class B: pass
class C: pass
any x
class A<t>:
    func<void(A)> f = x
A<B> ab
A<C> ac
ab.f()
ac.f()

[case testCallableDataAttribute]
class A:
    func<void()> g
    void __init__(self, func<void()> f):
        self.f = f
a = A(None)
a.f()
a.g()
a.f(a) # E: Too many arguments
a.g(a) # E: Too many arguments


-- Nested functions
-- ----------------


[case testSimpleNestedFunction]
void f(A a):
    void g(B b):
         b = a # fail
         A aa = a # ok
         b = B()
    g(a) # fail
    g(B())
class A: pass
class B: pass
[out]
main: In function "g":
main, line 3: Incompatible types in assignment
main: In function "f":
main, line 6: Argument 1 to "g" has incompatible type "A"

[case testReturnAndNestedFunction]
A f():
    B g():
        return A() # fail
        return B()
    return B() # fail
    return A()
class A: pass
class B: pass
[out]
main: In function "g":
main, line 3: Incompatible return value type
main: In function "f":
main, line 5: Incompatible return value type

[case testDynamicallyTypedNestedFunction]
void f(object x):
    def g(y):
        pass
    g() # E: Too few arguments for "g"
    g(x)
[out]
main: In function "f":


-- Casts
-- -----


[case testCastsToAndFromFunctionTypes]
void f<t>(t x, func<void()> f1, func<void(any)> f2, object o):
    x = (t)f1
    f1 = (func<void()>)x
    f1 = (func<void()>)f2
    f1 = (func<void()>)o


-- Function decorators
-- -------------------


[case testTrivialStaticallyTypedFunctionDecorator]
t dec<t>(t f):
    return f
@dec
void f(A x): pass
A a
B b
f(a)
f(b) # E: Argument 1 to "f" has incompatible type "B"
class A: pass
class B: pass

[case testTrivialStaticallyTypedMethodDecorator]
t dec<t>(t f):
    return f
class A:
    @dec
    void f(self, A x): pass
A a
B b
a.f(a)
a.f(b) # E: Argument 1 to "f" of "A" has incompatible type "B"
class B: pass

[case testTrivialDecoratedNestedFunction]
t dec<t>(t f):
    return f
A a, B b
void g():
    @dec
    void f(A x): pass
    f(a)
    f(b) # E: Argument 1 to "f" has incompatible type "B"
class A: pass
class B: pass
[out]
main: In function "g":

[case testCheckingDecoratedFunction]
def dec(f): pass
@dec
void f(A x):
    A a = x
    x = object() # E: Incompatible types in assignment
class A: pass
[out]
main: In function "f":

[case testDecoratorThatSwitchesType]
func<void()> dec(x): pass
@dec
def f(y): pass
f()
f(None) # E: Too many arguments for "f"

[case testDecoratorThatSwitchesTypeWithMethod]
func<void(any)> dec(x): pass
class A:
    @dec
    def f(self, a, b, c): pass
A a
a.f()
a.f(None) # E: Too many arguments for "f" of "A"

[case testNestedDecorators]
func<void()> dec1(func<void(any)> f): pass
func<void(any)> dec2(func<void(any, any)> f): pass
@dec1
@dec2
def f(x, y): pass
f()
f(None) # E: Too many arguments for "f"

[case testInvalidDecorator1]
func<void()> dec1(func<void(any)> f): pass
func<void(any)> dec2(func<void(any, any)> f): pass
@dec1 # E: Argument 1 to "dec2" has incompatible type
@dec2
def f(x): pass

[case testInvalidDecorator2]
func<void()> dec1(func<void(any, any)> f): pass
func<void(any)> dec2(func<void(any, any)> f): pass
@dec1 # E: Argument 1 to "dec1" has incompatible type
@dec2
def f(x, y): pass


-- Conditional function definition
-- -------------------------------


[case testTypeCheckBodyOfConditionalFunction]
any x
if x:
    void f(int x): 
        x = 1
        x = '' # E: Incompatible types in assignment
[out]
main: In function "f":

[case testCallConditionalFunction]
any x
if x:
    void f(int x):  pass
    f(1)
    f('x') # E: Argument 1 to "f" has incompatible type "str"
f(1)
f('x') # E: Argument 1 to "f" has incompatible type "str"

[case testConditionalFunctionDefinitionWithIfElse]
any x
if x:
    void f(int x):
        x = 'x'   # fail
        x = 1
else:
    void f(int x):
        x + 'x'   # fail
        x = 1
f(1)
f('x') # fail
[out]
main: In function "f":
main, line 4: Incompatible types in assignment
main, line 8: Unsupported left operand type for + ("int")
main: At top level:
main, line 11: Argument 1 to "f" has incompatible type "str"

[case testUnconditionalRedefinitionOfConditionalFunction]
any x
if x:
    def f(): pass
def f(): pass # E: Name 'f' already defined (overload variants must be next to each other)

[case testIncompatibleConditionalFunctionDefinition]
any x
if x:
    void f(int x): pass
else:
    def f(x): pass # E: All conditional function variants must have identical signatures

[case testIncompatibleConditionalFunctionDefinition2]
any x
if x:
    void f(int x): pass
else:
    void f(int y): pass # E: All conditional function variants must have identical signatures

[case testIncompatibleConditionalFunctionDefinition3]
any x
if x:
    void f(int x): pass
else:
    void f(int x=0): pass # E: All conditional function variants must have identical signatures


-- Conditional method definition
-- -----------------------------


[case testTypeCheckBodyOfConditionalMethod]
any x
class A:
    if x:
        void f(self, int x): 
            x = 1
            x = '' # E: Incompatible types in assignment
[out]
main: In member "f" of class "A":

[case testCallConditionalMethodInClassBody]
any x
class A:
    if x:
        void f(self, int x):  pass
        f(x, 1)
        f(x, 'x') # E: Argument 2 to "f" of "A" has incompatible type "str"
    f(x, 1)
    f(x, 'x') # E: Argument 2 to "f" of "A" has incompatible type "str"
[out]
main: In class "A":

[case testCallConditionalMethodViaInstance]
any x
class A:
    if x:
         void f(self, int x): pass
A().f(1)
A().f('x') # E: Argument 1 to "f" of "A" has incompatible type "str"
