-- Test cases for the type checker related to functions, function types and 
-- calls.

-- See also check-varargs.test.


-- Function type basics
-- --------------------


[case testCallingVariableWithFunctionType]
from typing import Undefined, Function
f = Undefined # type: Function[[A], B]
a, b = Undefined, Undefined # type: (A, B)
a = f(a)    # E: Incompatible types in assignment
b = f(b)    # E: Argument 1 has incompatible type "B"
b = f()     # E: Too few arguments
b = f(a, a) # E: Too many arguments
b = f(a)

class A: pass
class B: pass

[case testSubtypingFunctionTypes]
from typing import Undefined, Function
f = Undefined # type: Function[[B], A]
g = Undefined # type: Function[[A], A]
h = Undefined # type: Function[[B], B]  # subtype of f
g = f  # E: Incompatible types in assignment
g = h  # E: Incompatible types in assignment
h = f  # E: Incompatible types in assignment
h = g  # E: Incompatible types in assignment
f = g
f = h
f = f
g = g
h = h

class A: pass
class B(A): pass

[case testFunctionTypeCompatibilityWithOtherTypes]
from typing import Undefined, Function
f = Undefined # type: Function[[], None]
a, o = Undefined, Undefined # type: (A, object)
a = f   # E: Incompatible types in assignment
f = a   # E: Incompatible types in assignment
f = o   # E: Incompatible types in assignment
f = f() # E: Function does not return a value

f = f
f = None
o = f

class A: pass

[case testFunctionSubtypingWithVoid]
from typing import Undefined, Function
f = Undefined # type: Function[[], None]
g = Undefined # type: Function[[], object]
f = g  # E: Incompatible types in assignment
g = f  # E: Incompatible types in assignment

f = f
g = g

[case testFunctionSubtypingWithMultipleArgs]
from typing import Undefined, Function
f = Undefined # type: Function[[A, A], None]
g = Undefined # type: Function[[A, B], None]
h = Undefined # type: Function[[B, B], None]
f = g  # E: Incompatible types in assignment
f = h  # E: Incompatible types in assignment
g = h  # E: Incompatible types in assignment
g = f
h = f
h = g
f = f
g = g
h = h

class A: pass
class B(A): pass

[case testFunctionTypesWithDifferentArgumentCounts]
from typing import Undefined, Function
f = Undefined # type: Function[[], None]
g = Undefined # type: Function[[A], None]
h = Undefined # type: Function[[A, A], None]

f = g   # E: Incompatible types in assignment
f = h   # E: Incompatible types in assignment
h = f   # E: Incompatible types in assignment
h = g   # E: Incompatible types in assignment

f = f
g = g
h = h

class A: pass
[out]

[case testCompatibilityOfSimpleTypeObjectWithStdType]
from typing import Undefined
t = Undefined # type: type
a = Undefined # type: A

a = A # E: Incompatible types in assignment
t = f # E: Incompatible types in assignment
t = A

class A:
    def __init__(self, a: 'A') -> None: pass

def f() -> None: pass

[case testFunctionTypesWithOverloads]
from typing import Undefined, Function, overload
f = Undefined # type: Function[[AA], A]
g = Undefined # type: Function[[B], B]
h = Undefined # type: Function[[A], AA]

h = i  # E: Incompatible types in assignment
f = j

f = i
g = i
g = j

@overload
def i(x: 'AA') -> 'A':
    pass
@overload
def i(x: 'B') -> 'B':
    pass
    
@overload
def j(x: 'B') -> 'B':
    pass
@overload
def j(x: 'A') -> 'AA':
    pass

class A: pass
class AA(A): pass
class B: pass

[case testOverloadWithThreeItems]
from typing import Undefined, Function, overload
g1 = Undefined # type: Function[[A], A]
g2 = Undefined # type: Function[[B], B]
g3 = Undefined # type: Function[[C], C]
g4 = Undefined # type: Function[[A], B]
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)

b = f(a)  # E: Incompatible types in assignment
a = f(b)  # E: Incompatible types in assignment
b = f(c)  # E: Incompatible types in assignment
g4 = f    # E: Incompatible types in assignment

g1 = f
g2 = f
g3 = f
a = f(a)
b = f(b)
c = f(c)

@overload
def f(x: 'A') -> 'A':
    pass

@overload
def f(x: 'B') -> 'B':
    pass

@overload
def f(x: 'C') -> 'C':
    pass

class A: pass
class B: pass
class C: pass


-- Default argument values
-- -----------------------


[case testDefaultArgumentExpressions]
import typing
def f(x: 'A' = A()) -> None:
    b = x # type: B # Fail
    a = x # type: A

def g(x: 'A' = B()) -> None: # Fail
    b = x # type: B # Fail
    a = x # type: A

class B: pass
class A: pass
[out]
main: In function "f":
main, line 3: Incompatible types in assignment
main: In function "g":
main, line 6: Incompatible types in assignment
main, line 7: Incompatible types in assignment

[case testDefaultArgumentsWithSubtypes]
import typing
def f(x: 'B' = A()) -> None: # E: Incompatible types in assignment
    pass
def g(x: 'A' = B()) -> None:
    pass

class A: pass
class B(A): pass
[out]
main: In function "f":

[case testMultipleDefaultArgumentExpressions]
import typing
def f(x: 'A' = B(), y: 'B' = B()) -> None: # Fail
    pass
def g(x: 'A' = A(), y: 'B' = A()) -> None: # Fail
    pass
def h(x: 'A' = A(), y: 'B' = B()) -> None:
    pass

class A: pass
class B: pass
[out]
main: In function "f":
main, line 2: Incompatible types in assignment
main: In function "g":
main, line 4: Incompatible types in assignment

[case testCallingFunctionsWithDefaultArgumentValues]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
a = f()     # E: Incompatible types in assignment
b = f(b)    # E: Argument 1 to "f" has incompatible type "B"
b = f(a, a) # E: Too many arguments for "f"

b = f()
b = f(a)
b = f(AA())

def f(x: 'A'  =  None) -> 'B': pass

class A: pass
class AA(A): pass
class B: pass


-- Default argument values
-- -----------------------


[case testDefaultArgumentExpressions]
import typing
def f(x: 'A' = A()) -> None:
    b = x # type: B # E: Incompatible types in assignment
    a = x # type: A

class B: pass
class A: pass
[out]
main: In function "f":

[case testDefaultArgumentExpressions]
import typing
def f(x: 'A' = B()) -> None: # E: Incompatible types in assignment
    b = x # type: B      # E: Incompatible types in assignment
    a = x # type: A

class B: pass
class A: pass
[out]
main: In function "f":

[case testDefaultArgumentsWithSubtypes]
import typing
def f(x: 'B' = A()) -> None: # E: Incompatible types in assignment
    pass
def g(x: 'A' = B()) -> None:
    pass

class A: pass
class B(A): pass
[out]
main: In function "f":

[case testMultipleDefaultArgumentExpressions]
import typing
def f(x: 'A' = B(), y: 'B' = B()) -> None: # E: Incompatible types in assignment
    pass
def h(x: 'A' = A(), y: 'B' = B()) -> None:
    pass

class A: pass
class B: pass
[out]
main: In function "f":

[case testMultipleDefaultArgumentExpressions2]
import typing
def g(x: 'A' = A(), y: 'B' = A()) -> None: # E: Incompatible types in assignment
    pass

class A: pass
class B: pass
[out]
main: In function "g":

[case testCallingFunctionsWithDefaultArgumentValues]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
a = f()     # Fail
b = f(b)    # Fail
b = f(a, a) # Fail

b = f()
b = f(a)
b = f(AA())

def f(x: 'A' = None) -> 'B': pass

class A: pass
class AA(A): pass 
class B: pass
[out]
main, line 3: Incompatible types in assignment
main, line 4: Argument 1 to "f" has incompatible type "B"
main, line 5: Too many arguments for "f"


-- Access to method defined as a data attribute
-- --------------------------------------------


[case testMethodAsDataAttribute]
from typing import Undefined, Any, Function
class B: pass
x = Undefined # type: Any
class A:
    f = x # type: Function[[A], None]
    g = x # type: Function[[A, B], None]
a = Undefined # type: A
a.f()
a.g(B())
a.f(a) # E: Too many arguments
a.g()  # E: Too few arguments

[case testMethodWithInvalidMethodAsDataAttribute]
from typing import Undefined, Any, Function
class B: pass
x = Undefined # type: Any
class A:
    f = x # type: Function[[], None]
    g = x # type: Function[[B], None]
a = Undefined # type: A
a.f() # E: Invalid method type
a.g() # E: Invalid method type

[case testMethodWithDynamicallyTypedMethodAsDataAttribute]
from typing import Undefined, Any, Function
class B: pass
x = Undefined # type: Any
class A:
    f = x # type: Function[[Any], Any]
a = Undefined # type: A
a.f()
a.f(a) # E: Too many arguments

[case testOverloadedMethodAsDataAttribute]
from typing import overload, Undefined
class B: pass
class A:
    @overload
    def f(self) -> None: pass
    @overload
    def f(self, b: B) -> None: pass
    g = f
a = Undefined # type: A
a.g()
a.g(B())
a.g(a) # E: No overload variant matches argument types

[case testMethodAsDataAttributeInferredFromDynamicallyTypedMethod]
from typing import Undefined
class A:
    def f(self, x): pass
    g = f
a = Undefined # type: A
a.g(object())
a.g(a, a) # E: Too many arguments
a.g()     # E: Too few arguments

[case testMethodAsDataAttributeInGenericClass]
from typing import typevar, Generic, Undefined
t = typevar('t')
class B: pass
class A(Generic[t]):
    def f(self, x: t) -> None: pass
    g = f
a = Undefined # type: A[B]
a.g(B())
a.g(a)   # E: Argument 1 has incompatible type A<B>

[case testInvalidMethodAsDataAttributeInGenericClass]
from typing import Undefined, Any, typevar, Generic, Function
t = typevar('t')
class B: pass
class C: pass
x = Undefined # type: Any
class A(Generic[t]):
    f = x # type: Function[[A[B]], None]
ab = Undefined # type: A[B]
ac = Undefined # type: A[C]
ab.f()
ac.f()   # E: Invalid method type

[case testPartiallyTypedSelfInMethodDataAttribute]
from typing import Undefined, Any, typevar, Generic, Function
t = typevar('t')
class B: pass
class C: pass
x = Undefined # type: Any
class A(Generic[t]):
    f = x # type: Function[[A], None]
ab = Undefined # type: A[B]
ac = Undefined # type: A[C]
ab.f()
ac.f()

[case testCallableDataAttribute]
from typing import Undefined, Function
class A:
    g = Undefined # type: Function[[A], None]
    def __init__(self, f: Function[[], None]) -> None:
        self.f = f
a = A(None)
a.f()
a.g()
a.f(a) # E: Too many arguments
a.g(a) # E: Too many arguments


-- Nested functions
-- ----------------


[case testSimpleNestedFunction]
import typing
def f(a: 'A') -> None:
    def g(b: 'B') -> None:
         b = a # fail
         aa = a # type: A # ok
         b = B()
    g(a) # fail
    g(B())
class A: pass
class B: pass
[out]
main: In function "g":
main, line 4: Incompatible types in assignment
main: In function "f":
main, line 7: Argument 1 to "g" has incompatible type "A"

[case testReturnAndNestedFunction]
import typing
def f() -> 'A':
    def g() -> 'B':
        return A() # fail
        return B()
    return B() # fail
    return A()
class A: pass
class B: pass
[out]
main: In function "g":
main, line 4: Incompatible return value type
main: In function "f":
main, line 6: Incompatible return value type

[case testDynamicallyTypedNestedFunction]
import typing
def f(x: object) -> None:
    def g(y):
        pass
    g() # E: Too few arguments for "g"
    g(x)
[out]
main: In function "f":

[case testNestedFunctionInMethod]
import typing
class A:
    def f(self) -> None:
        def g(x: int) -> None:
            y = x # type: int
            a = x # type: A # fail
        g(2)
        g(A()) # fail
[out]
main: In function "g":
main, line 6: Incompatible types in assignment
main: In member "f" of class "A":
main, line 8: Argument 1 to "g" of "A" has incompatible type "A"


-- Casts
-- -----


[case testCastsToAndFromFunctionTypes]
from typing import typevar, Function, Any, cast
t = typevar('t')
def f(x: t,
      f1: Function[[], None],
      f2: Function[[Any], None], o: object) -> None:
    x = cast(t, f1)
    f1 = cast(Function[[], None], x)
    f1 = cast(Function[[], None], f2)
    f1 = cast(Function[[], None], o)


-- Function decorators
-- -------------------


[case testTrivialStaticallyTypedFunctionDecorator]
from typing import typevar
t = typevar('t')
def dec(f: t) -> t:
    return f
@dec
def f(x: int) -> None: pass
f(1)
f('x') # E: Argument 1 to "f" has incompatible type "str"

[case testTrivialStaticallyTypedMethodDecorator]
from typing import typevar
t = typevar('t')
def dec(f: t) -> t:
    return f
class A:
    @dec
    def f(self, x: int) -> None: pass
A().f(1)
A().f('') # E: Argument 1 to "f" of "A" has incompatible type "str"
class B: pass

[case testTrivialDecoratedNestedFunction]
from typing import typevar
t = typevar('t')
def dec(f: t) -> t:
    return f
def g() -> None:
    @dec
    def f(x: int) -> None: pass
    f(1)
    f('') # E: Argument 1 to "f" has incompatible type "str"
[out]
main: In function "g":

[case testCheckingDecoratedFunction]
import typing
def dec(f): pass
@dec
def f(x: 'A') -> None:
    a = x # type: A
    x = object() # E: Incompatible types in assignment
class A: pass
[out]
main: In function "f":

[case testDecoratorThatSwitchesType]
from typing import Function
def dec(x) -> Function[[], None]: pass
@dec
def f(y): pass
f()
f(None) # E: Too many arguments for "f"

[case testDecoratorThatSwitchesTypeWithMethod]
from typing import Any, Function, Undefined
def dec(x) -> Function[[Any], None]: pass
class A:
    @dec
    def f(self, a, b, c): pass
a = Undefined # type: A
a.f()
a.f(None) # E: Too many arguments for "f" of "A"

[case testNestedDecorators]
from typing import Any, Function
def dec1(f: Function[[Any], None]) -> Function[[], None]: pass
def dec2(f: Function[[Any, Any], None]) -> Function[[Any], None]: pass
@dec1
@dec2
def f(x, y): pass
f()
f(None) # E: Too many arguments for "f"

[case testInvalidDecorator1]
from typing import Any, Function
def dec1(f: Function[[Any], None]) -> Function[[], None]: pass
def dec2(f: Function[[Any, Any], None]) -> Function[[Any], None]: pass
@dec1 # E: Argument 1 to "dec2" has incompatible type
@dec2
def f(x): pass

[case testInvalidDecorator2]
from typing import Any, Function
def dec1(f: Function[[Any, Any], None]) -> Function[[], None]: pass
def dec2(f: Function[[Any, Any], None]) -> Function[[Any], None]: pass
@dec1 # E: Argument 1 to "dec1" has incompatible type
@dec2
def f(x, y): pass


-- Conditional function definition
-- -------------------------------


[case testTypeCheckBodyOfConditionalFunction]
from typing import Undefined, Any
x = Undefined # type: Any
if x:
    def f(x: int) -> None: 
        x = 1
        x = '' # E: Incompatible types in assignment
[out]
main: In function "f":

[case testCallConditionalFunction]
from typing import Undefined, Any
x = Undefined # type: Any
if x:
    def f(x: int) -> None:  pass
    f(1)
    f('x') # E: Argument 1 to "f" has incompatible type "str"
f(1)
f('x') # E: Argument 1 to "f" has incompatible type "str"

[case testConditionalFunctionDefinitionWithIfElse]
from typing import Undefined, Any
x = Undefined # type: Any
if x:
    def f(x: int) -> None:
        x = 'x'   # fail
        x = 1
else:
    def f(x: int) -> None:
        x + 'x'   # fail
        x = 1
f(1)
f('x') # fail
[out]
main: In function "f":
main, line 5: Incompatible types in assignment
main, line 9: Unsupported left operand type for + ("int")
main: At top level:
main, line 12: Argument 1 to "f" has incompatible type "str"

[case testUnconditionalRedefinitionOfConditionalFunction]
from typing import Undefined, Any
x = Undefined # type: Any
if x:
    def f(): pass
def f(): pass # E: Name 'f' already defined (overload variants must be next to each other)

[case testIncompatibleConditionalFunctionDefinition]
from typing import Undefined, Any
x = Undefined # type: Any
if x:
    def f(x: int) -> None: pass
else:
    def f(x): pass # E: All conditional function variants must have identical signatures

[case testIncompatibleConditionalFunctionDefinition2]
from typing import Undefined, Any
x = Undefined # type: Any
if x:
    def f(x: int) -> None: pass
else:
    def f(y: int) -> None: pass # E: All conditional function variants must have identical signatures

[case testIncompatibleConditionalFunctionDefinition3]
from typing import Undefined, Any
x = Undefined # type: Any
if x:
    def f(x: int) -> None: pass
else:
    def f(x: int = 0) -> None: pass # E: All conditional function variants must have identical signatures


-- Conditional method definition
-- -----------------------------


[case testTypeCheckBodyOfConditionalMethod]
from typing import Undefined, Any
x = Undefined # type: Any
class A:
    if x:
        def f(self, x: int) -> None: 
            x = 1
            x = '' # E: Incompatible types in assignment
[out]
main: In member "f" of class "A":

[case testCallConditionalMethodInClassBody]
from typing import Undefined, Any
x = Undefined # type: Any
class A:
    if x:
        def f(self, x: int) -> None:  pass
        f(x, 1)
        f(x, 'x') # E: Argument 2 to "f" of "A" has incompatible type "str"
    f(x, 1)
    f(x, 'x') # E: Argument 2 to "f" of "A" has incompatible type "str"
[out]
main: In class "A":

[case testCallConditionalMethodViaInstance]
from typing import Undefined, Any
x = Undefined # type: Any
class A:
    if x:
         def f(self, x: int) -> None: pass
A().f(1)
A().f('x') # E: Argument 1 to "f" of "A" has incompatible type "str"

[case testConditionalMethodDefinitionWithIfElse]
from typing import Undefined, Any
x = Undefined # type: Any
class A: 
    if x:
        def f(self, x: int) -> None:
            x = 'x'   # fail
            x = 1
    else:
        def f(self, x: int) -> None:
            x + 'x'   # fail
            x = 1
A().f(1)
A().f('x') # fail
[out]
main: In member "f" of class "A":
main, line 6: Incompatible types in assignment
main, line 10: Unsupported left operand type for + ("int")
main: At top level:
main, line 13: Argument 1 to "f" of "A" has incompatible type "str"

[case testUnconditionalRedefinitionOfConditionalMethod]
from typing import Undefined, Any
x = Undefined # type: Any
class A:
    if x:
        def f(self): pass
    def f(self): pass # E: Name 'f' already defined

[case testIncompatibleConditionalMethodDefinition]
from typing import Undefined, Any
x = Undefined # type: Any
class A:
    if x:
        def f(self, x: int) -> None: pass
    else:
        def f(self, x): pass # E: All conditional function variants must have identical signatures
[out]
main: In class "A":

[case testConditionalFunctionDefinitionInTry]
import typing
try:
    def f(x: int) -> None: pass
except:
    def g(x: str) -> None: pass
f(1)
f('x') # E: Argument 1 to "f" has incompatible type "str"
g('x')
g(1) # E: Argument 1 to "g" has incompatible type "int"
