-- Test cases for simple expressions.
--
-- See also: 
--  * check-functions.test contains test cases for calls.
--  * check-varargs.test contains test cases for *args.
--  * check-dynamic.test contains test cases related to 'any' type.
--  * check-generics.test contains test cases for generic values.


-- None
-- ----


[case testNoneAsRvalue]
import typing
a = None # type: A
class A: pass
[out]

[case testNoneAsArgument]
import typing
def f(x: 'A', y: 'B') -> None: pass
f(None, None)
class A: pass
class B(A): pass
[out]


-- Simple expressions
-- ------------------


[case testIntLiteral]
from typing import Undefined
a = 0
b = Undefined # type: A
b = 1
a = 1
class A:
    pass
[file builtins.py]
class object:
  def __init__(self): pass
class int: pass
[out]
main, line 4: Incompatible types in assignment

[case testStrLiteral]
from typing import Undefined
a = ''
b = Undefined # type: A
b = 'x'
a = 'x'
a = r"x"
a = """foo"""
class A:
    pass
[file builtins.py]
class object:
  def __init__(self): pass
class str: pass
[out]
main, line 4: Incompatible types in assignment

[case testFloatLiteral]
from typing import Undefined
a = 0.0
b = Undefined # type: A
b = 1.1
a = 1.1
class A:
    pass
[file builtins.py]
class object:
  def __init__(self): pass
class float: pass
[out]
main, line 4: Incompatible types in assignment

[case testBytesLiteral]
from typing import Undefined
b, a = Undefined, Undefined # type: (bytes, A)
b = b'foo'
b = br"foo"
b = b'''foo'''
a = b'foo' # E: Incompatible types in assignment
class A: pass
[file builtins.py]
class object:
    def __init__(self): pass
class bytes: pass


-- Binary operators
-- ----------------


[case testAdd]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
c = a + c  # Fail
a = a + b  # Fail
c = b + a  # Fail
c = a + b

class A:
    def __add__(self, x: 'B') -> 'C': pass
class B: pass
class C: pass
[out]
main, line 3: Unsupported operand types for + ("A" and "C")
main, line 4: Incompatible types in assignment
main, line 5: Unsupported left operand type for + ("B")
[case testAdd]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
c = a + c  # Fail
a = a + b  # Fail
c = b + a  # Fail
c = a + b

class A:
    def __add__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for + ("A" and "C")
main, line 4: Incompatible types in assignment
main, line 5: Unsupported left operand type for + ("B")

[case testSub]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
c = a - c  # Fail
a = a - b  # Fail
c = b - a  # Fail
c = a - b

class A:
    def __sub__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for - ("A" and "C")
main, line 4: Incompatible types in assignment
main, line 5: Unsupported left operand type for - ("B")

[case testMul]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
c = a * c  # Fail
a = a * b  # Fail
c = b * a  # Fail
c = a * b

class A:
    def __mul__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for * ("A" and "C")
main, line 4: Incompatible types in assignment
main, line 5: Unsupported left operand type for * ("B")

[case testDiv]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
c = a / c  # Fail
a = a / b  # Fail
c = b / a  # Fail
c = a / b

class A:
    def __truediv__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for / ("A" and "C")
main, line 4: Incompatible types in assignment
main, line 5: Unsupported left operand type for / ("B")

[case testIntDiv]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
c = a // c  # Fail
a = a // b  # Fail
c = b // a  # Fail
c = a // b

class A:
    def __floordiv__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for // ("A" and "C")
main, line 4: Incompatible types in assignment
main, line 5: Unsupported left operand type for // ("B")

[case testMod]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
c = a % c  # Fail
a = a % b  # Fail
c = b % a  # Fail
c = a % b

class A:
    def __mod__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for % ("A" and "C")
main, line 4: Incompatible types in assignment
main, line 5: Unsupported left operand type for % ("B")

[case testPow]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
c = a ** c  # Fail
a = a ** b  # Fail
c = b ** a  # Fail
c = a ** b

class A:
    def __pow__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for ** ("A" and "C")
main, line 4: Incompatible types in assignment
main, line 5: Unsupported left operand type for ** ("B")

[case testMiscBinaryOperators]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
b = a & a  # Fail
b = a | b  # Fail
b = a ^ a  # Fail
b = a << b # Fail
b = a >> a # Fail

b = a & b
b = a | a
b = a ^ b
b = a << a
b = a >> b
class A:
  def __and__(self, x: 'B') -> 'B': pass
  def __or__(self, x: 'A') -> 'B': pass
  def __xor__(self, x: 'B') -> 'B': pass
  def __lshift__(self, x: 'A') -> 'B': pass
  def __rshift__(self, x: 'B') -> 'B': pass
class B: pass
[out]
main, line 3: Unsupported operand types for & ("A" and "A")
main, line 4: Unsupported operand types for | ("A" and "B")
main, line 5: Unsupported operand types for ^ ("A" and "A")
main, line 6: Unsupported operand types for << ("A" and "B")
main, line 7: Unsupported operand types for >> ("A" and "A")

[case testBooleanAndOr]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, bool)
b = b and b
b = b or b
b = b and a # E: Incompatible types in assignment
b = a and b # E: Incompatible types in assignment
b = b or a  # E: Incompatible types in assignment
b = a or b  # E: Incompatible types in assignment
class A: pass
[builtins fixtures/bool.py]

[case testNonBooleanOr]
from typing import Undefined
c, d, b = Undefined, Undefined, Undefined # type: (C, D, bool)
c = c or c
c = c or d
c = d or c
b = c or c # E: Incompatible types in assignment
d = c or d # E: Incompatible types in assignment
d = d or c # E: Incompatible types in assignment
class C: pass
class D(C): pass
[builtins fixtures/bool.py]

[case testInOperator]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, bool)
c = c in a  # Fail
a = b in a  # Fail
c = a in b  # Fail
c = b in a

class A:
    def __contains__(self, x: 'B') -> bool: pass
class B: pass
class C: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Unsupported operand types for in ("bool" and "A")
main, line 4: Incompatible types in assignment
main, line 5: Unsupported right operand type for in ("B")

[case testNotInOperator]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, bool)
c = c not in a  # Fail
a = b not in a  # Fail
c = a not in b  # Fail
c = b not in a

class A:
    def __contains__(self, x: 'B') -> bool: pass
class B: pass
class C: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Unsupported operand types for in ("bool" and "A")
main, line 4: Incompatible types in assignment
main, line 5: Unsupported right operand type for in ("B")

[case testNonBooleanContainsReturnValue]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, bool)
b = a not in a
b = a in a

class A:
  def __contains__(self, x: 'A') -> object: pass
[builtins fixtures/bool.py]
[out]
main, line 4: Incompatible types in assignment

[case testEq]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, bool)
a = a == b # Fail
a = a != b # Fail
b = a == b
b = a != b

class A:
  def __eq__(self, o: object) -> bool: pass
  def __ne__(self, o: object) -> bool: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Incompatible types in assignment
main, line 4: Incompatible types in assignment

[case testLtAndGt]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, bool)
a = a < b # Fail
a = a > b # Fail
b = a < b
b = a > b

class A:
  def __lt__(self, o: object) -> bool: pass
  def __gt__(self, o: object) -> bool: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Incompatible types in assignment
main, line 4: Incompatible types in assignment

[case testLeAndGe]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, bool)
a = a <= b # Fail
a = a >= b # Fail
b = a <= b
b = a >= b

class A:
  def __le__(self, o: object) -> bool: pass
  def __ge__(self, o: object) -> bool: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Incompatible types in assignment
main, line 4: Incompatible types in assignment

[case testIs]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, bool)
a = a is b # Fail
b = a is b
b = b is a
b = a is None
class A: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Incompatible types in assignment

[case testIsNot]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, bool)
a = a is not b # Fail
b = a is not b
b = b is not a
b = a is not None
class A: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Incompatible types in assignment


-- Unary operators
-- ---------------


[case testUnaryMinus]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
a = -a   # Fail
b = -b   # Fail
b = -a

class A:
    def __neg__(self) -> 'B':
        pass
class B:
    pass
[out]
main, line 3: Incompatible types in assignment
main, line 4: Unsupported operand type for unary - ("B")

[case testUnaryNot]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, bool)
a = not b  # Fail
b = not a
b = not b
class A:
    pass
[builtins fixtures/bool.py]
[out]
main, line 3: Incompatible types in assignment

[case testUnaryBitwiseNeg]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
a = ~a   # Fail
b = ~b   # Fail
b = ~a

class A:
    def __invert__(self) -> 'B':
        pass
class B:
    pass
[out]
main, line 3: Incompatible types in assignment
main, line 4: Unsupported operand type for ~ ("B")


-- Indexing
-- --------


[case testIndexing]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
c = a[c]  # Fail
a = a[b]  # Fail
c = b[a]  # Fail
c = a[b]

class A:
    def __getitem__(self, x: 'B') -> 'C':
        pass
class B: pass
class C: pass
[out]
main, line 3: Invalid index type "C" for "A"
main, line 4: Incompatible types in assignment
main, line 5: Value of type "B" is not indexable

[case testIndexingAsLvalue]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
a[c] = c  # Fail
a[b] = a  # Fail
b[a] = c  # Fail
a[b] = c

class A:
    def __setitem__(self, x: 'B', y: 'C') -> None:
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Invalid index type "C" for "A"
main, line 4: Incompatible types in assignment
main, line 5: Unsupported target for indexed assignment


-- Cast expression
-- ---------------


[case testCastExpressions]
from typing import Undefined, cast, Any
class A: pass
class B: pass
class C(A): pass
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)

a = cast(A, a())       # E: "A" not callable
a = cast(Any, a())     # E: "A" not callable
b = cast(A, a)         # E: Incompatible types in assignment

a = cast(A, b)
a = cast(A, a)
c = cast(C, a)
a = cast(A, c)
a = cast(Any, b)
b = cast(Any, a)
[out]

[case testAnyCast]
from typing import Undefined, cast, Any
a, b = Undefined, Undefined # type: (A, B)
a = Any(a())     # Fail
a = Any(b)
b = Any(a)
class A: pass
class B: pass
[out]
main, line 3: "A" not callable


-- Void type
-- ---------


[case testVoidTypeBasics]
from typing import Undefined
a, o = Undefined, Undefined # type: (A, object)
a = f()         # Fail
o = A().g(a)    # Fail
A().g(f())      # Fail
x = f() # type: A # Fail
f()
A().g(a)

def f() -> None:
    pass

class A:
    def g(self, x: object) -> None:
        pass
[out]
main, line 3: "f" does not return a value
main, line 4: "g" of "A" does not return a value
main, line 5: "f" does not return a value
main, line 6: "f" does not return a value

[case testVoidWithStatements]
import typing
raise f() # Fail
if f():   # Fail
    pass
elif f(): # Fail
    pass
while f(): # Fail
    pass
def g() -> object:
    return f() # Fail

def f() -> None: pass
[builtins fixtures/exception.py]
[out]
main, line 2: "f" does not return a value
main, line 3: "f" does not return a value
main, line 5: "f" does not return a value
main, line 7: "f" does not return a value
main: In function "g":
main, line 10: "f" does not return a value

[case testVoidWithExpressions]
from typing import Undefined, cast
a = Undefined # type: A
[f()]       # E: "f" does not return a value
f() + a     # E: "f" does not return a value
a + f()     # E: "f" does not return a value
f() == a    # E: "f" does not return a value
a != f()    # E: Unsupported left operand type for != ("A")
cast(A, f()) # E: "f" does not return a value
f().foo     # E: "f" does not return a value

def f() -> None: pass
class A:
    def __add__(self, x: 'A') -> 'A': pass
[builtins fixtures/list.py]

[case testVoidWithExpressions2]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, bool)
a < f()    # E: Unsupported left operand type for < ("A")
f() <= a   # E: "f" does not return a value
f() in a   # E: Unsupported right operand type for in ("A")
a in f()   # E: "f" does not return a value
-f()       # E: "f" does not return a value
not f()    # E: "f" does not return a value
f() and b  # E: "f" does not return a value
b or f()   # E: "f" does not return a value

def f() -> None: pass
class A:
    def __add__(self, x: 'A') -> 'A':
        pass
[builtins fixtures/bool.py]


-- Slicing
-- -------


[case testGetSlice]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
a = a[1:2] # E: Incompatible types in assignment
a = a[1:]  # E: Incompatible types in assignment
a = a[:2]  # E: Incompatible types in assignment
a = a[:]   # E: Incompatible types in assignment

b = a[1:2]
b = a[1:]
b = a[:2]
b = a[:]

class A:
  def __getitem__(self, s: slice) -> 'B': pass
class B: pass
[builtins fixtures/slice.py]

[case testSlicingWithInvalidBase]
from typing import Undefined
a = Undefined # type: A
a[1:2] # E: Invalid index type "slice" for "A"
a[:]   # E: Invalid index type "slice" for "A"
class A:
  def __getitem__(self, n: int) -> 'A': pass
[builtins fixtures/slice.py]

[case testSlicingWithNonindexable]
from typing import Undefined
o = Undefined # type: object
o[1:2] # E: Value of type "object" is not indexable
o[:]   # E: Value of type "object" is not indexable
[builtins fixtures/slice.py]

[case testNonIntSliceBounds]
from typing import Undefined, Any
a, o = Undefined, Undefined # type: (Any, object)
a[o:1] # E: Slice index must be an integer or None
a[1:o] # E: Slice index must be an integer or None
a[o:]  # E: Slice index must be an integer or None
a[:o]  # E: Slice index must be an integer or None
[builtins fixtures/slice.py]

[case testNoneSliceBounds]
from typing import Undefined, Any
a = Undefined # type: Any
a[None:1]
a[1:None]
a[None:]
a[:None]
[builtins fixtures/slice.py]


-- Lambdas
-- -------


[case testTrivialLambda]
from typing import Function
f = lambda: 1 # type: Function[[], int]
f = lambda: ''.x
f = lambda: ''
[out]
main, line 3: "str" has no attribute "x"
main, line 4: Incompatible return value type
main, line 4: Incompatible types in assignment


-- List comprehensions
-- -------------------


[case testSimpleListComprehension]
from typing import Undefined, List
a = Undefined # type: List[A]
a = [x for x in a]
b = [x for x in a] # type: List[B] # E: List comprehension has incompatible type List[A]
class A: pass
class B: pass
[builtins fixtures/for.py]

[case testListComprehensionWithNonDirectMapping]
from typing import Undefined, List
a = Undefined # type: List[A]
b = Undefined # type: List[B]
b = [f(x) for x in a]
a = [f(x) for x in a] # E: List comprehension has incompatible type List[B]
([f(x) for x in b])   # E: Argument 1 to "f" has incompatible type "B"
class A: pass
class B: pass
def f(a: A) -> B: pass
[builtins fixtures/for.py]

[case testErrorInListComprehensionCondition]
from typing import Undefined, List
a = Undefined # type: List[A]
a = [x for x in a if x()] # E: "A" not callable
class A: pass
[builtins fixtures/for.py]

[case testTypeInferenceOfListComprehension]
from typing import Undefined, List
a = Undefined # type: List[A]
o = [x for x in a] # type: List[object]
class A: pass
[builtins fixtures/for.py]


-- Generator expressions
-- ---------------------


[case testSimpleGeneratorExpression]
from typing import Undefined, Iterator
# The implementation is mostly identical to list comprehensions, so a single 
# test case is ok.
a = Undefined # type: Iterator[int]
a = x for x in a
b = Undefined # type: Iterator[str]
b = x for x in a # E: Generator has incompatible item type "int"
[builtins fixtures/for.py]


-- Special cases
-- -------------


[case testOperationsWithNonInstanceTypes]
from typing import Undefined, cast
class A:
    def __add__(self, a: 'A') -> 'A': pass
a = Undefined # type: A
None + a   # Fail
f + a      # Fail
a + f      # Fail
cast(A, f)

def f() -> None:
    pass
[out]
main, line 5: Unsupported left operand type for + (None)
main, line 6: Unsupported left operand type for + (function)
main, line 7: Unsupported operand types for + ("A" and function)

[case testOperatorMethodWithInvalidArgCount]
from typing import Undefined
a = Undefined # type: A
a + a  # Fail

class A:
    def __add__(self) -> 'A':
        pass
[out]
main, line 3: Too many arguments for "__add__" of "A"

[case testOperatorMethodAsVar]
from typing import Any, Undefined
class A:
    def __init__(self, _add: Any) -> None:
        self.__add__ = _add
a = Undefined # type: A
a + a   # Currently fails (but should work in the future)
[out]
main, line 6: Expected operator method "__add__" in "A"

[case testIndexedLvalueWithSubtypes]
from typing import Undefined
a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)
a[c] = c
a[b] = c
a[c] = b

class A:
    def __setitem__(self, x: 'B', y: 'B') -> None:
        pass
class B:
    pass
class C(B):
    pass
[out]
