-- Test cases for intermediate representation (icode) generation.
--
-- Only functions mentioned in the [out] section are checked; others are 
-- ignored.
--
-- There is no register sharing. Each temporary value is given a new register.


-- The very basics
-- ---------------


[case testEmptyFunction]
import typing
def f() -> None: pass
[out]
def f:
    r0 = None
    return r0

[case testReturnIntLiteral]
import typing
def f() -> int:
    return 2
[out]
def f:
    r0 = 2
    return r0
    
[case testAssignAndReturnLocalVar]
import typing
def f() -> int:
    i = 2
    return i
[out]
def f:
    r0 = 2
    return r0
    
[case testAssignTwice]
import typing
def f() -> int:
    i = 2
    i = 3
    return i
[out]
def f:
    r0 = 2
    r0 = 3
    return r0
    
[case testAssignLocalToLocal]
import typing
def f() -> int:
    i = 2
    j = i
    return j
[out]
def f:
    r0 = 2
    r1 = r0
    return r1
    
[case testFunctionArgs]
import typing
def f(a: int, b: int) -> int:
    c = a
    a = b
    return a
[out]
def f:
    r2 = r0
    r0 = r1
    return r0


-- Conditionals and loops
-- ----------------------


[case testSimpleWhileLoop]
import typing
def f() -> None:
    i = 0
    while i < 100:
        i = i + 1
[out]
def f:
    r0 = 0
L1:
    if r0 < 100 goto L2 else goto L3
L2:
    r0 = r0 + 1 [int]
    goto L1
L3:
    r1 = None
    return r1

[case testIfWithoutElse]
import typing
def f() -> None:
    if 2 < 3:
        i = 1
[out]
def f:
    if 2 < 3 goto L1 else goto L2
L1:
    r0 = 1
L2:
    r1 = None
    return r1

[case testIfWithElse]
import typing
def f() -> None:
    if 2 < 3:
        i = 1
    else:
        i = 2
[out]
def f:
    if 2 < 3 goto L1 else goto L2
L1:
    r0 = 1
    goto L3
L2:
    r0 = 2
L3:
    r1 = None
    return r1


-- Primitive arithmetic expressions
-- --------------------------------


[case testComplexArithmeticExpression]
import typing
def f() -> int:
    return 3 * (1 + 2) - 4
[out]
def f:
    r0 = 1 + 2 [int]
    r1 = 3 * r0 [int]
    r2 = r1 - 4 [int]
    return r2
    
[case testUnaryExpression]
import typing
def f() -> int:
    return -1 + -(4 + 5)
[out]
def f:
    r0 = 1
    r1 = -r0 [int]
    r2 = 4 + 5 [int]
    r3 = -r2 [int]
    r4 = r1 + r3 [int]
    return r4


-- Boolean expressions
-- -------------------


[case testBooleanAnd]
import typing
def f() -> None:
    if 1 == 2 and 3 > 4:
        i = 1
[out]
def f:
    if 1 == 2 goto L1 else goto L3
L1:
    if 3 > 4 goto L2 else goto L3
L2:
    r0 = 1
L3:
    r1 = None
    return r1
    
[case testBooleanOr]
import typing
def f() -> None:
    if 1 == 2 or 3 > 4:
        i = 1
[out]
def f:
    if 1 == 2 goto L2 else goto L1
L1:
    if 3 > 4 goto L2 else goto L3
L2:
    r0 = 1
L3:
    r1 = None
    return r1
    
[case testSimpleBooleanNot]
import typing
def f() -> None:
    if not 1 == 2:
        i = 1
[out]
def f:
    if 1 != 2 goto L1 else goto L2
L1:
    r0 = 1
L2:
    r1 = None
    return r1
    
[case testNotAnd]
import typing
def f() -> None:
    if not (1 == 2 and 3 == 4):
        i = 1
[out]
def f:
    if 1 != 2 goto L2 else goto L1
L1:
    if 3 != 4 goto L2 else goto L3
L2:
    r0 = 1
L3:
    r1 = None
    return r1

[case testNotOr]
import typing
def f() -> None:
    if not (1 == 2 or 3 == 4):
        i = 1
[out]
def f:
    if 1 != 2 goto L1 else goto L3
L1:
    if 3 != 4 goto L2 else goto L3
L2:
    r0 = 1
L3:
    r1 = None
    return r1


-- Calls
-- -----


[case testCallFunctionWithoutArgs]
import typing
def f() -> int:
    return f()
[out]
def f:
    r0 = f()
    return r0
    
[case testCallWithArgument]
import typing
def f(a: int) -> None:
    f(a + 1)
[out]
def f:
    r1 = r0 + 1 [int]
    r2 = f(r1)
    r3 = None
    return r3

[case testCallWithArguments]
import typing
def f(a: int, b: int) -> int:
    return f(2, a + 1)
[out]
def f:
    r2 = 2
    r3 = r0 + 1 [int]
    r4 = f(r2, r3)
    return r4


-- Top level
-- ---------


[case testTopLevel]
import typing
f()
def f() -> int:
    return 1
f()
[out]
def __init:
    r0 = f()
    r1 = f()
    r2 = None
    return r2
def f:
    r0 = 1
    return r0


-- Print function
-- --------------


[case testPrintInt]
import typing
print(5)
[out]
def __init:
    r0 = 5
    r1 = print(r0)
    r2 = None
    return r2


-- Global variables
-- ----------------


[case testGlobalVariable]
import typing
x = 1
y = x + 1
def f() -> int:
    return y
[out]
def __init:
    r0 = 1
    __main__.x = r0
    r1 = __main__.x
    r2 = r1 + 1 [int]
    __main__.y = r2
    r3 = None
    return r3
def f:
    r0 = __main__.y
    return r0

[case testGlobalVariableInitialize]
import typing
class A: pass
n = 1
a = A()
[out]
def __init:
    r0 = None
    __main__.a = r0
    r1 = 1
    __main__.n = r1
    r2 = A()
    __main__.a = r2
    r3 = None
    return r3

[case testValueConditionalCheck]
import typing
class A: pass
def f(a: A) -> None:
    if a:
        a = A()
[out]
def f:
    if r0 goto L1 else goto L2
L1:
    r0 = A()
L2:
    r1 = None
    return r1

[case testNegatedValueConditionalCheck]
import typing
class A: pass
def f(a: A) -> None:
    if not a:
        a = A()
[out]
def f:
    if not r0 goto L1 else goto L2
L1:
    r0 = A()
L2:
    r1 = None
    return r1

[case testLocalWithExplicitType]
import typing
def f() -> None:
    x = 2 # type: int
    x = 3
[out]
def f:
    r0 = 2
    r0 = 3
    r1 = None
    return r1

[case testLocalWithExplicitType2]
from typing import Undefined
def f() -> None:
    x = Undefined # type: int
    x = 5
[out]
def f:
    r0 = 5
    r1 = None
    return r1

[case testLocalWithExplicitType3]
from typing import Undefined
def f() -> None:
    x = Undefined(int)
    x = 6
[out]
def f:
    r0 = 6
    r1 = None
    return r1

[case testGlobalWithExplicitType]
import typing
x = 2 # type: int
x = 3
[out]
def __init:
    r0 = 2
    __main__.x = r0
    r1 = 3
    __main__.x = r1
    r2 = None
    return r2

[case testGlobalWithExplicitType2]
from typing import Undefined
y = Undefined # type: int
y = 3
[out]
def __init:
    r0 = 3
    __main__.y = r0
    r1 = None
    return r1

[case testGlobalWithExplicitType3]
from typing import Undefined
x = Undefined(int)
x = 3
[out]
def __init:
    r0 = 3
    __main__.x = r0
    r1 = None
    return r1

[case testImplicitZeroReturn]
import typing
def f() -> int: pass
[out]
def f:
    r0 = 0
    return r0


-- Operator overloading
-- --------------------


[case testOverloadedAdd]
import typing
class A:
    def __add__(self, x: int) -> int: pass
def f() -> int:
    return A() + 2
[out]
def f:
    r0 = A()
    r1 = 2
    r2 = r0.__add__(r1) [A]
    return r2

[case testOverloadedMul]
import typing
class A:
    def __mul__(self, x: int) -> int: pass
def f() -> int:
    return A() * 2
[out]
def f:
    r0 = A()
    r1 = 2
    r2 = r0.__mul__(r1) [A]
    return r2

[case testOverloadedIn]
import typing
class A:
    def __contains__(self, x: int) -> int: pass
def f() -> int:
    return 2 in A()
[out]
def f:
    r0 = 2
    r1 = A()
    r2 = r1.__contains__(r0) [A]
    return r2

[case testIndexedGet]
import typing
class A:
    def __getitem__(self, x: int) -> int: pass
def f(a: A, n: int) -> int:
    return a[n]
[out]
def f:
    r2 = r0.__getitem__(r1) [A]
    return r2

[case testIndexedSet]
import typing
class A:
    def __setitem__(self, x: int, y: int) -> None: pass
def f(a: A, n: int, m: int) -> None:
    a[m] = n
[out]
def f:
    r3 = r0.__setitem__(r2, r1) [A]
    r4 = None
    return r4

[case testOverloadedUnaryOps]
import typing
class A:
    def __neg__(self) -> int: pass
    def __pos__(self) -> int: pass
    def __invert__(self) -> int: pass
def f(a: A) -> int:
    return -a
def g(a: A) -> int:
    return +a
def h(a: A) -> int:
    return ~a
[out]
def f:
    r1 = r0.__neg__() [A]
    return r1
def g:
    r1 = r0.__pos__() [A]
    return r1
def h:
    r1 = r0.__invert__() [A]
    return r1
