-- Test cases for the type checker.

[case testAccessImportedDefinitions]
import m
import typing
m.f()           # E: Too few arguments for "f"
m.f(object())   # E: Argument 1 to "f" has incompatible type "object"
m.x = object()  # E: Incompatible types in assignment
m.f(m.A())
m.x = m.A()
[file m.py]
class A: pass
def f(a: A) -> None: pass
x = A()

[case testAccessImportedDefinitions]
import m
import typing
m.f(object()) # E: Argument 1 to "f" has incompatible type "object"
m.f(m.A())
[file m.py]
class A: pass
def f(a: A) -> None: pass

[case testAccessImportedDefinitions2]
from m import f, A
import typing
f(object()) # E: Argument 1 to "f" has incompatible type "object"
f(A())
[file m.py]
class A: pass
def f(a: A) -> None: pass

[case testImportedExceptionType]
import m
import typing
try: 
    pass
except m.Err:
    pass
except m.Bad: # E: Exception type must be derived from BaseException
    pass
[file m.py]
class Err(BaseException): pass
class Bad: pass
[builtins fixtures/exception.py]

[case testImportedExceptionType2]
from m import Err, Bad
import typing
try: 
    pass
except Err:
    pass
except Bad: # E: Exception type must be derived from BaseException
    pass
[file m.py]
class Err(BaseException): pass
class Bad: pass
[builtins fixtures/exception.py]

[case testImportWithinBlock]
import typing
if None:
    import m
    m.a = m.b   # E: Incompatible types in assignment
    m.a = m.a
    m.f()
    m.f(m.a)    # E: Too many arguments for "f"
    m.a = m.A()
    m.a = m.B() # E: Incompatible types in assignment
[file m.py]
class A: pass
class B: pass
a = A()
b = B()
def f() -> None: pass

[case testImportWithinFunction]
import typing
def f() -> None:
    from m import a, b, f, A, B
    a = b   # E: Incompatible types in assignment
    a = a
    f()
    f(a)    # E: Too many arguments for "f"
    a = A()
    a = B() # E: Incompatible types in assignment
[file m.py]
class A: pass
class B: pass
a = A()
b = B()
def f() -> None: pass
[out]
main: In function "f":

[case testImportWithinMethod]
import typing
class C:
    def f(self) -> None:
        from m import *
        a = b   # E: Incompatible types in assignment
        a = a
        f()
        f(a)    # E: Too many arguments for "f"
        a = A()
        a = B() # E: Incompatible types in assignment
[file m.py]
class A: pass
class B: pass
a = A()
b = B()
def f() -> None: pass
[out]
main: In member "f" of class "C":

[case testImportWithinClassBody]
import typing
class C:
    import m
    m.f()
    m.f(C) # E: Too many arguments for "f"
[file m.py]
def f() -> None: pass
[out]
main: In class "C":

[case testImportWithinClassBody2]
import typing
class C:
    from m import f
    f()
    f(C) # E: Too many arguments for "f"
[file m.py]
def f() -> None: pass
[out]
main: In class "C":

[case testInvalidOperationsOnModules]
import m
import typing
class A: pass
m()      # E: "module" not callable
a = m # type: A  # E: Incompatible types in assignment
m + None # E: Unsupported left operand type for + ("module")
[file m.py]
[builtins fixtures/module.py]

[case testNameDefinedInDifferentModule]
import m, n
import typing
m.x # E: "module" has no attribute "x"
[file m.py]
y = object()
[file n.py]
x = object()
[builtins fixtures/module.py]

[case testChainedAssignmentAndImports]
import m
from typing import Undefined
i, s = Undefined, Undefined # type: (int, str)
i = m.x
i = m.y
s = m.x # E: Incompatible types in assignment
s = m.y # E: Incompatible types in assignment
[file m.py]
x = y = 1
[builtins fixtures/primitives.py]

[case testConditionalFunctionDefinitionAndImports]
import m
import typing
m.f(1)
m.f('x') # E: Argument 1 to "f" has incompatible type "str"
[file m.py]
x = object()
if x:
    def f(x: int) -> None: pass
else:
    def f(x: int) -> None: pass

[case testTypeCheckWithUnknownModule]
import nonexistent
None + ''
[out]
main, line 1: No module named 'nonexistent'  
main, line 2: Unsupported left operand type for + (None)

[case testTypeCheckWithUnknownModule2]
import m, nonexistent
None + ''
m.x = 1
m.x = ''
[file m.py]
x = 1
[out]
main, line 1: No module named 'nonexistent'  
main, line 2: Unsupported left operand type for + (None)
main, line 4: Incompatible types in assignment

[case testTypeCheckWithUnknownModule3]
import nonexistent, m
None + ''
m.x = 1
m.x = ''
[file m.py]
x = 1
[out]
main, line 1: No module named 'nonexistent'  
main, line 2: Unsupported left operand type for + (None)
main, line 4: Incompatible types in assignment

[case testTypeCheckWithUnknownModule4]
import nonexistent, another
None + ''
[out]
main, line 1: No module named 'nonexistent'
main, line 1: No module named 'another'
main, line 2: Unsupported left operand type for + (None)

[case testTypeCheckWithUnknownModule5]
import nonexistent as x
None + ''
[out]
main, line 1: No module named 'nonexistent'
main, line 2: Unsupported left operand type for + (None)

[case testTypeCheckWithUnknownModuleUsingFromImport]
from nonexistent import x
None + ''
[out]
main, line 1: No module named 'nonexistent'  
main, line 2: Unsupported left operand type for + (None)

[case testTypeCheckWithUnknownModuleUsingImportStar]
from nonexistent import *
None + ''
[out]
main, line 1: No module named 'nonexistent'  
main, line 2: Unsupported left operand type for + (None)

[case testAccessingUnknownModule]
import xyz
xyz.foo()
xyz()
[out]
main, line 1: No module named 'xyz'

[case testAccessingUnknownModule2]
import xyz, bar
xyz.foo()
bar()
[out]
main, line 1: No module named 'xyz'
main, line 1: No module named 'bar'

[case testAccessingUnknownModule3]
import xyz as z
xyz.foo()
z()
[out]
main, line 1: No module named 'xyz'
main, line 2: Name 'xyz' is not defined

[case testAccessingNameImportedFromUnknownModule]
from xyz import y, z
y.foo()
z()
[out]
main, line 1: No module named 'xyz'

[case testAccessingNameImportedFromUnknownModule2]
from xyz import *
y
[out]
main, line 1: No module named 'xyz'
main, line 2: Name 'y' is not defined

[case testAccessingNameImportedFromUnknownModule3]
from xyz import y as z
y
z
[out]
main, line 1: No module named 'xyz'
main, line 2: Name 'y' is not defined
