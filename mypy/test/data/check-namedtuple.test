[case testNamedTupleUsedAsTuple]
from collections import namedtuple
from typing import Undefined
X = namedtuple('X', ['x', 'y'])
x = Undefined(X)
a, b = x
b = x[0]
a = x[1]
a, b, c = x # E: Need more than 2 values to unpack (3 expected)
x[2] # E: Tuple index out of range

[case testAccessingNamedTupleAttributes]
from collections import namedtuple
from typing import Undefined
X = namedtuple('X', ['x', 'y'])
x = Undefined(X)
x.x
x.y
x.z # E: "X" has no attribute "z"

[case testCreateNamedTupleWithPositionalArguments]
from collections import namedtuple
from typing import Undefined
X = namedtuple('X', ['x', 'y'])
x = X(1, 'x')
x.x
x.z      # E: "X" has no attribute "z"
x = X(1) # E: Too few arguments for "X"
x = X(1, 2, 3)  # E: Too many arguments for "X"

[case testCreateNamedTupleWithKeywordArguments]
from collections import namedtuple
from typing import Undefined
X = namedtuple('X', ['x', 'y'])
x = X(x=1, y='x')
x = X(1, y='x')
x = X(x=1, z=1) # E: Unexpected keyword argument "z" for "X"
x = X(y=1) # E: Too few arguments for "X"

[case testCreateNamedTupleAndUseAsTuple]
from collections import namedtuple
from typing import Undefined
X = namedtuple('X', ['x', 'y'])
x = X(1, 'x')
a, b = x
a, b, c = x  # E: Need more than 2 values to unpack (3 expected)

[case testNamedTupleWithItemTypes]
from typing import NamedTuple
N = NamedTuple('N', [('a', int),
                     ('b', str)])
n = N(1, 'x')
s = n.a # type: str  # E: Incompatible types in assignment (expression has type "int", \
                          variable has type "str")
i = n.b # type: int  # E: Incompatible types in assignment (expression has type "str", \
                          variable has type "int")
x, y = n
x = y  # E: Incompatible types in assignment (expression has type "str", variable has type "int")
