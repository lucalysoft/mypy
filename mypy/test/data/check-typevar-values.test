-- Test cases for type variables with values restriction.


[case testCallGenericFunctionWithTypeVarValueRestriction]
from typing import typevar
T = typevar('T', values=(int, str))
def f(x: T) -> None: pass
f(1)
f('x')
f(object()) # E: Type argument 1 of "f" has incompatible value "object"

[case testCallGenericFunctionWithTypeVarValueRestrictionUsingContext]
from typing import typevar, List
T = typevar('T', values=(int, str))
def f(x: T) -> List[T]: pass
i = [1]
s = ['x']
o = [object()]
i = f(1)
s = f('')
o = f(1) # E: Type argument 1 of "f" has incompatible value "object"
[builtins fixtures/list.py]

[case testCallGenericFunctionWithTypeVarValueRestrictionAndAnyArgs]
from typing import typevar, Any
T = typevar('T', values=(int, str))
def f(x: T) -> None: pass
f(Any(object()))
[out]

[case testCallGenericFunctionWithTypeVarValueRestrictionInDynamicFunc]
from typing import typevar, Any
T = typevar('T', values=(int, str))
def f(x: T) -> None: pass
def g():
    f(object())
[out]

[case testCallGenericFunctionWithTypeVarValueRestrictionUsingSubtype]
from typing import typevar
T = typevar('T', values=(int, str))
def f(x: T) -> None: pass
class S(str): pass
f(S())
[out]

[case testCheckGenericFunctionBodyWithTypeVarValues]
from typing import typevar
class A:
    def f(self, x: int) -> A: return self
class B:
    def f(self, x: int) -> B: return self
AB = typevar('AB', values=(A, B))
def f(x: AB) -> AB:
    x = x.f(1)
    return x.f(1)

[case testCheckGenericFunctionBodyWithTypeVarValues2]
from typing import typevar
class A:
    def f(self) -> A: return A()
    def g(self) -> B: return B()
class B:
    def f(self) -> A: return A()
    def g(self) -> B: return B()
AB = typevar('AB', values=(A, B))
def f(x: AB) -> AB:
    return x.f() # Error
def g(x: AB) -> AB:
    return x.g() # Error
[out]
main: In function "f":
main, line 10: Incompatible return value type
main: In function "g":
main, line 12: Incompatible return value type
