-- Test cases for type variables with values restriction.


[case testCallGenericFunctionWithTypeVarValueRestriction]
from typing import typevar
T = typevar('T', values=(int, str))
def f(x: T) -> None: pass
f(1)
f('x')
f(object()) # E: Type argument 1 of "f" has incompatible value "object"

[case testCallGenericFunctionWithTypeVarValueRestrictionUsingContext]
from typing import typevar, List
T = typevar('T', values=(int, str))
def f(x: T) -> List[T]: pass
i = [1]
s = ['x']
o = [object()]
i = f(1)
s = f('')
o = f(1) # E: Type argument 1 of "f" has incompatible value "object"
[builtins fixtures/list.py]

[case testCallGenericFunctionWithTypeVarValueRestrictionAndAnyArgs]
from typing import typevar, Any
T = typevar('T', values=(int, str))
def f(x: T) -> None: pass
f(Any(object()))
[out]

[case testCallGenericFunctionWithTypeVarValueRestrictionInDynamicFunc]
from typing import typevar, Any
T = typevar('T', values=(int, str))
def f(x: T) -> None: pass
def g():
    f(object())
[out]

[case testCallGenericFunctionWithTypeVarValueRestrictionUsingSubtype]
from typing import typevar
T = typevar('T', values=(int, str))
def f(x: T) -> None: pass
class S(str): pass
f(S())
[out]

[case testCheckGenericFunctionBodyWithTypeVarValues]
from typing import typevar
class A:
    def f(self, x: int) -> A: return self
class B:
    def f(self, x: int) -> B: return self
AB = typevar('AB', values=(A, B))
def f(x: AB) -> AB:
    x = x.f(1)
    return x.f(1)

[case testCheckGenericFunctionBodyWithTypeVarValues2]
from typing import typevar
class A:
    def f(self) -> A: return A()
    def g(self) -> B: return B()
class B:
    def f(self) -> A: return A()
    def g(self) -> B: return B()
AB = typevar('AB', values=(A, B))
def f(x: AB) -> AB:
    return x.f() # Error
def g(x: AB) -> AB:
    return x.g() # Error
[out]
main: In function "f":
main, line 10: Incompatible return value type
main: In function "g":
main, line 12: Incompatible return value type

[case testTypeInferenceAndTypeVarValues]
from typing import typevar
class A:
    def f(self) -> A: return self
    def g(self) -> B: return B()
class B:
    def f(self) -> B: return self
    def g(self) -> B: return B()
AB = typevar('AB', values=(A, B))
def f(x: AB) -> AB:
    y = x
    if y:
        return y.f()
    else:
        return y.g() # E: Incompatible return value type
[out]
main: In function "f":

[case testTypeApplicationAndTypeVarValues]
from typing import typevar, List
T = typevar('T', values=(int, str))
def f(x: T) -> List[T]:
    return List[T]()
def g(x: T) -> List[T]:
    return List[int]() # E: Incompatible return value type
[builtins fixtures/list.py]
[out]
main: In function "g":

[case testTypeDeclaredBasedOnTypeVarWithValues]
from typing import typevar, Undefined
T = typevar('T', values=(int, str))
def f(x: T) -> T:
    a = Undefined(T)
    b = None # type: T
    a = x
    b = x
    a = '' # E: Incompatible types in assignment (expression has type "str", variable has type "int")
    b = 1  # E: Incompatible types in assignment (expression has type "int", variable has type "str")
[out]
main: In function "f":

[case testIsinstanceAndTypeVarValues]
from typing import typevar
T = typevar('T', values=(int, str))
def f(x: T) -> T:
    if isinstance(x, int):
        return 2
def g(x: T) -> T:
    if isinstance(x, str):
        return ''
def h(x: T) -> T:
    if isinstance(x, int):
        return '' # E: Incompatible return value type
    return x
[builtins fixtures/isinstance.py]
[out]
main: In function "h":

[case testIsinstanceAndTypeVarValues2]
from typing import typevar
T = typevar('T', values=(int, str))
def f(x: T) -> T:
    if isinstance(x, int):
        return 2
    else:
        return ''
def g(x: T) -> T:
    if isinstance(x, int):
        return '' # E: Incompatible return value type
    else:
        return 2  # E: Incompatible return value type
    return x
[builtins fixtures/isinstance.py]
[out]
main: In function "g":

[case testIsinstanceAndTypeVarValues3]
from typing import typevar
T = typevar('T', values=(int, str))
def f(x: T) -> T:
    if isinstance(x, int):
        y = 1
    else:
        y = ''
    return y
[builtins fixtures/isinstance.py]

[case testIsinstanceAndTypeVarValues4]
from typing import typevar
T = typevar('T', values=(int, str))
def f(x: T) -> T:
    if isinstance(x, int):
        y = 1
    else:
        y = object()
    return y # E: Incompatible return value type
[builtins fixtures/isinstance.py]
[out]
main: In function "f":

[case testIsinstanceAndTypeVarValues5]
from typing import typevar
T = typevar('T', values=(int, str))
def f(x: T) -> T:
    if isinstance(x, int):
        y = object()
    else:
        y = ''
    return y # E: Incompatible return value type
[builtins fixtures/isinstance.py]
[out]
main: In function "f":

[case testIsinstanceWithUserDefinedTypeAndTypeVarValues]
from typing import typevar, Undefined
class A: pass
class B: pass
T = typevar('T', values=(A, B))
def f(x: T) -> None:
    y = x
    if isinstance(x, A):
        # This is checked both when x is A or B, since A and B are overlapping
        # types.
        x = y # E: Incompatible types in assignment (expression has type "B", variable has type "A")
        x = A()
    else:
        x = B()
        x = y
        x.foo() # E: "B" has no attribute "foo"
S = typevar('S', values=(int, str))
def g(x: S) -> None:
    y = x
    if isinstance(x, int):
        x = y
[builtins fixtures/isinstance.py]
[out]
main: In function "f":

[case testIsinstanceWithUserDefinedTypeAndTypeVarValues2]
from typing import typevar, Undefined
class S(str): pass
T = typevar('T', values=(S, int))
def f(x: T) -> None:
    y = x
    if isinstance(x, S):
        # This is checked only when type of x is str.
        x = y
        x = S()
        x = 1 # E: Incompatible types in assignment (expression has type "int", variable has type "S")
    else:
        x = y
        x = 1
        x = S() # E: Incompatible types in assignment (expression has type "S", variable has type "int")
[builtins fixtures/isinstance.py]
[out]
main: In function "f":

[case testTypeVarValuesAndNestedCalls]
from typing import typevar
T = typevar('T', values=(int, str))
def f(m: T) -> int: pass
def h(x: int) -> int: pass
def g(a: T) -> None:
    h(f(a))
[out]

[case testGenericTypeWithTypevarValues]
from typing import typevar, Generic, Undefined, Any
X = typevar('X', values=(int, str))
class A(Generic[X]): pass
a = Undefined(A[int])
b = Undefined(A[str])
d = Undefined(A[object]) # E: Invalid type argument value for "A"
c = Undefined(A[Any])

[case testGenericTypeWithTypevarValuesAndTypeApplication]
from typing import typevar, Generic, Undefined, Any
X = typevar('X', values=(int, str))
class A(Generic[X]): pass
A[int]()
A[str]()
A[Any]()
A[object]() # E: Type argument 1 of "A" has incompatible value "object"

[case testConstructGenericTypeWithTypevarValuesAndTypeInference]
from typing import typevar, Generic, Any
X = typevar('X', values=(int, str))
class A(Generic[X]):
    def __init__(self, x: X) -> None: pass
A(1)
A('x')
A(Any(object()))
A(object()) # E: Type argument 1 of "A" has incompatible value "object"

[case testGenericTypeWithTypevarValuesAndTypevarArgument]
from typing import typevar, Generic, Undefined
class C: pass
X = typevar('X', values=(int, str))
Y = typevar('Y', values=(int, C))
Z = typevar('Z')
class D(Generic[X]):
    def __init__(self, x: X) -> None: pass
def f(x: X) -> None:
    a = Undefined(D[X])
def g(x: Y) -> None:
    a = Undefined(D[Y])
def h(x: Z) -> None:
    a = Undefined(D[Z])
[out]
main: In function "g":
main, line 11: Invalid type argument value for "D"
main: In function "h":
main, line 13: Type variable "Z" not valid as type argument value for "D"

[case testGenericTypeWithTypevarValuesAndSubtypePromotion]
from typing import typevar, Generic, Undefined
X = typevar('X', values=(int, str))
class S(str): pass
class C(Generic[X]):
    def __init__(self, x: X) -> None: pass
x = Undefined(C[str])
y = C(S())
x = y
y = x
y = C[int](1) # E: Incompatible types in assignment (expression has type C[int], variable has type C[str])

[case testGenericTypeBodyWithTypevarValues]
from typing import typevar, Generic
class A:
    def f(self, x: int) -> None: pass
    def g(self, x: int) -> None: pass
    def h(self, x: str) -> None: pass
class B:
    def f(self, x: int) -> None: pass
    def g(self, x: str) -> None: pass
    def h(self, x: int) -> None: pass
X = typevar('X', values=(A, B))
class C(Generic[X]):
    def f(self, x: X) -> None:
        x.f(1)
        x.g(1) # E: Argument 1 to "g" of "B" has incompatible type "int"; expected "str"
        x.h(1) # E: Argument 1 to "h" of "A" has incompatible type "int"; expected "str"
[out]
main: In member "f" of class "C":

[case testAttributeInGenericTypeWithTypevarValues1]
from typing import typevar, Generic, Undefined
X = typevar('X', values=(int, str))
class C(Generic[X]):
    x = Undefined(X)
    def f(self, x: X) -> None:
        self.x = x
        self.x = 1 # E: Incompatible types in assignment (expression has type "int", variable has type "str")
[out]
main: In member "f" of class "C":

[case testAttributeInGenericTypeWithTypevarValues2]
from typing import typevar, Generic, Undefined
X = typevar('X', values=(int, str))
class C(Generic[X]):
    x = Undefined(X)
cn = C[int]()
cn.x = 1
cn.x = '' # E: Incompatible types in assignment (expression has type "str", variable has type "int")
cs = C[str]()
cs.x = ''
cs.x = 1 # E: Incompatible types in assignment (expression has type "int", variable has type "str")

[case testInferredAttributeInGenericClassBodyWithTypevarValues]
from typing import typevar, Generic, Undefined
X = typevar('X', values=(int, str))
class C(Generic[X]):
    x = 1
C.x = 1
C.x = '' # E: Incompatible types in assignment (expression has type "str", variable has type "int")

[case testMultipleClassTypevarsWithValues1]
from typing import typevar, Generic
class A:
    def f(self, x: int) -> None: pass
class B:
    def f(self, x: str) -> None: pass
X = typevar('X', values=(A, B))
Y = typevar('Y', values=(int, str))
class C(Generic[X, Y]):
    def f(self, x: X, y: Y) -> None:
        x.f(y)
[out]
main: In member "f" of class "C":
main, line 10: Argument 1 to "f" of "A" has incompatible type "str"; expected "int"
main, line 10: Argument 1 to "f" of "B" has incompatible type "int"; expected "str"

[case testMultipleClassTypevarsWithValues2]
from typing import typevar, Generic, Undefined
class A: pass
class B: pass
X = typevar('X', values=(A, B))
Y = typevar('Y', values=(int, str))
class C(Generic[X, Y]): pass
a = Undefined(C[A, int])
b = Undefined(C[B, str])
c = Undefined(C[int, int]) # E: Invalid type argument value for "C"
c = Undefined(C[A, A])     # E: Invalid type argument value for "C"

[case testCallGenericFunctionUsingMultipleTypevarsWithValues]
from typing import typevar
class A: pass
class B: pass
X = typevar('X', values=(A, B))
Y = typevar('Y', values=(int, str))
def f(x: X, y: Y) -> None: pass
f(A(), '')
f(B(), 1)
f(A(), A()) # E: Type argument 2 of "f" has incompatible value "A"
f(1, 1) # E: Type argument 1 of "f" has incompatible value "int"

[case testGenericFunctionWithNormalAndRestrictedTypevar]
from typing import typevar, Generic, Undefined
X = typevar('X')
Y = typevar('Y', values=(int, str))
class C(Generic[Y]):
    def __init__(self, y: Y) -> None: pass
def f(x: X, y: Y, z: int) -> None:
    C(y)
    C(x)  # Error
    z = x # Error
    z = y # Error
    y.foo # Error
[out]
main: In function "f":
main, line 8: Type argument 1 of "C" has incompatible value "X"
main, line 9: Incompatible types in assignment (expression has type "X", variable has type "int")
main, line 10: Incompatible types in assignment (expression has type "str", variable has type "int")
main, line 11: "int" has no attribute "foo"
main, line 11: "str" has no attribute "foo"


-- Special cases
-- -------------


[case testTypevarValuesSpecialCase1]
from typing import typevar, Generic
from abc import abstractmethod
T = typevar('T', values=(int, str))
class A(Generic[T]):
    @abstractmethod
    def f(self) -> 'A[T]': pass
class B(A[str]):
    @abstractmethod
    def f(self) -> 'B': pass
class C(A[str]):
    @abstractmethod
    def f(self) -> int: # E: Return type of "f" incompatible with supertype "A"
        pass
[out]
main: In class "C":

[case testDefaultArgumentValueInGenericClassWithTypevarValues]
from typing import typevar, Generic
T = typevar('T', values=(int, str))
class C(Generic[T]):
    def f(self, x: int = None) -> None: pass
