-- Test cases for type variables with values restriction.


[case testCallGenericFunctionWithTypeVarValueRestriction]
from typing import typevar
T = typevar('T', values=(int, str))
def f(x: T) -> None: pass
f(1)
f('x')
f(object()) # E: Type argument 1 of "f" has incompatible value "object"

[case testCallGenericFunctionWithTypeVarValueRestrictionUsingContext]
from typing import typevar, List
T = typevar('T', values=(int, str))
def f(x: T) -> List[T]: pass
i = [1]
s = ['x']
o = [object()]
i = f(1)
s = f('')
o = f(1) # E: Type argument 1 of "f" has incompatible value "object"
[builtins fixtures/list.py]

[case testCallGenericFunctionWithTypeVarValueRestrictionAndAnyArgs]
from typing import typevar, Any
T = typevar('T', values=(int, str))
def f(x: T) -> None: pass
f(Any(object()))
[out]

[case testCallGenericFunctionWithTypeVarValueRestrictionInDynamicFunc]
from typing import typevar, Any
T = typevar('T', values=(int, str))
def f(x: T) -> None: pass
def g():
    f(object())
[out]

[case testCallGenericFunctionWithTypeVarValueRestrictionUsingSubtype]
from typing import typevar
T = typevar('T', values=(int, str))
def f(x: T) -> None: pass
class S(str): pass
f(S())
[out]

[case testCheckGenericFunctionBodyWithTypeVarValues]
from typing import typevar
class A:
    def f(self, x: int) -> A: return self
class B:
    def f(self, x: int) -> B: return self
AB = typevar('AB', values=(A, B))
def f(x: AB) -> AB:
    x = x.f(1)
    return x.f(1)

[case testCheckGenericFunctionBodyWithTypeVarValues2]
from typing import typevar
class A:
    def f(self) -> A: return A()
    def g(self) -> B: return B()
class B:
    def f(self) -> A: return A()
    def g(self) -> B: return B()
AB = typevar('AB', values=(A, B))
def f(x: AB) -> AB:
    return x.f() # Error
def g(x: AB) -> AB:
    return x.g() # Error
[out]
main: In function "f":
main, line 10: Incompatible return value type
main: In function "g":
main, line 12: Incompatible return value type

[case testTypeInferenceAndTypeVarValues]
from typing import typevar
class A:
    def f(self) -> A: return self
    def g(self) -> B: return B()
class B:
    def f(self) -> B: return self
    def g(self) -> B: return B()
AB = typevar('AB', values=(A, B))
def f(x: AB) -> AB:
    y = x
    if y:
        return y.f()
    else:
        return y.g() # E: Incompatible return value type
[out]
main: In function "f":

[case testTypeApplicationAndTypeVarValues]
from typing import typevar, List
T = typevar('T', values=(int, str))
def f(x: T) -> List[T]:
    return List[T]()
def g(x: T) -> List[T]:
    return List[int]() # E: Incompatible return value type
[builtins fixtures/list.py]
[out]
main: In function "g":

[case testTypeDeclaredBasedOnTypeVarWithValues]
from typing import typevar, Undefined
T = typevar('T', values=(int, str))
def f(x: T) -> T:
    a = Undefined(T)
    b = None # type: T
    a = x
    b = x
    a = '' # E: Incompatible types in assignment
    b = 1  # E: Incompatible types in assignment
[out]
main: In function "f":

[case testIsinstanceAndTypeVarValues]
from typing import typevar, Undefined
T = typevar('T', values=(int, str))
def f(x: T) -> T:
    if isinstance(x, int):
        return 2
    if isinstance(x, str):
        return ''
    if isinstance(x, int):
        return '' # E: Incompatible return value type
    return x
[builtins fixtures/isinstance.py]
[out]
main: In function "f":

[case testIsinstanceAndTypeVarValues2]
from typing import typevar, Undefined
T = typevar('T', values=(int, str))
def f(x: T) -> T:
    if isinstance(x, int):
        return 2
    else:
        return ''
    if isinstance(x, int):
        return '' # E: Incompatible return value type
    else:
        return 2  # E: Incompatible return value type
    return x
[builtins fixtures/isinstance.py]
[out]
main: In function "f":

[case testTypeVarValuesAndNestedCalls]
from typing import typevar
T = typevar('T', values=(int, str))
def f(m: T) -> int: pass
def h(x: int) -> int: pass
def g(a: T) -> None:
    h(f(a))
[out]

[case testGenericTypeWithTypevarValues]
from typing import typevar, Generic, Undefined, Any
X = typevar('X', values=(int, str))
class A(Generic[X]): pass
a = Undefined(A[int])
b = Undefined(A[str])
d = Undefined(A[object]) # E: Invalid type argument value for "A"
c = Undefined(A[Any])

[case testGenericTypeWithTypevarValuesAndTypeApplication]
from typing import typevar, Generic, Undefined, Any
X = typevar('X', values=(int, str))
class A(Generic[X]): pass
A[int]()
A[str]()
A[Any]()
A[object]() # E: Type argument 1 of "A" has incompatible value "object"

[case testConstructGenericTypeWithTypevarValuesAndTypeInference]
from typing import typevar, Generic, Any
X = typevar('X', values=(int, str))
class A(Generic[X]):
    def __init__(self, x: X) -> None: pass
A(1)
A('x')
A(Any(object()))
A(object()) # E: Type argument 1 of "A" has incompatible value "object"

[case testGenericTypeWithTypevarValuesAndTypevarArgument]
from typing import typevar, Generic, Undefined
class C: pass
X = typevar('X', values=(int, str))
Y = typevar('Y', values=(int, C))
Z = typevar('Z')
class D(Generic[X]):
    def __init__(self, x: X) -> None: pass
def f(x: X) -> None:
    a = Undefined(D[X])
def g(x: Y) -> None:
    a = Undefined(D[Y])
def h(x: Z) -> None:
    a = Undefined(D[Z])
[out]
main: In function "g":
main, line 11: Invalid type argument value for "D"
main: In function "h":
main, line 13: Type variable "Z" not valid as type argument value for "D"

[case testGenericTypeWithTypevarValuesAndSubtypePromotion]
from typing import typevar, Generic, Undefined
X = typevar('X', values=(int, str))
class S(str): pass
class C(Generic[X]):
    def __init__(self, x: X) -> None: pass
x = Undefined(C[str])
y = C(S())
x = y
y = x
y = C[int](1) # E: Incompatible types in assignment

[case testGenericTypeBodyWithTypevarValues]
from typing import typevar, Generic
class A:
    def f(self, x: int) -> None: pass
    def g(self, x: int) -> None: pass
    def h(self, x: str) -> None: pass
class B:
    def f(self, x: int) -> None: pass
    def g(self, x: str) -> None: pass
    def h(self, x: int) -> None: pass
X = typevar('X', values=(A, B))
class C(Generic[X]):
    def f(self, x: X) -> None:
        x.f(1)
        x.g(1) # E: Argument 1 to "g" of "B" has incompatible type "int"
        x.h(1) # E: Argument 1 to "h" of "A" has incompatible type "int"
[out]
main: In member "f" of class "C":

[case testAttributeInGenericTypeWithTypevarValues1]
from typing import typevar, Generic, Undefined
X = typevar('X', values=(int, str))
class C(Generic[X]):
    x = Undefined(X)
    def f(self, x: X) -> None:
        self.x = x
        self.x = 1 # E: Incompatible types in assignment
[out]
main: In member "f" of class "C":

[case testAttributeInGenericTypeWithTypevarValues2]
from typing import typevar, Generic, Undefined
X = typevar('X', values=(int, str))
class C(Generic[X]):
    x = Undefined(X)
cn = C[int]()
cn.x = 1
cn.x = '' # E: Incompatible types in assignment
cs = C[str]()
cs.x = ''
cs.x = 1 # E: Incompatible types in assignment
