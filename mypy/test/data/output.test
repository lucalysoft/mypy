-- Special cases
-- -------------


[case testEmpty]
[out]

[case testCommentOnlyFile]
# comment


-- Expressions
-- -----------


[case testExpressionStatement]
1

[case testBinaryOperation]
1 + 2 # x

[case testNameExpr]
x + __yDSA2

[case testParentheses]
( ( x ) )

[case testBinaryOps]
x + 1 - 2 * 3 / 4 % 5 // 6 ** 7
x == 1 != 2 < 3 > 4 <= 5 >= 6
x & 1 ^ 2 | 3 << 4 >> 5
x in 1
x  not   in 2
x is 2
x  is    not 2
x and y or z

[case testUnaryOps]
x = [ + 1, - 2, ~ 3, not 4 ]

[case testLiterals]
1 + 12359 + 0xAf09 + 0o027
1.0 + .1 + 1. + 1e123
'' 'foo' '\n' '\xab' '\u123f'
"" "foo"
r'foo' r"foo"
'''foo''' """bar"""
b'foo' b"foo"
3j + 2J + 1.1j + 1e3J + -1j + .1j

[case testTupleLiterals]
( )
( 1, )
( 1, 2 )
( 1 , 2, 3 )
( 1 , )

[case testMemberExpr]
x . y

[case testIndexExpr]
x [ y ]
x [ 1 , 2 ]

[case testSlices]
x [ 1 : 2 : 3 ]
x [ : ]
x [ : : 2 ]

[case testSimpleCalls]
f ( )
f ( x )
f ( x , y )
f ( x , y  ,  z )

[case testVarArgsCalls]
f ( * x )
f ( x , * x )

[case testCallsWithKeywordArgs]
f ( x = y )
f ( x, y = z  ,  a=b+1)
f(x *y, z=1)

[case testDictLiterals]
{ }
{ x : y }
{ x : y, 1 : 2 }
{ x : y, 1 : 2, 3 : 4 , }

[case testSetLiterals]
{ x }
{ x, y }
{ x , y   ,  }

[case testCasts]
from typing import cast, Any
cast(x, y)
Any(z)
cast(c[a, x[d]], foo.bar)

[case testLambdaExpression]
lambda: 1
lambda x: x
lambda x, y: (x, y)
lambda x, y=1, z = 2: 2
lambda x, *y: y

[case testGeneratorExpression]
x + 1 for x in z
x for x in y if foo

[case testListComprehension]
a = [ x + 1 for x in [1, 2, 3]]
a = [ x for x in y if z]


-- Assignment
-- ----------


[case testSingleAssignment]
x = y

[case testChainedAssignment]
x =  y   =   z

[case testListLiteral]
x = [ ]
x = [ 1 ]
x = [ 1 , 2 ]
x = [ 1, ]

[case testMultipleAssignment]
x, y = 1, 2
(x, y,) = z
[x, y] = a


-- Misc
-- ----


[case testLineContinuation]
x = \
  1
'''fooo
  bar'''
x = (   #foo
   x + 2)


-- Imports
-- -------


[case testImport]
import x , y . z
import re

[case testFromImport]
from x import y
from x . y import z, blah
from x import (y, z)

[case testFromImportAsterisk]
from x . y import *

[case testImportAs]
import x as y
import x, y as z, a   as   b

[case testFromImportAs]
from x import y as z
from x import x, y as z,  a   as   b


-- Statements
-- ----------

[case testOperatorAssignment]
x  *=   2
x += 1

[case testBlock]
while 1:
  x = 1
while 1: x = 1
while 1 :  # foo
    while 2:
         x
    y
# foo

[case testWhileElse]
while 1:
  x
else:
  y

[case testIf]
if x:
  y
if x:
  y
else:
  z
if a:
  1
elif 2:
  22
elif  3:
  4

[case testBreak]
while x:
  break

[case testContinue]
while x:
  continue

[case testPass]
if x:
  pass

[case testRaise]
raise x
raise y from z

[case testAssert]
assert x != 1

[case testYield]
yield x
yield

[case testDel]
del x
del y.x, z[0]

[case testGlobal]
global x, y

[case testTryExcept]
try:
  x
except E:
  y
try:
  x
except e as f:
  y
except x:
  z
except:
  xx
else:
  yy

[case testTryFinally]
try:
  x
finally:
  z

[case testComplexTry]
try:
  x
  y
except (x, y) as e:
  foo
finally:
  bar

[case testVarDefWithType]
from typing import Undefined, Any, List, Dict
x = 0
z = 1 + 2 # type: int
a = Undefined # type: Any
a = Undefined # type: x[y]   # Comment
a = Undefined(Any)
z = Undefined(x.y)
l = Undefined(List[int])
d = Undefined(Dict[x, c[ Any]])
x = Undefined(c[ d[ e]])

[case testMultipleVarDef]
from typing import Undefined, List
x , y = Undefined, Undefined # type: (int, List[c])
x , y = Undefined(int), Undefined(List[c])
x, y , z = 123 # type: int, x, foobar

[case testListAndTupleTypes]
from typing import Undefined, List, Tuple
foo = Undefined # type: List[int]
foo = Undefined(List[int])
t = Undefined # type: List[List[Tuple[ x , y]]]
t = Undefined(List[List[Tuple[ x , y]]])

[case testForStatement]
for x in y: pass
for x, y in z: pass

[case testForElse]
for x in y:
  x
else:
  y

[case testForWithParensAroundIndexVars-skip]
for ( x ) in y: pass
for ( x, y ) in y: pass

[case testWith]
with foo():
  pass
with bar() as x:
  x = 2
with f() as x, y() as z:
  pass


-- Function definitions
-- --------------------


[case testSimpleFunctions]
def f(): pass
def g ( x ) : pass
def h(x, y): pass
def i(x,y , z  ,  zz ) :
  z = y
  return 5

[case testFunctionDefWithTypes-skip]
import typing
def f() -> int: pass
def g(x: int) -> int: pass
def h(x: int, y: str) -> int: pass
def i() -> None: pass
def j(x: p[g]) -> c[l]: pass

[case testGenericFunctionDef-skip]
from typing import typevar
t = typevar('t')
s = typevar('s')
x = typevar('x')
def f() -> None: pass
def g ( x: x[s] ) -> None : pass

[case testInitializersInFunctionDefs-skip]
import typing
def f(x = 1 , y  = 2): pass
def g(x, y=1): pass
def h (x: int = 4, z: float = 2.2) -> None : pass

[case testFunctionWithPartialTypes-skip]
import typing
def f(x, y) -> None: pass
def g(x: int, y, z: str): pass

[case testFunctionWithVarArgs-skip]
import typing
def f(*x): pass
def g(x, y=1, *z): pass
def h( *x: int) -> None: pass
def i(x, *x: int) -> None: pass
def j(x: int, y: int = 2, *z: str) -> None: pass

[case testOverloadedFunction-skip]
from typing import overload, Any
@overload
def f() -> None: pass

@overload
def f(x: Any) -> Any: return x

[case testOverloadedFunctionInBlock-skip]
from typing import overload, Any
if 1:
  @overload
  def f() -> None:
    pass

  @overload
  def f(x: Any) -> Any:
    return x


-- Classes
-- -------


[case testSimpleClass]
class A: pass

[case testBaseClass]
class A(B): pass

[case testMultipleBaseClasses]
class A(B, C): pass
class A(B, C, D): pass

[case testGenericBaseClasses-skip]
import typing
class A(B[x], C[y, D[z]]): pass

[case testGenericClass-skip]
from typing import typevar, Generic
t = typevar('t')
x = typevar('x')
class C(Generic[t]):
  pass
class C(foo[t, x], Generic[t, x]): pass

[case testClassBody]
class C:
  x = y
  def f(self, x):
    return x

[case testSuper]
class C:
  def f(self):
    super().__init__()


-- Abstract base classes
-- ---------------------


[case testABC-skip]
from abc import abstractmethod, ABCMeta
import typing
class x(metaclass=ABCMeta):
  @abstractmethod
  def f(self, x): pass
  @abstractmethod
  def g(self) -> None: return self


-- Types
-- -----


[case testTupleType]
from typing import Undefined, Any, Tuple
class A:
  t = Undefined # type: Tuple[object, Any]
  t = Undefined(Tuple[object, Any])

[case testFuncType]
from typing import Undefined, Any, Function, List
class A:
  t = Undefined # type: Function[[], Any]
  t = Undefined # type: Function[[object], None]
  t = Undefined # type: Function[[ Any, Any], None]
  t = Undefined # type: List[Function[[ a, b , List[c]], List[a]]]
  t = Undefined(Function[[], Any])
  t = Undefined(Function[[object], None])
  t = Undefined([[ Any, Any], None])
  t = Undefined(List[Function[[ a, b , List[c]], List[a]]])


-- Decorators
-- ----------


[case testFunctionDecorator]
import typing
@foo
def f(): pass
@foo(bar)
@zar.x
def g(x):
  return x


-- Semantic analysis
-- -----------------


[case testFunctionType_SemanticAnalyzer-skip]
from typing import Any, Function
def f( x: Function[[ object],  Any] ) -> None: pass

[case testTupleType_SemanticAnalyzer-skip]
from typing import Any, Tuple
def f ( x: Tuple[ object , Any] ) -> None: pass
[builtins fixtures/tuple.py]

[case testClasses_SemanticAnalyzer-skip]
from abc import abstractmethod, ABCMeta
import typing
class A: pass
class B(A): pass
class I(metaclass=ABCMeta): pass
class C(I): pass

[case testMethodWithSignature_SemanticAnalyzer-skip]
import typing
class A:
    def __init__(self, x: 'A') -> None:
        self.x = x


-- ** arguments
-- ------------


[case testKeywordVarArgs-skip]
from typing import Undefined, Dict
def f( ** x): pass
def g(x: A, y: B = None, **z: C) -> None: pass
d = Undefined(dict)
g(**d)
g( None , ** d)
g( None , ** d)
class A: pass
[builtins fixtures/dict.py]

[case testFunctionDefinitionWithBothVarArgs]
def f ( * x , ** y) : pass
