-- Basic test cases for the C back end. 
--
-- Each test case compiles a program to a binary via C and runs it. The output
-- of the program is compared with the expected output.
--
-- Comments that start after a space (including line end comments) are added
-- to the expected output.

[case testPrintOnly]
import typing
print(5)
[out]
5

[case testCallWithoutArgs]
import typing
def f() -> None:
    print(3)
# The comment below adds the line '3' to the expected output.
f() # 3

[case testCallWithArgs]
import typing
def f(a: int, b: int) -> None:
    print(a)
    print(b)
f(3, 5)
[out]
3
5

[case testLoop]
import typing
def f() -> None:
    i = 0
    while i < 3:
        print(i)
        i = i + 1
f()
[out]
0
1
2

[case testReturnValue]
import typing
def f() -> int:
    return 5
print(f()) # 5

[case testIf]
import typing
def f(n: int) -> None:
    if n < 1:
        print(0)
    else:
        print(1)
f(0) # 0
f(1) # 1
f(2) # 1

[case testRecursion]
import typing
def f(n: int) -> int:
    if n <= 0:
        return 3
    else:
        return f(n - 1) + n
        
print(f(0)) # 3
print(f(1)) # 4
print(f(5)) # 18

[case testGlobalVariables]
import typing
x = 1
y = 2
print(x) # 1
def f() -> int:
    return x + y
y = y + 1
print(f()) # 4

[case testUninitializedGlobalVar]
import typing
if 1 > 2:
    x = 1
print(x) # 0

[case testInstanceCondition]
import typing
class A: pass
a = A()
if a:
    print(1) # 1
if not a:
    print(2)
a = None
if a:
    print(3)
if not a:
    print(4) # 4

[case testLocalInitialization]
import typing
class A: pass
def f() -> None:
    if 1 > 2:
        a = A()
        i = 1
        aa = A()
        j = 2
    print(a)  # None
    print(i)  # 0
    print(aa) # None
    print(j)  # 0
f()

[case testLocalWithExplicitType]
from typing import Undefined
class A: pass
def f() -> None:
    x = 2 # type: int
    print(x) # 2
    y = 0
    print(y) # 0
    y = 3
    print(y) # 3
    a = Undefined # type: A
    print(a) # None
f()

[case testGlobalWithExplicitType]
from typing import Undefined
class A: pass
x = 2 # type: int
print(x) # 2
y = 0
print(y) # 0
y = 3
print(y) # 3
a = Undefined # type: A
print(a) # None

-- TODO
--   integer overflows and underflows
--   stack overflow
