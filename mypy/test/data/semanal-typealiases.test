[case testListTypeAlias]
from typing import List
def f() -> List[int]: pass
[builtins fixtures/list.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [List : List])
  FuncDef:2(
    f
    def () -> builtins.list[builtins.int]
    Block:2(
      PassStmt:2())))

[case testDictTypeAlias]
from typing import Dict
def f() -> Dict[int, str]: pass
[builtins fixtures/dict.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [Dict : Dict])
  FuncDef:2(
    f
    def () -> builtins.dict[builtins.int, builtins.str]
    Block:2(
      PassStmt:2())))

[case testQualifiedTypeAlias]
import typing
def f() -> typing.List[int]: pass
[builtins fixtures/list.py]
[out]
MypyFile:1(
  Import:1(typing : typing)
  FuncDef:2(
    f
    def () -> builtins.list[builtins.int]
    Block:2(
      PassStmt:2())))

[case testTypeApplicationWithTypeAlias]
from typing import List
List[List[int]]
[builtins fixtures/list.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [List : List])
  ExpressionStmt:2(
    TypeApplication:2(
      NameExpr(List [builtins.list])
      Types(
        builtins.list[builtins.int]))))

[case testTypeApplicationWithQualifiedTypeAlias]
import typing
typing.List[typing.List[int]]
[builtins fixtures/list.py]
[out]
MypyFile:1(
  Import:1(typing : typing)
  ExpressionStmt:2(
    TypeApplication:2(
      MemberExpr:2(
        NameExpr(typing)
        List [builtins.list])
      Types(
        builtins.list[builtins.int]))))

[case testTypeApplicationWithinLambda]
from typing import List
lambda: List[int]()
[builtins fixtures/list.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [List : List])
  ExpressionStmt:2(
    FuncExpr:2(
      Block:2(
        ReturnStmt:2(
          CallExpr:2(
            TypeApplication:2(
              NameExpr(List [builtins.list])
              Types(
                builtins.int))
            Args()))))))

[case testSimpleTypeAlias]
import typing
class A: pass
A2 = A
def f(x: A2) -> A: pass
[out]
MypyFile:1(
  Import:1(typing : typing)
  ClassDef:2(
    A
    PassStmt:2())
  AssignmentStmt:3(
    NameExpr(A2* [__main__.A2])
    NameExpr(A [__main__.A]))
  FuncDef:4(
    f
    Args(
      Var(x))
    def (x: __main__.A) -> __main__.A
    Block:4(
      PassStmt:4())))

[case testUnionTypeAlias]
from typing import Union
U = Union[int, str]
def f(x: U) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Union : Union])
  AssignmentStmt:2(
    NameExpr(U* [__main__.U])
    IndexExpr:2(
      NameExpr(Union [typing.Union])
      TupleExpr:2(
        NameExpr(int [builtins.int])
        NameExpr(str [builtins.str]))))
  FuncDef:3(
    f
    Args(
      Var(x))
    def (x: Union[builtins.int, builtins.str])
    Block:3(
      PassStmt:3())))

[case testUnionTypeAlias2]
from typing import Union
class A: pass
U = Union[int, A]
def f(x: U) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Union : Union])
  ClassDef:2(
    A
    PassStmt:2())
  AssignmentStmt:3(
    NameExpr(U* [__main__.U])
    IndexExpr:3(
      NameExpr(Union [typing.Union])
      TupleExpr:3(
        NameExpr(int [builtins.int])
        NameExpr(A [__main__.A]))))
  FuncDef:4(
    f
    Args(
      Var(x))
    def (x: Union[builtins.int, __main__.A])
    Block:4(
      PassStmt:4())))

[case testUnionTypeAliasWithQualifiedUnion]
import typing
U = typing.Union[int, str]
def f(x: U) -> None: pass
[out]
MypyFile:1(
  Import:1(typing : typing)
  AssignmentStmt:2(
    NameExpr(U* [__main__.U])
    IndexExpr:2(
      MemberExpr:2(
        NameExpr(typing)
        Union [typing.Union])
      TupleExpr:2(
        NameExpr(int [builtins.int])
        NameExpr(str [builtins.str]))))
  FuncDef:3(
    f
    Args(
      Var(x))
    def (x: Union[builtins.int, builtins.str])
    Block:3(
      PassStmt:3())))

[case testTupleTypeAlias]
from typing import Tuple
T = Tuple[int, str]
def f(x: T) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Tuple : Tuple])
  AssignmentStmt:2(
    NameExpr(T* [__main__.T])
    IndexExpr:2(
      NameExpr(Tuple [typing.Tuple])
      TupleExpr:2(
        NameExpr(int [builtins.int])
        NameExpr(str [builtins.str]))))
  FuncDef:3(
    f
    Args(
      Var(x))
    def (x: Tuple[builtins.int, builtins.str])
    Block:3(
      PassStmt:3())))

[case testCallableTypeAlias]
from typing import Callable
C = Callable[[int], None]
def f(x: C) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Callable : Callable])
  AssignmentStmt:2(
    NameExpr(C* [__main__.C])
    IndexExpr:2(
      NameExpr(Callable [typing.Callable])
      TupleExpr:2(
        ListExpr:2(
          NameExpr(int [builtins.int]))
        NameExpr(None [builtins.None]))))
  FuncDef:3(
    f
    Args(
      Var(x))
    def (x: def (builtins.int))
    Block:3(
      PassStmt:3())))
