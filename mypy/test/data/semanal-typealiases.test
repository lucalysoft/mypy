[case testListTypeAlias]
from typing import List
def f() -> List[int]: pass
[builtins fixtures/list.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [List : List])
  FuncDef:2(
    f
    def () -> builtins.list[builtins.int]
    Block:2(
      PassStmt:2())))

[case testDictTypeAlias]
from typing import Dict
def f() -> Dict[int, str]: pass
[builtins fixtures/dict.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [Dict : Dict])
  FuncDef:2(
    f
    def () -> builtins.dict[builtins.int, builtins.str]
    Block:2(
      PassStmt:2())))

[case testQualifiedTypeAlias]
import typing
def f() -> typing.List[int]: pass
[builtins fixtures/list.py]
[out]
MypyFile:1(
  Import:1(typing : typing)
  FuncDef:2(
    f
    def () -> builtins.list[builtins.int]
    Block:2(
      PassStmt:2())))

[case testTypeApplicationWithTypeAlias]
from typing import List
List[List[int]]
[builtins fixtures/list.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [List : List])
  ExpressionStmt:2(
    TypeApplication:2(
      NameExpr(List [builtins.list])
      Types(
        builtins.list[builtins.int]))))

[case testTypeApplicationWithQualifiedTypeAlias]
import typing
typing.List[typing.List[int]]
[builtins fixtures/list.py]
[out]
MypyFile:1(
  Import:1(typing : typing)
  ExpressionStmt:2(
    TypeApplication:2(
      MemberExpr:2(
        NameExpr(typing)
        List [builtins.list])
      Types(
        builtins.list[builtins.int]))))

[case testTypeApplicationWithinLambda]
from typing import List
lambda: List[int]()
[builtins fixtures/list.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [List : List])
  ExpressionStmt:2(
    FuncExpr:2(
      Block:2(
        ReturnStmt:2(
          CallExpr:2(
            TypeApplication:2(
              NameExpr(List [builtins.list])
              Types(
                builtins.int))
            Args()))))))
