[case testVarWithType]
import typing
class A: pass
x = A() # type: A
y = x
[out]
MypyFile:1(
  Import:1(typing : typing)
  ClassDef:2(
    A
    PassStmt:2())
  AssignmentStmt:3(
    NameExpr(x [__main__.x])
    CallExpr:3(
      NameExpr(A [__main__.A])
      Args())
    __main__.A)
  AssignmentStmt:4(
    NameExpr(y* [__main__.y])
    NameExpr(x [__main__.x])))

[case testInitializeToUndefined]
from typing import Undefined

class A: pass
x = Undefined # type: A
y = x
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  ClassDef:3(
    A
    PassStmt:3())
  AssignmentStmt:4(
    NameExpr(x [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    __main__.A)
  AssignmentStmt:5(
    NameExpr(y* [__main__.y])
    NameExpr(x [__main__.x])))

[case testLocalVarWithType]
from typing import Undefined
class A: pass
def f():
  x = Undefined # type: A
  y = x
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  ClassDef:2(
    A
    PassStmt:2())
  FuncDef:3(
    f
    Block:3(
      AssignmentStmt:4(
        NameExpr(x [l])
        NameExpr(Undefined [typing.Undefined])
        __main__.A)
      AssignmentStmt:5(
        NameExpr(y* [l])
        NameExpr(x [l])))))

[case testAnyType]
from typing import Undefined, Any
x = Undefined # type: Any
y = x
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined, Any : Any])
  AssignmentStmt:2(
    NameExpr(x [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    Any)
  AssignmentStmt:3(
    NameExpr(y* [__main__.y])
    NameExpr(x [__main__.x])))

[case testMemberVarWithType]
import typing
class A:
  def __init__(self):
    self.x = None # type: int
[out]
MypyFile:1(
  Import:1(typing : typing)
  ClassDef:2(
    A
    FuncDef:3(
      __init__
      Args(
        Var(self))
      Block:3(
        AssignmentStmt:4(
          MemberExpr:4(
            NameExpr(self [l])
            x)
          NameExpr(None [builtins.None])
          builtins.int)))))

[case testClassVarWithType]
import typing
class A:
  x = None # type: int
  x = 1
[out]
MypyFile:1(
  Import:1(typing : typing)
  ClassDef:2(
    A
    AssignmentStmt:3(
      NameExpr(x [m])
      NameExpr(None [builtins.None])
      builtins.int)
    AssignmentStmt:4(
      NameExpr(x [m])
      IntExpr(1))))

[case testFunctionSig]
from typing import Any
class A: pass
def f(x: A) -> A: pass
def g(x: Any, y: A) -> None:
  z = x, y
[out]
MypyFile:1(
  ImportFrom:1(typing, [Any : Any])
  ClassDef:2(
    A
    PassStmt:2())
  FuncDef:3(
    f
    Args(
      Var(x))
    def (x: __main__.A) -> __main__.A
    Block:3(
      PassStmt:3()))
  FuncDef:4(
    g
    Args(
      Var(x)
      Var(y))
    def (x: Any, y: __main__.A)
    Block:4(
      AssignmentStmt:5(
        NameExpr(z* [l])
        TupleExpr:5(
          NameExpr(x [l])
          NameExpr(y [l]))))))

[case testBaseclass]
class A: pass
class B(A): pass
[out]
MypyFile:1(
  ClassDef:1(
    A
    PassStmt:1())
  ClassDef:2(
    B
    BaseType(
      __main__.A)
    PassStmt:2()))

[case testMultipleVarDef]
from typing import Undefined
class A: pass
class B: pass
a, b = Undefined, Undefined # type: (A, B)
x = a, b
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  ClassDef:2(
    A
    PassStmt:2())
  ClassDef:3(
    B
    PassStmt:3())
  AssignmentStmt:4(
    TupleExpr:4(
      NameExpr(a [__main__.a])
      NameExpr(b [__main__.b]))
    TupleExpr:4(
      NameExpr(Undefined [typing.Undefined])
      NameExpr(Undefined [typing.Undefined]))
    Tuple[__main__.A, __main__.B])
  AssignmentStmt:5(
    NameExpr(x* [__main__.x])
    TupleExpr:5(
      NameExpr(a [__main__.a])
      NameExpr(b [__main__.b]))))

[case testGenericType]
from typing import typevar, Generic, Any

t = typevar('t')

class A(Generic[t]): pass
class B: pass
x = None # type: A[B]
y = None # type: A[Any]
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic, Any : Any])
  AssignmentStmt:3(
    NameExpr(t* [__main__.t])
    TypeVarExpr:3())
  ClassDef:5(
    A
    TypeVars(
      t)
    PassStmt:5())
  ClassDef:6(
    B
    PassStmt:6())
  AssignmentStmt:7(
    NameExpr(x [__main__.x])
    NameExpr(None [builtins.None])
    __main__.A[__main__.B])
  AssignmentStmt:8(
    NameExpr(y [__main__.y])
    NameExpr(None [builtins.None])
    __main__.A[Any]))

[case testGenericType2]
from typing import typevar, Generic, Any
t = typevar('t')
s = typevar('s')
class A(Generic[t, s]): pass
class B: pass
x = None # type: A[B, Any]
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic, Any : Any])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  AssignmentStmt:3(
    NameExpr(s* [__main__.s])
    TypeVarExpr:3())
  ClassDef:4(
    A
    TypeVars(
      t
      s)
    PassStmt:4())
  ClassDef:5(
    B
    PassStmt:5())
  AssignmentStmt:6(
    NameExpr(x [__main__.x])
    NameExpr(None [builtins.None])
    __main__.A[__main__.B, Any]))

[case testAssignmentAfterDef]
from typing import Undefined

class A: pass
a = Undefined # type: A
a = 1
def f():
  b = Undefined # type: A
  b = 1
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  ClassDef:3(
    A
    PassStmt:3())
  AssignmentStmt:4(
    NameExpr(a [__main__.a])
    NameExpr(Undefined [typing.Undefined])
    __main__.A)
  AssignmentStmt:5(
    NameExpr(a [__main__.a])
    IntExpr(1))
  FuncDef:6(
    f
    Block:6(
      AssignmentStmt:7(
        NameExpr(b [l])
        NameExpr(Undefined [typing.Undefined])
        __main__.A)
      AssignmentStmt:8(
        NameExpr(b [l])
        IntExpr(1)))))

[case testUndefinedWithArgument]
from typing import Undefined
x = Undefined(int)
x = 1
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  AssignmentStmt:2(
    NameExpr(x [__main__.x])
    UndefinedExpr:2(builtins.int)
    builtins.int)
  AssignmentStmt:3(
    NameExpr(x [__main__.x])
    IntExpr(1)))

[case testUndefinedWithComplexType]
from typing import Undefined, Tuple
x = Undefined(Tuple[int, str])
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined, Tuple : Tuple])
  AssignmentStmt:2(
    NameExpr(x [__main__.x])
    UndefinedExpr:2(Tuple[builtins.int, builtins.str])
    Tuple[builtins.int, builtins.str]))

[case testUndefinedInMultipleAssignment]
from typing import Undefined, Any
x, y, z = Undefined(int), 1, Undefined(Any)
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined, Any : Any])
  AssignmentStmt:2(
    TupleExpr:2(
      NameExpr(x* [__main__.x])
      NameExpr(y* [__main__.y])
      NameExpr(z* [__main__.z]))
    TupleExpr:2(
      UndefinedExpr:2(builtins.int)
      IntExpr(1)
      UndefinedExpr:2(Any))))

[case testUndefinedWithStrLiteral]
from typing import Undefined
x = Undefined('A')
class A: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  AssignmentStmt:2(
    NameExpr(x [__main__.x])
    UndefinedExpr:2(__main__.A)
    __main__.A)
  ClassDef:3(
    A
    PassStmt:3()))

[case testCast]
from typing import typevar, Generic, Any, cast
t = typevar('t')
class c: pass
class d(Generic[t]): pass
cast(Any, 1)
cast(c, 1)
cast(d[c], c)
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic, Any : Any, cast : cast])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  ClassDef:3(
    c
    PassStmt:3())
  ClassDef:4(
    d
    TypeVars(
      t)
    PassStmt:4())
  ExpressionStmt:5(
    CastExpr:5(
      IntExpr(1)
      Any))
  ExpressionStmt:6(
    CastExpr:6(
      IntExpr(1)
      __main__.c))
  ExpressionStmt:7(
    CastExpr:7(
      NameExpr(c [__main__.c])
      __main__.d[__main__.c])))

[case testCastToQualifiedTypeAndCast]
import typing
import _m
typing.cast(_m.C, object)
[file _m.py]
class C: pass
[out]
MypyFile:1(
  Import:1(typing : typing)
  Import:2(_m : _m)
  ExpressionStmt:3(
    CastExpr:3(
      NameExpr(object [builtins.object])
      _m.C)))

[case testLongQualifiedCast]
import typing
import _m._n
typing.cast(_m._n.C, object)
[file _m/__init__.py]
[file _m/_n.py]
class C: pass
[out]
MypyFile:1(
  Import:1(typing : typing)
  Import:2(_m._n : _m._n)
  ExpressionStmt:3(
    CastExpr:3(
      NameExpr(object [builtins.object])
      _m._n.C)))

[case testCastTargetWithTwoTypeArgs]
from typing import typevar, Generic, cast
t = typevar('t')
s = typevar('s')
class C(Generic[t, s]): pass
cast(C[str, int], C)
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic, cast : cast])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  AssignmentStmt:3(
    NameExpr(s* [__main__.s])
    TypeVarExpr:3())
  ClassDef:4(
    C
    TypeVars(
      t
      s)
    PassStmt:4())
  ExpressionStmt:5(
    CastExpr:5(
      NameExpr(C [__main__.C])
      __main__.C[builtins.str, builtins.int])))

[case testCastToAny]
from typing import Any
Any(None)
[out]
MypyFile:1(
  ImportFrom:1(typing, [Any : Any])
  ExpressionStmt:2(
    CastExpr:2(
      NameExpr(None [builtins.None])
      Any)))

[case testCastToTupleType]
from typing import Tuple, cast
cast(Tuple[int, str], None)
[out]
MypyFile:1(
  ImportFrom:1(typing, [Tuple : Tuple, cast : cast])
  ExpressionStmt:2(
    CastExpr:2(
      NameExpr(None [builtins.None])
      Tuple[builtins.int, builtins.str])))

[case testCastToFunctionType]
from typing import Function, cast
cast(Function[[int], str], None)
[out]
MypyFile:1(
  ImportFrom:1(typing, [Function : Function, cast : cast])
  ExpressionStmt:2(
    CastExpr:2(
      NameExpr(None [builtins.None])
      def (builtins.int) -> builtins.str)))

[case testCastToStringLiteralType]
from typing import cast
cast('int', 1)
[out]
MypyFile:1(
  ImportFrom:1(typing, [cast : cast])
  ExpressionStmt:2(
    CastExpr:2(
      IntExpr(1)
      builtins.int)))

[case testFunctionTypeVariable]
from typing import typevar, Undefined
t = typevar('t')
def f(x: t) -> None:
  y = Undefined # type: t
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Undefined : Undefined])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  FuncDef:3(
    f
    Args(
      Var(x))
    def [t] (x: t`-1)
    Block:3(
      AssignmentStmt:4(
        NameExpr(y [l])
        NameExpr(Undefined [typing.Undefined])
        t`-1))))

[case testTwoFunctionTypeVariables]
from typing import typevar
t = typevar('t')
u = typevar('u')
def f(x: t, y: u, z: t) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  AssignmentStmt:3(
    NameExpr(u* [__main__.u])
    TypeVarExpr:3())
  FuncDef:4(
    f
    Args(
      Var(x)
      Var(y)
      Var(z))
    def [t, u] (x: t`-1, y: u`-2, z: t`-1)
    Block:4(
      PassStmt:4())))

[case testNestedGenericFunctionTypeVariable]
from typing import typevar, Generic
t = typevar('t')
class A(Generic[t]): pass
def f(x: A[t], y) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  ClassDef:3(
    A
    TypeVars(
      t)
    PassStmt:3())
  FuncDef:4(
    f
    Args(
      Var(x)
      Var(y))
    def [t] (x: __main__.A[t`-1], y: Any)
    Block:4(
      PassStmt:4())))

[case testNestedGenericFunctionTypeVariable2]
from typing import typevar, Tuple, Generic
t = typevar('t')
class A(Generic[t]): pass
def f(x: Tuple[int, t]) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Tuple : Tuple, Generic : Generic])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  ClassDef:3(
    A
    TypeVars(
      t)
    PassStmt:3())
  FuncDef:4(
    f
    Args(
      Var(x))
    def [t] (x: Tuple[builtins.int, t`-1])
    Block:4(
      PassStmt:4())))

[case testNestedGenericFunctionTypeVariable3]
from typing import typevar, Function, Generic
t = typevar('t')
class A(Generic[t]): pass
def f(x: Function[[int, t], int]) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Function : Function, Generic : Generic])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  ClassDef:3(
    A
    TypeVars(
      t)
    PassStmt:3())
  FuncDef:4(
    f
    Args(
      Var(x))
    def [t] (x: def (builtins.int, t`-1) -> builtins.int)
    Block:4(
      PassStmt:4())))

[case testNestedGenericFunctionTypeVariable4]
from typing import typevar, Function, Generic
t = typevar('t')
class A(Generic[t]): pass
def f(x: Function[[], t]) -> None: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Function : Function, Generic : Generic])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  ClassDef:3(
    A
    TypeVars(
      t)
    PassStmt:3())
  FuncDef:4(
    f
    Args(
      Var(x))
    def [t] (x: def () -> t`-1)
    Block:4(
      PassStmt:4())))

[case testGenericFunctionTypeVariableInReturnType]
from typing import typevar
t = typevar('t')
def f() -> t: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  FuncDef:3(
    f
    def [t] () -> t`-1
    Block:3(
      PassStmt:3())))

[case testSelfType]
class A:
  def f(self, o: object) -> None: pass
[out]
MypyFile:1(
  ClassDef:1(
    A
    FuncDef:2(
      f
      Args(
        Var(self)
        Var(o))
      def (self: __main__.A, o: builtins.object)
      Block:2(
        PassStmt:2()))))
        
[case testNestedGenericFunction]
from typing import typevar
t = typevar('t')
def f() -> None:
    def g() -> t: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  FuncDef:3(
    f
    def ()
    Block:3(
      FuncDef:4(
        g
        def [t] () -> t`-1
        Block:4(
          PassStmt:4())))))

[case testClassTvar]
from typing import typevar, Generic

t = typevar('t')

class c(Generic[t]):
  def f(self) -> t: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic])
  AssignmentStmt:3(
    NameExpr(t* [__main__.t])
    TypeVarExpr:3())
  ClassDef:5(
    c
    TypeVars(
      t)
    FuncDef:6(
      f
      Args(
        Var(self))
      def (self: __main__.c[t`1]) -> t`1
      Block:6(
        PassStmt:6()))))

[case testClassTvar2]
from typing import typevar, Generic

t = typevar('t')
s = typevar('s')

class c(Generic[t, s]):
  def f(self, x: s) -> t: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic])
  AssignmentStmt:3(
    NameExpr(t* [__main__.t])
    TypeVarExpr:3())
  AssignmentStmt:4(
    NameExpr(s* [__main__.s])
    TypeVarExpr:4())
  ClassDef:6(
    c
    TypeVars(
      t
      s)
    FuncDef:7(
      f
      Args(
        Var(self)
        Var(x))
      def (self: __main__.c[t`1, s`2], x: s`2) -> t`1
      Block:7(
        PassStmt:7()))))

[case testGenericBaseClass]
from typing import typevar, Generic
t = typevar('t')
class d(Generic[t]): pass
class c(d[t], Generic[t]): pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  ClassDef:3(
    d
    TypeVars(
      t)
    PassStmt:3())
  ClassDef:4(
    c
    TypeVars(
      t)
    BaseType(
      __main__.d[t`1])
    PassStmt:4()))

[case testTupleType]
from typing import Tuple
t = None # type: tuple
t1 = None # type: Tuple[object]
t2 = None # type: Tuple[int, object]
[builtins fixtures/tuple.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [Tuple : Tuple])
  AssignmentStmt:2(
    NameExpr(t [__main__.t])
    NameExpr(None [builtins.None])
    builtins.tuple)
  AssignmentStmt:3(
    NameExpr(t1 [__main__.t1])
    NameExpr(None [builtins.None])
    Tuple[builtins.object])
  AssignmentStmt:4(
    NameExpr(t2 [__main__.t2])
    NameExpr(None [builtins.None])
    Tuple[builtins.int, builtins.object]))

[case testFunctionTypes]
from typing import Function
f = None # type: Function[[object, int], str]
g = None # type: Function[[], None]
[out]
MypyFile:1(
  ImportFrom:1(typing, [Function : Function])
  AssignmentStmt:2(
    NameExpr(f [__main__.f])
    NameExpr(None [builtins.None])
    def (builtins.object, builtins.int) -> builtins.str)
  AssignmentStmt:3(
    NameExpr(g [__main__.g])
    NameExpr(None [builtins.None])
    def ()))

[case testOverloadedFunction]
from typing import overload
@overload
def f(o: object) -> int: o
@overload
def f(a: str) -> object: a
[out]
MypyFile:1(
  ImportFrom:1(typing, [overload : overload])
  OverloadedFuncDef:2(
    Overload(def (o: builtins.object) -> builtins.int, \
             def (a: builtins.str) -> builtins.object)
    Decorator:2(
      Var(f)
      NameExpr(overload [typing.overload])
      FuncDef:3(
        f
        Args(
          Var(o))
        def (o: builtins.object) -> builtins.int
        Block:3(
          ExpressionStmt:3(
            NameExpr(o [l])))))
    Decorator:4(
      Var(f)
      NameExpr(overload [typing.overload])
      FuncDef:5(
        f
        Args(
          Var(a))
        def (a: builtins.str) -> builtins.object
        Block:5(
          ExpressionStmt:5(
            NameExpr(a [l])))))))

[case testReferenceToOverloadedFunction]
from typing import overload
@overload
def f() -> None: pass
@overload
def f(x: int) -> None: pass
x = f
[out]
MypyFile:1(
  ImportFrom:1(typing, [overload : overload])
  OverloadedFuncDef:2(
    Overload(def (), def (x: builtins.int))
    Decorator:2(
      Var(f)
      NameExpr(overload [typing.overload])
      FuncDef:3(
        f
        def ()
        Block:3(
          PassStmt:3())))
    Decorator:4(
      Var(f)
      NameExpr(overload [typing.overload])
      FuncDef:5(
        f
        Args(
          Var(x))
        def (x: builtins.int)
        Block:5(
          PassStmt:5()))))
  AssignmentStmt:6(
    NameExpr(x* [__main__.x])
    NameExpr(f [__main__.f])))

[case testNestedOverloadedFunction]
from typing import overload
def f():
    @overload
    def g(): pass
    @overload
    def g(x): pass
    y = g
[out]
MypyFile:1(
  ImportFrom:1(typing, [overload : overload])
  FuncDef:2(
    f
    Block:2(
      OverloadedFuncDef:3(
        Overload(def () -> Any, def (x: Any) -> Any)
        Decorator:3(
          Var(g)
          NameExpr(overload [typing.overload])
          FuncDef:4(
            g
            Block:4(
              PassStmt:4())))
        Decorator:5(
          Var(g)
          NameExpr(overload [typing.overload])
          FuncDef:6(
            g
            Args(
              Var(x))
            Block:6(
              PassStmt:6()))))
      AssignmentStmt:7(
        NameExpr(y* [l])
        NameExpr(g [l])))))

[case testImplicitGenericTypeArgs]
from typing import typevar, Generic, Undefined
t = typevar('t')
s = typevar('s')
class A(Generic[t, s]): pass
x = Undefined # type: A
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic, Undefined : Undefined])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  AssignmentStmt:3(
    NameExpr(s* [__main__.s])
    TypeVarExpr:3())
  ClassDef:4(
    A
    TypeVars(
      t
      s)
    PassStmt:4())
  AssignmentStmt:5(
    NameExpr(x [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    __main__.A[Any, Any]))

[case testImplicitTypeArgsAndGenericBaseClass]
from typing import typevar, Generic
t = typevar('t')
s = typevar('s')
class B(Generic[s]): pass
class A(B, Generic[t]): pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  AssignmentStmt:3(
    NameExpr(s* [__main__.s])
    TypeVarExpr:3())
  ClassDef:4(
    B
    TypeVars(
      s)
    PassStmt:4())
  ClassDef:5(
    A
    TypeVars(
      t)
    BaseType(
      __main__.B[Any])
    PassStmt:5()))

[case testTypeApplication]
from typing import typevar, Generic
t = typevar('t')
class A(Generic[t]): pass
x = A[int]()
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  ClassDef:3(
    A
    TypeVars(
      t)
    PassStmt:3())
  AssignmentStmt:4(
    NameExpr(x* [__main__.x])
    CallExpr:4(
      TypeApplication:4(
        NameExpr(A [__main__.A])
        Types(
          builtins.int))
      Args())))

[case testTypeApplicationWithTwoTypeArgs]
from typing import typevar, Generic, Any
t = typevar('t')
s = typevar('s')
class A(Generic[t, s]): pass
x = A[int, Any]()
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic, Any : Any])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  AssignmentStmt:3(
    NameExpr(s* [__main__.s])
    TypeVarExpr:3())
  ClassDef:4(
    A
    TypeVars(
      t
      s)
    PassStmt:4())
  AssignmentStmt:5(
    NameExpr(x* [__main__.x])
    CallExpr:5(
      TypeApplication:5(
        NameExpr(A [__main__.A])
        Types(
          builtins.int
          Any))
      Args())))

[case testFunctionTypeApplication]
from typing import typevar
t = typevar('t')
def f(x: t) -> None: pass
f[int](1)
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  FuncDef:3(
    f
    Args(
      Var(x))
    def [t] (x: t`-1)
    Block:3(
      PassStmt:3()))
  ExpressionStmt:4(
    CallExpr:4(
      TypeApplication:4(
        NameExpr(f [__main__.f])
        Types(
          builtins.int))
      Args(
        IntExpr(1)))))

[case testTypeApplicationWithStringLiteralType]
from typing import typevar, Generic
t = typevar('t')
class A(Generic[t]): pass
A['int']()
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic])
  AssignmentStmt:2(
    NameExpr(t* [__main__.t])
    TypeVarExpr:2())
  ClassDef:3(
    A
    TypeVars(
      t)
    PassStmt:3())
  ExpressionStmt:4(
    CallExpr:4(
      TypeApplication:4(
        NameExpr(A [__main__.A])
        Types(
          builtins.int))
      Args())))

[case testListTypeAlias]
from typing import List
def f() -> List[int]: pass
[builtins fixtures/list.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [List : List])
  FuncDef:2(
    f
    def () -> builtins.list[builtins.int]
    Block:2(
      PassStmt:2())))

[case testDictTypeAlias]
from typing import Dict
def f() -> Dict[int, str]: pass
[builtins fixtures/dict.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [Dict : Dict])
  FuncDef:2(
    f
    def () -> builtins.dict[builtins.int, builtins.str]
    Block:2(
      PassStmt:2())))

[case testQualifiedTypeAlias]
import typing
def f() -> typing.List[int]: pass
[builtins fixtures/list.py]
[out]
MypyFile:1(
  Import:1(typing : typing)
  FuncDef:2(
    f
    def () -> builtins.list[builtins.int]
    Block:2(
      PassStmt:2())))

[case testTypeApplicationWithTypeAlias]
from typing import List
List[List[int]]
[builtins fixtures/list.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [List : List])
  ExpressionStmt:2(
    TypeApplication:2(
      NameExpr(List [builtins.list])
      Types(
        builtins.list[builtins.int]))))

[case testTypeApplicationWithQualifiedTypeAlias]
import typing
typing.List[typing.List[int]]
[builtins fixtures/list.py]
[out]
MypyFile:1(
  Import:1(typing : typing)
  ExpressionStmt:2(
    TypeApplication:2(
      MemberExpr:2(
        NameExpr(typing)
        List [builtins.list])
      Types(
        builtins.list[builtins.int]))))

[case testTypeApplicationWithinLambda]
from typing import List
lambda: List[int]()
[builtins fixtures/list.py]
[out]
MypyFile:1(
  ImportFrom:1(typing, [List : List])
  ExpressionStmt:2(
    FuncExpr:2(
      Block:2(
        ReturnStmt:2(
          CallExpr:2(
            TypeApplication:2(
              NameExpr(List [builtins.list])
              Types(
                builtins.int))
            Args()))))))

[case testVarArgsAndKeywordArgs]
def g(*x: int, y: str = ''): pass
[out]
MypyFile:1(
  FuncDef:1(
    g
    MaxPos(0)
    Args(
      Var(y))
    def (*x: builtins.int, *, y: builtins.str) -> Any
    Init(
      AssignmentStmt:1(
        NameExpr(y [l])
        StrExpr()))
    VarArg(
      Var(x))
    Block:1(
      PassStmt:1())))

[case testQualifiedGeneric]
from typing import typevar
import typing
T = typevar('T')
class A(typing.Generic[T]): pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar])
  Import:2(typing : typing)
  AssignmentStmt:3(
    NameExpr(T* [__main__.T])
    TypeVarExpr:3())
  ClassDef:4(
    A
    TypeVars(
      T)
    PassStmt:4()))

[case testQualifiedTypevar]
import typing
T = typing.typevar('T')
def f(x: T) -> T: pass
[out]
MypyFile:1(
  Import:1(typing : typing)
  AssignmentStmt:2(
    NameExpr(T* [__main__.T])
    TypeVarExpr:2())
  FuncDef:3(
    f
    Args(
      Var(x))
    def [T] (x: T`-1) -> T`-1
    Block:3(
      PassStmt:3())))

[case testAliasedTypevar]
from typing import typevar as tv
T = tv('T')
def f(x: T) -> T: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : tv])
  AssignmentStmt:2(
    NameExpr(T* [__main__.T])
    TypeVarExpr:2())
  FuncDef:3(
    f
    Args(
      Var(x))
    def [T] (x: T`-1) -> T`-1
    Block:3(
      PassStmt:3())))

[case testLocalTypevar]
from typing import typevar
def f():
    T = typevar('T')
    def g(x: T) -> T: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar])
  FuncDef:2(
    f
    Block:2(
      AssignmentStmt:3(
        NameExpr(T* [l])
        TypeVarExpr:3())
      FuncDef:4(
        g
        Args(
          Var(x))
        def [T] (x: T`-1) -> T`-1
        Block:4(
          PassStmt:4())))))

[case testClassLevelTypevar]
from typing import typevar
class A:
    T = typevar('T')
    def g(self, x: T) -> T: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar])
  ClassDef:2(
    A
    AssignmentStmt:3(
      NameExpr(T* [m])
      TypeVarExpr:3())
    FuncDef:4(
      g
      Args(
        Var(self)
        Var(x))
      def [T] (self: __main__.A, x: T`-1) -> T`-1
      Block:4(
        PassStmt:4()))))

[case testImportTypevar]
from typing import Generic
from _m import T
class A(Generic[T]):
    y = None # type: T
[file _m.py]
from typing import typevar
T = typevar('T')
[out]
MypyFile:1(
  ImportFrom:1(typing, [Generic : Generic])
  ImportFrom:2(_m, [T : T])
  ClassDef:3(
    A
    TypeVars(
      T)
    AssignmentStmt:4(
      NameExpr(y [m])
      NameExpr(None [builtins.None])
      T`1)))

[case testQualifiedReferenceToTypevarInClass]
from typing import Generic
import _m
class A(Generic[_m.T]):
    a = None # type: _m.T
    def f(self, x: _m.T):
        b = None # type: _m.T
[file _m.py]
from typing import typevar
T = typevar('T')
[out]
MypyFile:1(
  ImportFrom:1(typing, [Generic : Generic])
  Import:2(_m : _m)
  ClassDef:3(
    A
    TypeVars(
      _m.T)
    AssignmentStmt:4(
      NameExpr(a [m])
      NameExpr(None [builtins.None])
      _m.T`1)
    FuncDef:5(
      f
      Args(
        Var(self)
        Var(x))
      def (self: __main__.A[_m.T`1], x: _m.T`1) -> Any
      Block:5(
        AssignmentStmt:6(
          NameExpr(b [l])
          NameExpr(None [builtins.None])
          _m.T`1)))))

[case testQualifiedReferenceToTypevarInFunctionSignature]
import _m
def f(x: _m.T) -> None:
    a = None # type: _m.T
[file _m.py]
from typing import typevar
T = typevar('T')
[out]
MypyFile:1(
  Import:1(_m : _m)
  FuncDef:2(
    f
    Args(
      Var(x))
    def [_m.T] (x: _m.T`-1)
    Block:2(
      AssignmentStmt:3(
        NameExpr(a [l])
        NameExpr(None [builtins.None])
        _m.T`-1))))

[case testFunctionCommentAnnotation]
from typing import Any
def f(x): # type: (int) -> Any
  x = 1
[out]
MypyFile:1(
  ImportFrom:1(typing, [Any : Any])
  FuncDef:2(
    f
    Args(
      Var(x))
    def (x: builtins.int) -> Any
    Block:2(
      AssignmentStmt:3(
        NameExpr(x [l])
        IntExpr(1)))))

[case testMethodCommentAnnotation]
import typing
class A:
  def f(self, x): # type: (int) -> str
    x = 1
[out]
MypyFile:1(
  Import:1(typing : typing)
  ClassDef:2(
    A
    FuncDef:3(
      f
      Args(
        Var(self)
        Var(x))
      def (self: __main__.A, x: builtins.int) -> builtins.str
      Block:3(
        AssignmentStmt:4(
          NameExpr(x [l])
          IntExpr(1))))))

[case testTypevarWithValues]
from typing import typevar, Any
T = typevar('T', values=(int, str))
S = typevar('S', values=(Any, int, str))
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Any : Any])
  AssignmentStmt:2(
    NameExpr(T* [__main__.T])
    TypeVarExpr:2(
      Values(
        builtins.int
        builtins.str)))
  AssignmentStmt:3(
    NameExpr(S* [__main__.S])
    TypeVarExpr:3(
      Values(
        Any
        builtins.int
        builtins.str))))

[case testGenericFunctionWithValueSet]
from typing import typevar
T = typevar('T', values=(int, str))
def f(x: T) -> T: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar])
  AssignmentStmt:2(
    NameExpr(T* [__main__.T])
    TypeVarExpr:2(
      Values(
        builtins.int
        builtins.str)))
  FuncDef:3(
    f
    Args(
      Var(x))
    def [T in (builtins.int, builtins.str)] (x: T`-1) -> T`-1
    Block:3(
      PassStmt:3())))

[case testGenericClassWithValueSet]
from typing import typevar, Generic
T = typevar('T', values=(int, str))
class C(Generic[T]): pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [typevar : typevar, Generic : Generic])
  AssignmentStmt:2(
    NameExpr(T* [__main__.T])
    TypeVarExpr:2(
      Values(
        builtins.int
        builtins.str)))
  ClassDef:3(
    C
    TypeVars(
      T in (builtins.int, builtins.str))
    PassStmt:3()))

[case testSimpleDucktypeDecorator]
from typing import ducktype
@ducktype(str)
class S: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [ducktype : ducktype])
  ClassDef:2(
    S
    Ducktype(builtins.str)
    Decorators(
      DucktypeExpr:2(builtins.str))
    PassStmt:3()))

[case testDisjointclassDecorator]
from typing import disjointclass
@disjointclass(str)
class A: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [disjointclass : disjointclass])
  ClassDef:2(
    A
    Disjointclasses(
      builtins.str)
    Decorators(
      DisjointclassExpr:2(builtins.str))
    PassStmt:3()))

[case testDisjointclassDecorators]
from typing import disjointclass
@disjointclass(str)
@disjointclass(int)
class A: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [disjointclass : disjointclass])
  ClassDef:2(
    A
    Disjointclasses(
      builtins.str
      builtins.int)
    Decorators(
      DisjointclassExpr:2(builtins.str)
      DisjointclassExpr:3(builtins.int))
    PassStmt:4()))
