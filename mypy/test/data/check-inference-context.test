

-- Basic test cases
-- ----------------


[case testBasicContextInference]
from typing import Undefined, typevar, Generic
T = typevar('T')
ab = Undefined # type: A[B]
ao = Undefined # type: A[object]
b = Undefined # type: B

ao = f()
ab = f()
b = f() # E: Incompatible types in assignment (expression has type A[None], variable has type "B")

def f() -> 'A[T]': pass

class A(Generic[T]): pass
class B: pass

[case testBasicContextInferenceForConstructor]
from typing import Undefined, typevar, Generic
T = typevar('T')
ab = Undefined # type: A[B]
ao = Undefined # type: A[object]
b = Undefined # type: B

ao = A()
ab = A()
b = A() # E: Incompatible types in assignment (expression has type A[None], variable has type "B")

class A(Generic[T]): pass
class B: pass

[case testIncompatibleContextInference]
from typing import Undefined, typevar, Generic
T = typevar('T')
b = Undefined # type: B
c = Undefined # type: C
ab = Undefined # type: A[B]
ao = Undefined # type: A[object]
ac = Undefined # type: A[C]

ac = f(b) # E: Argument 1 to "f" has incompatible type "B"; expected "C"
ab = f(c) # E: Argument 1 to "f" has incompatible type "C"; expected "B"

ao = f(b)
ab = f(b)
ao = f(c)
ac = f(c)

def f(a: T) -> 'A[T]':
    pass

class A(Generic[T]): pass

class B: pass
class C: pass


-- Local variables
-- ---------------


[case testInferGenericLocalVariableTypeWithEmptyContext]
from typing import Undefined, typevar, Generic
T = typevar('T')
def g() -> None:
    ao = Undefined # type: A[object]
    ab = Undefined # type: A[B]
    o = Undefined # type: object
    b = Undefined # type: B

    x = f(o)
    ab = x # E: Incompatible types in assignment (expression has type A[object], variable has type A[B])
    ao = x
    y = f(b)
    ao = y # E: Incompatible types in assignment (expression has type A[B], variable has type A[object])
    ab = y

def f(a: T) -> 'A[T]': pass

class A(Generic[T]): pass
class B: pass
[out]
main: In function "g":

[case testInferLocalVariableTypeWithUnderspecifiedGenericType]
from typing import typevar, Generic
T = typevar('T')
def g() -> None:
    x = f() # E: Need type annotation for variable

def f() -> 'A[T]': pass
class A(Generic[T]): pass
[out]
main: In function "g":

[case testInferMultipleLocalVariableTypesWithTupleRvalue]
from typing import Undefined, typevar, Generic
T = typevar('T')
def g() -> None:
    ao = Undefined # type: A[object]
    ab = Undefined # type: A[B]
    b = Undefined # type: B
    x, y = f(b), f(b)
    ao = x # E: Incompatible types in assignment (expression has type A[B], variable has type A[object])
    ao = y # E: Incompatible types in assignment (expression has type A[B], variable has type A[object])
    ab = x
    ab = y

def f(a: T) -> 'A[T]': pass
class A(Generic[T]): pass
class B: pass
[out]
main: In function "g":

[case testInferMultipleLocalVariableTypesWithArrayRvalueAndNesting]
from typing import Undefined, typevar, List, Generic
T = typevar('T')
def h() -> None:
    ao = Undefined # type: A[object]
    ab = Undefined # type: A[B]
    b = Undefined # type: B
    x, y = g(f(b))
    ao = x # E: Incompatible types in assignment (expression has type A[B], variable has type A[object])
    ao = y # E: Incompatible types in assignment (expression has type A[B], variable has type A[object])
    ab = x
    ab = y

def f(a: T) -> 'A[T]': pass
def g(a: T) -> List[T]: pass

class A(Generic[T]): pass
class B: pass
[builtins fixtures/for.py]
[out]
main: In function "h":


-- Return types with multiple tvar instances
-- -----------------------------------------


[case testInferenceWithTypeVariableTwiceInReturnType]
from typing import Undefined, typevar, Tuple, Generic
T = typevar('T')
b = Undefined # type: B
o = Undefined # type: object
ab = Undefined # type: A[B]
ao = Undefined # type: A[object]

ab, ao = f(b) # Fail
ao, ab = f(b) # Fail

ao, ao = f(b)
ab, ab = f(b)
ao, ao = f(o)

def f(a: T) -> 'Tuple[A[T], A[T]]': pass

class A(Generic[T]): pass
class B: pass
[builtins fixtures/tuple.py]
[out]
main, line 8: Incompatible types in assignment (expression has type A[B], variable has type A[object])
main, line 9: Incompatible types in assignment (expression has type A[B], variable has type A[object])

[case testInferenceWithTypeVariableTwiceInReturnTypeAndMultipleVariables]
from typing import Undefined, typevar, Tuple, Generic
S = typevar('S')
T = typevar('T')
b = Undefined # type: B
o = Undefined # type: object
ab = Undefined # type: A[B]
ao = Undefined # type: A[object]

ao, ao, ab = f(b, b)     # Fail
ao, ab, ao = g(b, b)     # Fail
ao, ab, ab, ab = h(b, b) # Fail
ab, ab, ao, ab = h(b, b) # Fail

ao, ab, ab = f(b, b)
ab, ab, ao = g(b, b)
ab, ab, ab, ab = h(b, b)

def f(a: S, b: T) -> 'Tuple[A[S], A[T], A[T]]': pass
def g(a: S, b: T) -> 'Tuple[A[S], A[S], A[T]]': pass
def h(a: S, b: T) -> 'Tuple[A[S], A[S], A[T], A[T]]': pass

class A(Generic[T]): pass
class B: pass
[builtins fixtures/tuple.py]
[out]
main, line 9: Incompatible types in assignment (expression has type A[B], variable has type A[object])
main, line 10: Incompatible types in assignment (expression has type A[B], variable has type A[object])
main, line 11: Incompatible types in assignment (expression has type A[B], variable has type A[object])
main, line 12: Incompatible types in assignment (expression has type A[B], variable has type A[object])


-- Multiple tvar instances in arguments
-- ------------------------------------


[case testMultipleTvatInstancesInArgs]
from typing import Undefined, typevar, Generic
T = typevar('T')
ac = Undefined # type: A[C]
ab = Undefined # type: A[B]
ao = Undefined # type: A[object]
b = Undefined # type: B
c = Undefined # type: C
o = Undefined # type: object

ab = f(b, o) # E: Argument 2 to "f" has incompatible type "object"; expected "B"
ab = f(o, b) # E: Argument 1 to "f" has incompatible type "object"; expected "B"
ac = f(b, c) # E: Argument 1 to "f" has incompatible type "B"; expected "C"
ac = f(c, b) # E: Argument 2 to "f" has incompatible type "B"; expected "C"

ao = f(b, c)
ao = f(c, b)
ab = f(c, b)

def f(a: T, b: T) -> 'A[T]': pass

class A(Generic[T]): pass
class B: pass
class C(B): pass


-- Nested generic function calls
-- -----------------------------


[case testNestedGenericFunctionCall1]
from typing import Undefined, typevar, Generic
T = typevar('T')
aab = Undefined # type: A[A[B]]
aao = Undefined # type: A[A[object]]
ao = Undefined # type: A[object]
b = Undefined # type: B
o = Undefined # type: object

aab = f(f(o)) # E: Argument 1 to "f" has incompatible type "object"; expected "B"

aab = f(f(b))
aao = f(f(b))
ao = f(f(b))

def f(a: T) -> 'A[T]': pass

class A(Generic[T]): pass
class B: pass

[case testNestedGenericFunctionCall2]
from typing import Undefined, typevar, Generic
T = typevar('T')
ab = Undefined # type: A[B]
ao = Undefined # type: A[object]
b = Undefined # type: B
o = Undefined # type: object

ab = f(g(o)) # E: Argument 1 to "g" has incompatible type "object"; expected "B"

ab = f(g(b))
ao = f(g(b))

def f(a: T) -> T: pass

def g(a: T) -> 'A[T]': pass

class A(Generic[T]): pass
class B: pass

[case testNestedGenericFunctionCall3]
from typing import Undefined, typevar, Generic
T = typevar('T')
ab = Undefined # type: A[B]
ao = Undefined # type: A[object]
b = Undefined # type: B
o = Undefined # type: object

ab = f(g(o), g(b)) # E: Argument 1 to "g" has incompatible type "object"; expected "B"
ab = f(g(b), g(o)) # E: Argument 1 to "g" has incompatible type "object"; expected "B"

ab = f(g(b), g(b))
ao = f(g(b), g(o))
ao = f(g(o), g(b))

def f(a: T, b: T) -> T:
    pass

def g(a: T) -> 'A[T]': pass

class A(Generic[T]): pass
class B: pass


-- Method calls
-- ------------


[case testMethodCallWithContextInference]
from typing import Undefined, typevar, Generic
T = typevar('T')
o = Undefined # type: object
b = Undefined # type: B
c = Undefined # type: C
ao = Undefined # type: A[object]
ab = Undefined # type: A[B]
ac = Undefined # type: A[C]

ab.g(f(o))        # E: Argument 1 to "f" has incompatible type "object"; expected "B"
ac = f(b).g(f(c)) # E: Incompatible types in assignment (expression has type A[B], variable has type A[C])
ac = f(c).g(f(b)) # E: Argument 1 to "f" has incompatible type "B"; expected "C"

ab = f(b).g(f(c))
ab.g(f(c))

def f(a: T) -> 'A[T]': pass

class A(Generic[T]):
    def g(self, a: 'A[T]') -> 'A[T]': pass

class B: pass
class C(B): pass


-- List expressions
-- ----------------


[case testEmptyListExpression]
from typing import Undefined, List
aa = Undefined # type: List[A]
ao = Undefined # type: List[object]
a = Undefined # type: A

a = [] # E: Incompatible types in assignment (expression has type List[None], variable has type "A")

aa = []
ao = []

class A: pass
[builtins fixtures/list.py]

[case testSingleItemListExpressions]
from typing import Undefined, List
aa = Undefined # type: List[A]
ab = Undefined # type: List[B]
ao = Undefined # type: List[object]
a = Undefined # type: A
b = Undefined # type: B

aa = [b] # E: List item 1 has incompatible type "B"
ab = [a] # E: List item 1 has incompatible type "A"

aa = [a]
ab = [b]
ao = [a]
aa = [None]
ao = [None]

class A: pass
class B: pass
[builtins fixtures/list.py]

[case testMultiItemListExpressions]
from typing import Undefined, List
aa = Undefined # type: List[A]
ab = Undefined # type: List[B]
ao = Undefined # type: List[object]
a = Undefined # type: A
b = Undefined # type: B

ab = [b, a] # E: List item 2 has incompatible type "A"
ab = [a, b] # E: List item 1 has incompatible type "A"

aa = [a, b, a]
ao = [a, b]

class A: pass
class B(A): pass
[builtins fixtures/list.py]

[case testLocalVariableInferenceFromEmptyList]
import typing
def f() -> None:
    a = []     # E: Need type annotation for variable
    b = [None]  # E: Need type annotation for variable
    c = [B()]
    c = [object()] # E: List item 1 has incompatible type "object"
    c = [B()]
class B: pass
[builtins fixtures/list.py]
[out]
main: In function "f":

[case testNestedListExpressions]
from typing import Undefined, List
aao = Undefined # type: List[List[object]]
aab = Undefined # type: List[List[B]]
ab = Undefined # type: List[B]
b = Undefined # type: B
o = Undefined # type: object

aao = [[o], ab] # E: List item 2 has incompatible type List[B]
aab = [[], [o]] # E: List item 1 has incompatible type "object"

aao = [[None], [b], [], [o]]
aab = [[None], [b], []]
aab = [ab, []]

class B: pass
[builtins fixtures/list.py]


-- Complex context
-- ---------------


[case testParenthesesAndContext]
from typing import List
l = ([A()]) # type: List[object]
class A: pass
[builtins fixtures/list.py]

[case testComplexTypeInferenceWithTuple]
from typing import typevar, Tuple, Generic
k = typevar('k')
t = typevar('t')
v = typevar('v')
def f(x: Tuple[k]) -> 'A[k]': pass

d = f((A(),)) # type: A[A[B]]

class A(Generic[t]): pass
class B: pass
class C: pass
class D(Generic[k, v]): pass
[builtins fixtures/list.py]


-- Dictionary literals
-- -------------------


[case testDictionaryLiteralInContext]
from typing import Dict, typevar, Generic
t = typevar('t')
class A(Generic[t]): pass
class B: pass
class C: pass
d = {A()    : A[C](), 
     A[B]() : A()} # type: Dict[A[B], A[C]]
[builtins fixtures/dict.py]


-- Special cases (regression tests etc.)
-- -------------------------------------


[case testInitializationWithInferredGenericType]
from typing import typevar, Generic
T = typevar('T')
c = f(A()) # type: C[A] # E: Argument 1 to "f" has incompatible type "A"; expected C[A]

def f(x: T) -> T: pass
class C(Generic[T]): pass
class A: pass

[case testInferredGenericTypeAsReturnValue]
from typing import typevar, Generic
T = typevar('T')
def t() -> 'A[B]':
    return f(D()) # E: Argument 1 to "f" has incompatible type "D"; expected "B"
    return A()
    return f(C())

def f(a: T) -> 'A[T]': pass
class A(Generic[T]): pass
class B: pass
class C(B): pass
class D: pass
[out]
main: In function "t":

[case testIntersectionWithInferredGenericArgument]
from typing import overload, typevar, Generic
T = typevar('T')
f(A())

@overload
def f(x: 'A[B]') -> None: pass
@overload
def f(x: 'B') -> None: pass
class A(Generic[T]): pass
class B: pass

[case testInferenceWithAbstractClassContext]
from typing import typevar, AbstractGeneric
from abc import abstractmethod, ABCMeta
t = typevar('t')
x = A() # type: I[int]
y = A[object]() # type: I[int] # E: Incompatible types in assignment (expression has type A[object], variable has type I[int])

class I(AbstractGeneric[t]):
  @abstractmethod
  def f(self): pass
class A(I[t], AbstractGeneric[t]):
  def f(self): pass

[case testInferenceWithAbstractClassContext2]
from typing import typevar, AbstractGeneric
from abc import abstractmethod, ABCMeta
t = typevar('t')
a = f(A()) # type: A[int]
aa = f(A[int]())
class I(AbstractGeneric[t]): pass
class A(I[t], AbstractGeneric[t]): pass
def f(i: I[t]) -> A[t]: pass

[case testInferenceWithAbstractClassContext3]
from typing import typevar, Generic, Iterable
t = typevar('t')
class set(Generic[t]):
    def __init__(self, iterable: Iterable[t]) -> None: pass
b = bool()
l = set([b])
l = set[bool]([])
l = set[object]([]) # E: Incompatible types in assignment (expression has type set[object], variable has type set[bool])
[builtins fixtures/for.py]

[case testInferenceWithAbstractClassContext4]
from typing import typevar, Generic, Iterable
t = typevar('t')
class set(Generic[t]): pass
def f(iterable: Iterable[t]) -> set[t]: pass
b = bool()
l = f([b])
l = f[bool]([])
l = f[object]([]) # E: Incompatible types in assignment (expression has type set[object], variable has type set[bool])
[builtins fixtures/for.py]


-- Infer generic type in 'any' context
-- -----------------------------------


[case testInferGenericTypeInAnyContext]
from typing import Any, typevar, Generic
s = typevar('s')
t = typevar('t')
x = [] # type: Any
y = C() # type: Any
class C(Generic[s, t]): pass
[builtins fixtures/list.py]


-- Lambdas
-- -------


[case testInferLambdaArgumentTypeUsingContext]
from typing import Undefined, Function
f = Undefined # type: Function[[B], A]
f = lambda x: x.o
f = lambda x: x.x # E: "B" has no attribute "x"
class A: pass
class B:
  o = Undefined # type: A

[case testInferLambdaReturnTypeUsingContext]
from typing import Undefined, List, Function
f = Undefined # type: Function[[], List[A]]
f = lambda: []
f = lambda: [B()]  # E: List item 1 has incompatible type "B"
class A: pass
class B: pass
[builtins fixtures/list.py]

[case testInferLambdaAsGenericFunctionArgument]
from typing import typevar, List, Any, Function, Undefined
t = typevar('t')
class A:
  x = Undefined # type: A
def f(a: List[t], fn: Function[[t], Any]) -> None: pass
f(List[A](), lambda a: a.x)
[builtins fixtures/list.py]

[case testInvalidContextForLambda]
from typing import Function
f = lambda x: A() # type: Function[[], A]
f2 = lambda: A() # type: Function[[A], A]
class A: pass
[out]
main, line 2: Cannot infer type of lambda
main, line 3: Cannot infer type of lambda
main, line 3: Incompatible types in assignment (expression has type , variable has type )


-- Overloads + generic functions
-- -----------------------------


[case testMapWithOverloadedFunc]
from typing import typevar, Function, List, overload, Any
t = typevar('t')
s = typevar('s')
def map(f: Function[[t], s], seq: List[t]) -> List[s]: pass

@overload
def g(o: object) -> 'B': pass
@overload
def g(o: 'A', x: Any = None) -> 'B': pass

class A: pass
class B: pass

m = map(g, [A()])
b = m # type: List[B]
a = m # type: List[A] # E: Incompatible types in assignment (expression has type List[B], variable has type List[A])
[builtins fixtures/list.py]


-- Boolean operators
-- -----------------


[case testOrOperationInferredFromContext]
from typing import Undefined, List
a, b, c = Undefined, Undefined, Undefined # type: (List[A], List[B], List[C])
a = a or []
a = [] or a
b = b or [C()]
a = a or b # E: Incompatible types in assignment (expression has type "object", variable has type List[A])
b = b or c # E: Incompatible types in assignment (expression has type "object", variable has type List[B])

class A: pass
class B: pass
class C(B): pass
[builtins fixtures/list.py]


-- Special cases
-- -------------


[case testSomeTypeVarsInferredFromContext]
from typing import Undefined, List, typevar
t = typevar('t')
s = typevar('s')
# Some type variables can be inferred using context, but not all of them.
a = Undefined # type: List[A]
a = f(A(), B())
a = f(B(), B()) # E: Argument 1 to "f" has incompatible type "B"; expected "A"
def f(a: s, b: t) -> List[s]: pass
class A: pass
class B: pass
[builtins fixtures/list.py]

[case testSomeTypeVarsInferredFromContext2]
from typing import Undefined, List, typevar
s = typevar('s')
t = typevar('t')
# Like testSomeTypeVarsInferredFromContext, but tvars in different order.
a = Undefined # type: List[A]
a = f(A(), B())
a = f(B(), B()) # E: Argument 1 to "f" has incompatible type "B"; expected "A"
def f(a: s, b: t) -> List[s]: pass
class A: pass
class B: pass
[builtins fixtures/list.py]

[case testLambdaInListAndHigherOrderFunction]
from typing import typevar, Function, List
t = typevar('t')
s = typevar('s')
map(
  [lambda x: x], [])
def map(f: List[Function[[t], s]], a: List[t]) -> List[s]: pass
class A: pass
[builtins fixtures/list.py]
[out]

[case testChainedAssignmentInferenceContexts]
from typing import Undefined, List
i = Undefined # type: List[int]
s = Undefined # type: List[str]
i = i = []
i = s = [] # E: Incompatible types in assignment (expression has type List[str], variable has type List[int])
[builtins fixtures/list.py]

[case testContextForAttributeDeclaredInInit]
from typing import List
class A:
  def __init__(self):
    self.x = [] # type: List[int]
a = A()
a.x = []
a.x = [1]
a.x = [''] # E: List item 1 has incompatible type "str"
[builtins fixtures/list.py]

[case testListMultiplyInContext]
from typing import Undefined, List
a = Undefined(List[int])
a = [None] * 3
a = [''] * 3 # E: List item 1 has incompatible type "str"
[builtins fixtures/list.py]

[case testUnionTypeContext]
from typing import Undefined, Union, List, typevar
T = typevar('T')
def f(x: Union[List[T], str]) -> None: pass
f([1])
f('')
f(1) # E: Argument 1 to "f" has incompatible type "int"; expected "Union[List[None], str]"
[builtins fixtures/isinstancelist.py]
