-- Type checker test cases for Python 2.x mode.


[case testUnicode]
u = u'foo'
u = unicode()
s = ''
s = u'foo' # E: Incompatible types in assignment (expression has type "unicode", variable has type "str")
s = b'foo'
[builtins fixtures/python2.py]

[case testPrintStatement]
print ''() # E: "str" not callable
print 1, 1() # E: "int" not callable

[case testPrintStatementWithTarget]
class A:
    def write(self, s: str) -> None: pass

print >>A(), ''
print >>None, ''
print >>1, '' # E: "int" has no attribute "write"
print >>(None + ''), None # E: Unsupported left operand type for + (None)

[case testDivision]
class A:
    def __div__(self, x: int) -> str: pass
s = A() / 1
s = ''
s = 1 # E: Incompatible types in assignment (expression has type "int", variable has type "str")

[case testStrUnicodeCompatiblity]
import typing
def f(x: unicode) -> None: pass
f('')
f(u'')
f(b'')
[builtins fixtures/python2.py]

[case testStaticMethodWithCommentSignature]
class A:
    @staticmethod
    def f(x): # type: (int) -> str
        return ''
A.f(1)
A.f('') # E: Argument 1 to "f" of "A" has incompatible type "str"; expected "int"
[builtins fixtures/staticmethod.py]

[case testRaiseTuple]
import typing
raise BaseException, "a"
raise BaseException, "a", None
raise BaseException, "a", None, None # E: Exception must be derived from BaseException
[builtins fixtures/exception.py]

[case testTryExceptWithTuple]
try:
    None
except BaseException, e:
    e() # E: "BaseException" not callable
[builtins fixtures/exception.py]
