-- NOTE: If a module has a name starting or ending with _, it is skipped in
--       output.

[case testImport]
import x
x.y
[file x.py]
y = 1
[out]
MypyFile:1(
  Import:1(x : x)
  ExpressionStmt:2(
    MemberExpr:2(
      NameExpr(x)
      y [x.y])))
MypyFile:1(
  tmp/x.py
  AssignmentStmt:1(
    NameExpr(y* [x.y])
    IntExpr(1)))

[case testImportedNameInType]
from typing import Undefined
import m
x = Undefined # type: m.c
[file m.py]
class c: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  Import:2(m : m)
  AssignmentStmt:3(
    NameExpr(x [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    m.c))
MypyFile:1(
  tmp/m.py
  ClassDef:1(
    c
    PassStmt:1()))

[case testImportFrom]
from m import y
x = y
[file m.py]
y = 1
[out]
MypyFile:1(
  ImportFrom:1(m, [y : y])
  AssignmentStmt:2(
    NameExpr(x* [__main__.x])
    NameExpr(y [m.y])))
MypyFile:1(
  tmp/m.py
  AssignmentStmt:1(
    NameExpr(y* [m.y])
    IntExpr(1)))

[case testImportFromType]
from typing import Undefined
from m import c
x = Undefined # type: c
[file m.py]
class c: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  ImportFrom:2(m, [c : c])
  AssignmentStmt:3(
    NameExpr(x [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    m.c))
MypyFile:1(
  tmp/m.py
  ClassDef:1(
    c
    PassStmt:1()))

[case testImportMultiple]
import _m, _n
_m.x, _n.y
[file _m.py]
x = 1
[file _n.py]
y = 2
[out]
MypyFile:1(
  Import:1(_m : _m, _n : _n)
  ExpressionStmt:2(
    TupleExpr:2(
      MemberExpr:2(
        NameExpr(_m)
        x [_m.x])
      MemberExpr:2(
        NameExpr(_n)
        y [_n.y]))))

[case testImportAs]
import _m as n
n.x
[file _m.py]
x = 1
[out]
MypyFile:1(
  Import:1(_m : n)
  ExpressionStmt:2(
    MemberExpr:2(
      NameExpr(n [_m])
      x [_m.x])))

[case testImportFromMultiple]
from _m import x, y
x, y
[file _m.py]
x = y = 1
[out]
MypyFile:1(
  ImportFrom:1(_m, [x : x, y : y])
  ExpressionStmt:2(
    TupleExpr:2(
      NameExpr(x [_m.x])
      NameExpr(y [_m.y]))))

[case testImportFromAs]
from _m import y as z
z
[file _m.py]
y = 1
[out]
MypyFile:1(
  ImportFrom:1(_m, [y : z])
  ExpressionStmt:2(
    NameExpr(z [_m.y])))

[case testAccessImportedName]
from m import x
y = x
[file m.py]
from _n import x
[file _n.py]
x = 1
[out]
MypyFile:1(
  ImportFrom:1(m, [x : x])
  AssignmentStmt:2(
    NameExpr(y* [__main__.y])
    NameExpr(x [_n.x])))
MypyFile:1(
  tmp/m.py
  ImportFrom:1(_n, [x : x]))

[case testAccessImportedName2]
import _m
y = _m.x
[file _m.py]
from _n import x
[file _n.py]
x = 1
[out]
MypyFile:1(
  Import:1(_m : _m)
  AssignmentStmt:2(
    NameExpr(y* [__main__.y])
    MemberExpr:2(
      NameExpr(_m)
      x [_n.x])))

[case testAccessingImportedNameInType]
from typing import Undefined
from _m import c
x = Undefined # type: c
[file _m.py]
from _n import c
[file _n.py]
class c: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  ImportFrom:2(_m, [c : c])
  AssignmentStmt:3(
    NameExpr(x [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    _n.c))

[case testAccessingImportedNameInType2]
from typing import Undefined
import _m
x = Undefined # type: _m.c
[file _m.py]
from _n import c
[file _n.py]
class c: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  Import:2(_m : _m)
  AssignmentStmt:3(
    NameExpr(x [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    _n.c))

[case testAccessingImportedModule]
from _m import _n
_n.x
[file _m.py]
import _n
[file _n.py]
x = 1
[out]
MypyFile:1(
  ImportFrom:1(_m, [_n : _n])
  ExpressionStmt:2(
    MemberExpr:2(
      NameExpr(_n)
      x [_n.x])))

[case testAccessingImportedModule]
import _m
_m._n.x
[file _m.py]
import _n
[file _n.py]
x = 1
[out]
MypyFile:1(
  Import:1(_m : _m)
  ExpressionStmt:2(
    MemberExpr:2(
      MemberExpr:2(
        NameExpr(_m)
        _n)
      x [_n.x])))

[case testAccessTypeViaDoubleIndirection]
from typing import Undefined
from _m import c
a = Undefined # type: c
[file _m.py]
from _n import c
[file _n.py]
class c: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  ImportFrom:2(_m, [c : c])
  AssignmentStmt:3(
    NameExpr(a [__main__.a])
    NameExpr(Undefined [typing.Undefined])
    _n.c))

[case testAccessTypeViaDoubleIndirection2]
from typing import Undefined
import _m
a = Undefined # type: _m.c
[file _m.py]
from _n import c
[file _n.py]
class c: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  Import:2(_m : _m)
  AssignmentStmt:3(
    NameExpr(a [__main__.a])
    NameExpr(Undefined [typing.Undefined])
    _n.c))

[case testImportAsterisk]
from _m import *
x, y
[file _m.py]
x = y = 1
[out]
MypyFile:1(
  ImportAll:1(_m)
  ExpressionStmt:2(
    TupleExpr:2(
      NameExpr(x [_m.x])
      NameExpr(y [_m.y]))))

[case testImportAsteriskAndImportedNames]
from _m import *
n_.x, y
[file _m.py]
import n_
from n_ import y
[file n_.py]
x = y = 1
[out]
MypyFile:1(
  ImportAll:1(_m)
  ExpressionStmt:2(
    TupleExpr:2(
      MemberExpr:2(
        NameExpr(n_)
        x [n_.x])
      NameExpr(y [n_.y]))))

[case testImportAsteriskAndImportedNamesInTypes]
from typing import Undefined
from _m import *
x = Undefined # type: n_.c
y = Undefined # type: d
[file _m.py]
import n_
from n_ import d
[file n_.py]
class c: pass
class d: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  ImportAll:2(_m)
  AssignmentStmt:3(
    NameExpr(x [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    n_.c)
  AssignmentStmt:4(
    NameExpr(y [__main__.y])
    NameExpr(Undefined [typing.Undefined])
    n_.d))

[case testModuleInSubdir]
import _m
_m.x
[file _m/__init__.py]
x = 1
[out]
MypyFile:1(
  Import:1(_m : _m)
  ExpressionStmt:2(
    MemberExpr:2(
      NameExpr(_m)
      x [_m.x])))

[case testNestedModules]
import m.n
m.n.x, m.y
[file m/__init__.py]
y = 1
[file m/n.py]
x = 1
[out]
MypyFile:1(
  Import:1(m.n : m.n)
  ExpressionStmt:2(
    TupleExpr:2(
      MemberExpr:2(
        MemberExpr:2(
          NameExpr(m)
          n [m.n])
        x [m.n.x])
      MemberExpr:2(
        NameExpr(m)
        y [m.y]))))
MypyFile:1(
  tmp/m/n.py
  AssignmentStmt:1(
    NameExpr(x* [m.n.x])
    IntExpr(1)))

[case testImportFromSubmodule]
from m._n import x
x
[file m/__init__.py]
[file m/_n.py]
x = 1
[out]
MypyFile:1(
  ImportFrom:1(m._n, [x : x])
  ExpressionStmt:2(
    NameExpr(x [m._n.x])))

[case testImportAllFromSubmodule]
from m._n import *
x, y
[file m/__init__.py]
[file m/_n.py]
x = y = 1
[out]
MypyFile:1(
  ImportAll:1(m._n)
  ExpressionStmt:2(
    TupleExpr:2(
      NameExpr(x [m._n.x])
      NameExpr(y [m._n.y]))))

[case testSubmodulesAndTypes]
from typing import Undefined
import m._n
x = Undefined # type: m._n.c
[file m/__init__.py]
[file m/_n.py]
class c: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  Import:2(m._n : m._n)
  AssignmentStmt:3(
    NameExpr(x [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    m._n.c))

[case testSubmodulesAndTypes]
from typing import Undefined
from m._n import c
x = Undefined # type: c
[file m/__init__.py]
[file m/_n.py]
class c: pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  ImportFrom:2(m._n, [c : c])
  AssignmentStmt:3(
    NameExpr(x [__main__.x])
    NameExpr(Undefined [typing.Undefined])
    m._n.c))

[case testFromPackageImportModule]
from m import _n
_n.x
[file m/__init__.py]
[file m/_n.py]
x = 1
[out]
MypyFile:1(
  ImportFrom:1(m, [_n : _n])
  ExpressionStmt:2(
    MemberExpr:2(
      NameExpr(_n [m._n])
      x [m._n.x])))

[case testDeeplyNestedModule]
import m.n.k
m.n.k.x
m.n.b
m.a
[file m/__init__.py]
a = 1
[file m/n/__init__.py]
b = 1
[file m/n/k.py]
x = 1
[out]
MypyFile:1(
  Import:1(m.n.k : m.n.k)
  ExpressionStmt:2(
    MemberExpr:2(
      MemberExpr:2(
        MemberExpr:2(
          NameExpr(m)
          n [m.n])
        k [m.n.k])
      x [m.n.k.x]))
  ExpressionStmt:3(
    MemberExpr:3(
      MemberExpr:3(
        NameExpr(m)
        n [m.n])
      b [m.n.b]))
  ExpressionStmt:4(
    MemberExpr:4(
      NameExpr(m)
      a [m.a])))
MypyFile:1(
  tmp/m/n/k.py
  AssignmentStmt:1(
    NameExpr(x* [m.n.k.x])
    IntExpr(1)))

[case testImportInSubmodule]
import m._n
y = m._n.x
[file m/__init__.py]
[file m/_n.py]
from m._k import x
[file m/_k.py]
x = 1
[out]
MypyFile:1(
  Import:1(m._n : m._n)
  AssignmentStmt:2(
    NameExpr(y* [__main__.y])
    MemberExpr:2(
      MemberExpr:2(
        NameExpr(m)
        _n [m._n])
      x [m._k.x])))

[case testBuiltinsUsingModule]
from typing import Undefined
o = Undefined # type: __builtins__.object
[out]
MypyFile:1(
  ImportFrom:1(typing, [Undefined : Undefined])
  AssignmentStmt:2(
    NameExpr(o [__main__.o])
    NameExpr(Undefined [typing.Undefined])
    builtins.object))

[case testImplicitAccessToBuiltins]
object
[out]
MypyFile:1(
  ExpressionStmt:1(
    NameExpr(object [builtins.object])))

[case testAssignmentToModuleAttribute]
import _m
_m.x = (
  _m.x)
[file _m.py]
x = None
[out]
MypyFile:1(
  Import:1(_m : _m)
  AssignmentStmt:2(
    MemberExpr:2(
      NameExpr(_m)
      x [_m.x])
    ParenExpr:2(
      MemberExpr:3(
        NameExpr(_m)
        x [_m.x]))))

[case testAssignmentThatRefersToModule]
import _m
_m.x[None] = None
[file _m.py]
x = None
[out]
MypyFile:1(
  Import:1(_m : _m)
  AssignmentStmt:2(
    IndexExpr:2(
      MemberExpr:2(
        NameExpr(_m)
        x [_m.x])
      NameExpr(None [builtins.None]))
    NameExpr(None [builtins.None])))

[case testImportInBlock]
if 1:
    import _x
    _x.y
[file _x.py]
y = 1
[out]
MypyFile:1(
  IfStmt:1(
    If(
      IntExpr(1))
    Then(
      Import:2(_x : _x)
      ExpressionStmt:3(
        MemberExpr:3(
          NameExpr(_x)
          y [_x.y])))))

[case testImportInFunction]
def f() -> None:
    import _x
    _x.y
[file _x.py]
y = 1
[out]
MypyFile:1(
  FuncDef:1(
    f
    def ()
    Block:1(
      Import:2(_x : _x)
      ExpressionStmt:3(
        MemberExpr:3(
          NameExpr(_x)
          y [_x.y])))))

[case testImportInClassBody]
class A:
    from _x import y
    z = y
[file _x.py]
y = 1
[out]
MypyFile:1(
  ClassDef:1(
    A
    ImportFrom:2(_x, [y : y])
    AssignmentStmt:3(
      NameExpr(z* [m])
      NameExpr(y [_x.y]))))

[case testImportInClassBody2]
class A:
    import _x
    z = _x.y
[file _x.py]
y = 1
[out]
MypyFile:1(
  ClassDef:1(
    A
    Import:2(_x : _x)
    AssignmentStmt:3(
      NameExpr(z* [m])
      MemberExpr:3(
        NameExpr(_x)
        y [_x.y]))))

[case testImportModuleTwice]
def f() -> None:
    import x
    import x
    x.y
[file x.py]
y = 1
[out]
MypyFile:1(
  FuncDef:1(
    f
    def ()
    Block:1(
      Import:2(x : x)
      Import:3(x : x)
      ExpressionStmt:4(
        MemberExpr:4(
          NameExpr(x)
          y [x.y])))))
MypyFile:1(
  tmp/x.py
  AssignmentStmt:1(
    NameExpr(y* [x.y])
    IntExpr(1)))

[case testRelativeImport0]
import m.x
m.x.z.y
[file m/__init__.py]
[file m/x.py]
from . import z
[file m/z.py]
y = 1
[out]
MypyFile:1(
  Import:1(m.x : m.x)
  ExpressionStmt:2(
    MemberExpr:2(
      MemberExpr:2(
        MemberExpr:2(
          NameExpr(m)
          x [m.x])
        z [m.z])
      y [m.z.y])))
MypyFile:1(
  tmp/m/x.py
  ImportFrom:1(., [z : z]))
MypyFile:1(
  tmp/m/z.py
  AssignmentStmt:1(
    NameExpr(y* [m.z.y])
    IntExpr(1)))

[case testRelativeImport1]
import m.t.b as b
b.x.y
b.z.y
[file m/__init__.py]
[file m/x.py]
y = 1
[file m/z.py]
y = 3
[file m/t/__init__.py]
[file m/t/b.py]
from .. import x, z
[out]
MypyFile:1(
  Import:1(m.t.b : b)
  ExpressionStmt:2(
    MemberExpr:2(
      MemberExpr:2(
        NameExpr(b [m.t.b])
        x [m.x])
      y [m.x.y]))
  ExpressionStmt:3(
    MemberExpr:3(
      MemberExpr:3(
        NameExpr(b [m.t.b])
        z [m.z])
      y [m.z.y])))
MypyFile:1(
  tmp/m/t/b.py
  ImportFrom:1(.., [x : x, z : z]))
MypyFile:1(
  tmp/m/x.py
  AssignmentStmt:1(
    NameExpr(y* [m.x.y])
    IntExpr(1)))
MypyFile:1(
  tmp/m/z.py
  AssignmentStmt:1(
    NameExpr(y* [m.z.y])
    IntExpr(3)))

[case testRelativeImport2]
import m.t.b as b
b.xy
b.zy
[file m/__init__.py]
[file m/x.py]
y = 1
[file m/z.py]
y = 3
[file m/t/__init__.py]
[file m/t/b.py]
from ..x import y as xy
from ..z import y as zy
[out]
MypyFile:1(
  Import:1(m.t.b : b)
  ExpressionStmt:2(
    MemberExpr:2(
      NameExpr(b [m.t.b])
      xy [m.x.y]))
  ExpressionStmt:3(
    MemberExpr:3(
      NameExpr(b [m.t.b])
      zy [m.z.y])))
MypyFile:1(
  tmp/m/t/b.py
  ImportFrom:1(..x, [y : xy])
  ImportFrom:2(..z, [y : zy]))
MypyFile:1(
  tmp/m/x.py
  AssignmentStmt:1(
    NameExpr(y* [m.x.y])
    IntExpr(1)))
MypyFile:1(
  tmp/m/z.py
  AssignmentStmt:1(
    NameExpr(y* [m.z.y])
    IntExpr(3)))
    