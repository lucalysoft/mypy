-- Normal assignment and subtyping
-- -------------------------------


[case testAssignmentWithTupleTypes]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A]
t2 = Undefined # type: Tuple[B]
t3 = Undefined # type: Tuple[A, A]
t4 = Undefined # type: Tuple[A, B]
t5 = Undefined # type: Tuple[B, A]

t1 = t2 # E: Incompatible types in assignment (expression has type "Tuple[B]", variable has type "Tuple[A]")
t1 = t3 # E: Incompatible types in assignment (expression has type "Tuple[A, A]", variable has type "Tuple[A]")
t3 = t1 # E: Incompatible types in assignment (expression has type "Tuple[A]", variable has type "Tuple[A, A]")
t3 = t4 # E: Incompatible types in assignment (expression has type "Tuple[A, B]", variable has type "Tuple[A, A]")
t3 = t5 # E: Incompatible types in assignment (expression has type "Tuple[B, A]", variable has type "Tuple[A, A]")

# Ok
t1 = t1
t2 = t2
t3 = t3
t4 = t4
t5 = t5

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testTupleSubtyping]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A, A]
t2 = Undefined # type: Tuple[A, B]
t3 = Undefined # type: Tuple[B, A]

t2 = t1  # E: Incompatible types in assignment (expression has type "Tuple[A, A]", variable has type "Tuple[A, B]")
t2 = t3  # E: Incompatible types in assignment (expression has type "Tuple[B, A]", variable has type "Tuple[A, B]")
t3 = t1  # E: Incompatible types in assignment (expression has type "Tuple[A, A]", variable has type "Tuple[B, A]")
t3 = t2  # E: Incompatible types in assignment (expression has type "Tuple[A, B]", variable has type "Tuple[B, A]")

t1 = t2
t1 = t3

class A: pass
class B(A): pass
[builtins fixtures/tuple.py]

[case testTupleCompatibilityWithOtherTypes]
from typing import Undefined, Tuple
a, o = Undefined, Undefined # type: (A, object)
t = Undefined # type: Tuple[A, A]

a = t # E: Incompatible types in assignment (expression has type "Tuple[A, A]", variable has type "A")
t = o # E: Incompatible types in assignment (expression has type "object", variable has type "Tuple[A, A]")
t = a # E: Incompatible types in assignment (expression has type "A", variable has type "Tuple[A, A]")
# TODO: callable types + tuples

# Ok
o = t
t = None

class A: pass
[builtins fixtures/tuple.py]

[case testNestedTupleTypes]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A, Tuple[A, A]]
t2 = Undefined # type: Tuple[B, Tuple[B, B]]

t2 = t1 # E: Incompatible types in assignment (expression has type "Tuple[A, Tuple[A, A]]", variable has type "Tuple[B, Tuple[B, B]]")
t1 = t2

class A: pass
class B(A): pass
[builtins fixtures/tuple.py]

[case testNestedTupleTypes2]
from typing import Undefined, Tuple
t1 = Undefined # type: (A, (A, A))
t2 = Undefined # type: B, (B, B)

t2 = t1 # E: Incompatible types in assignment (expression has type "Tuple[A, Tuple[A, A]]", variable has type "Tuple[B, Tuple[B, B]]")
t1 = t2

class A: pass
class B(A): pass
[builtins fixtures/tuple.py]

[case testSubtypingWithNamedTupleType]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A, A]
t2 = Undefined # type: tuple

t1 = t2 # E: Incompatible types in assignment (expression has type "tuple", variable has type "Tuple[A, A]")
t2 = t1

class A: pass
[builtins fixtures/tuple.py]

[case testTupleInitializationWithNone]
from typing import Tuple
t = None # type: Tuple[A, A]
t = None
class A: pass
[builtins fixtures/tuple.py]


-- Tuple expressions
-- -----------------


[case testTupleExpressions]
from typing import Undefined, Tuple
t1 = Undefined # type: tuple
t2 = Undefined # type: Tuple[A]
t3 = Undefined # type: Tuple[A, B]

a, b, c = Undefined, Undefined, Undefined # type: (A, B, C)

t2 = ()        # E: Incompatible types in assignment (expression has type "Tuple[]", variable has type "Tuple[A]")
t2 = (a, a)    # E: Incompatible types in assignment (expression has type "Tuple[A, A]", variable has type "Tuple[A]")
t3 = (a, a)    # E: Incompatible types in assignment (expression has type "Tuple[A, A]", variable has type "Tuple[A, B]")
t3 = (b, b)    # E: Incompatible types in assignment (expression has type "Tuple[B, B]", variable has type "Tuple[A, B]")
t3 = (a, b, a) # E: Incompatible types in assignment (expression has type "Tuple[A, B, A]", variable has type "Tuple[A, B]")

t1 = ()
t1 = (a,)
t2 = (a,)
t3 = (a, b)
t3 = (a, c)
t3 = (None, None)

class A: pass
class B: pass
class C(B): pass
[builtins fixtures/tuple.py]

[case testVoidValueInTuple]
import typing
(None, f()) # E: "f" does not return a value
(f(), None) # E: "f" does not return a value

def f() -> None: pass
[builtins fixtures/tuple.py]


-- Indexing
-- --------


[case testIndexingTuples]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A, B]
t2 = Undefined # type: Tuple[A]
a, b = Undefined, Undefined # type: (A, B)
n = 0

a = t1[1] # E: Incompatible types in assignment (expression has type "B", variable has type "A")
b = t1[0] # E: Incompatible types in assignment (expression has type "A", variable has type "B")
t1[2]     # E: Tuple index out of range
t1[3]     # E: Tuple index out of range
t2[1]     # E: Tuple index out of range
t1[n]     # E: Tuple index must an integer literal
b = t1[(0)] # E: Incompatible types in assignment (expression has type "A", variable has type "B")

a = t1[0]
b = t1[1]
a = t1[(0)]

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testIndexingTuplesWithNegativeIntegers]
from typing import Undefined, Tuple
t1 = Undefined(Tuple[A, B])
t2 = Undefined(Tuple[A])
a, b = Undefined(A), Undefined(B)

a = t1[-1] # E: Incompatible types in assignment (expression has type "B", variable has type "A")
b = t1[-2] # E: Incompatible types in assignment (expression has type "A", variable has type "B")
t1[-3]     # E: Tuple index out of range
t1[-4]     # E: Tuple index out of range
b = t2[(-1)] # E: Incompatible types in assignment (expression has type "A", variable has type "B")

a = t1[-2]
b = t1[-1]
a = t2[(-1)]

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testAssigningToTupleItems]
from typing import Undefined, Tuple
t = Undefined # type: Tuple[A, B]
n = 0

t[0] = A() # E: Unsupported target for indexed assignment
t[2] = A() # E: Unsupported target for indexed assignment
t[n] = A() # E: Unsupported target for indexed assignment

class A: pass
class B: pass
[builtins fixtures/tuple.py]


-- Multiple assignment
-- -------------------


[case testMultipleAssignmentWithTuples]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A, B]
t2 = Undefined # type: Tuple[A, B, A]
a, b = Undefined, Undefined # type: (A, B)

a, a = t1 # E: Incompatible types in assignment (expression has type "B", variable has type "A")
b, b = t1 # E: Incompatible types in assignment (expression has type "A", variable has type "B")
a, b, b = t2 # E: Incompatible types in assignment (expression has type "A", variable has type "B")

a, b = t1
a, b, a = t2

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testMultipleAssignmentWithInvalidNumberOfValues]
from typing import Undefined, Tuple
t1 = Undefined # type: Tuple[A, A, A]
a = Undefined # type: A

a, a = t1       # E: Too many values to unpack (2 expected, 3 provided)
a, a, a, a = t1 # E: Need more than 3 values to unpack (4 expected)

a, a, a = t1

class A: pass
[builtins fixtures/tuple.py]

[case testMultipleAssignmentWithTupleExpressionRvalue]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)

a, b = a, a # Fail
a, b = b, a # Fail

a, b = a, b
a, a = a, a

class A: pass
class B: pass
[builtins fixtures/tuple.py]
[out]
main, line 4: Incompatible types in assignment (expression has type "A", variable has type "B")
main, line 5: Incompatible types in assignment (expression has type "B", variable has type "A")
main, line 5: Incompatible types in assignment (expression has type "A", variable has type "B")

[case testSubtypingInMultipleAssignment]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)

b, b = a, b # E: Incompatible types in assignment (expression has type "A", variable has type "B")
b, b = b, a # E: Incompatible types in assignment (expression has type "A", variable has type "B")

a, b = b, b
b, a = b, b

class A: pass
class B(A): pass
[builtins fixtures/tuple.py]

[case testInitializationWithMultipleValues]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)

a1, b1 = a, a # type: (A, B)  # E: Incompatible types in assignment (expression has type "A", variable has type "B")
a2, b2 = b, b # type: (A, B)  # E: Incompatible types in assignment (expression has type "B", variable has type "A")
a3, b3 = a # type: (A, B)     # E: '__main__.A' object is not iterable
a4, b4 = None # type: (A, B)  # E: ''None'' object is not iterable
a5, b5 = a, b, a # type: (A, B)  # E: Too many values to unpack (2 expected, 3 provided)

ax, bx = a, b # type: (A, B)

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testMultipleAssignmentWithNonTupleRvalue]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
def f(): pass

a, b = None # E: ''None'' object is not iterable
a, b = a   # E: '__main__.A' object is not iterable
a, b = f   # E: 'def () -> Any' object is not iterable

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testMultipleAssignmentWithIndexedLvalues]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
aa, bb = Undefined, Undefined # type: (AA, BB)

a[a], b[b] = a, bb   # E: Incompatible types in assignment
a[a], b[b] = aa, b   # E: Incompatible types in assignment
a[aa], b[b] = aa, bb # E: Invalid index type "AA" for "A"
a[a], b[bb] = aa, bb # E: Invalid index type "BB" for "B"
a[a], b[b] = aa, bb

class A:
    def __setitem__(self, x: 'A', y: 'AA') -> None: pass
class B:
    def __setitem__(self, x: 'B', y: 'BB') -> None: pass

class AA: pass
class BB: pass
[builtins fixtures/tuple.py]

[case testMultipleDeclarationWithParentheses]
from typing import Undefined
(a, b) = (None, None) # type: int, str
a = '' # E: Incompatible types in assignment (expression has type "str", variable has type "int")
b = 1  # E: Incompatible types in assignment (expression has type "int", variable has type "str")
a = 1
b = ''

[case testMultipleAssignmentWithExtraParentheses]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)

(a, b) = (a, a) # E: Incompatible types in assignment (expression has type "A", variable has type "B")
(a, b) = (b, b) # E: Incompatible types in assignment (expression has type "B", variable has type "A")
((a), (b)) = ((a), (a))  # E: Incompatible types in assignment (expression has type "A", variable has type "B")
((a), (b)) = ((b), (b))  # E: Incompatible types in assignment (expression has type "B", variable has type "A")
[a, b] = a, a  # E: Incompatible types in assignment (expression has type "A", variable has type "B")
[a, b] = b, b  # E: Incompatible types in assignment (expression has type "B", variable has type "A")

(a, b) = (a, b)
((a), (b)) = ((a), (b))
[a, b] = a, b

class A: pass
class B: pass
[builtins fixtures/tuple.py]

[case testMultipleAssignmentUsingUndefinedWithArgument]
from typing import Undefined, Tuple
a, b = Undefined(Tuple[int, str])
a = 1
b = ''
a = '' # E: Incompatible types in assignment (expression has type "str", variable has type "int")
b = 1  # E: Incompatible types in assignment (expression has type "int", variable has type "str")

[case testMultipleAssignmentUsingRepeatedUndefinedWithArgument]
from typing import Undefined
a, b = Undefined(int), Undefined(str)
a = 1
b = ''
a = '' # E: Incompatible types in assignment (expression has type "str", variable has type "int")
b = 1  # E: Incompatible types in assignment (expression has type "int", variable has type "str")

[case testMultipleAssignmentUsingUndefinedWithArgumentAndNormalExpression]
from typing import Undefined
a, b = Undefined(int), ''
a = 1
b = ''
a = '' # E: Incompatible types in assignment (expression has type "str", variable has type "int")
b = 1  # E: Incompatible types in assignment (expression has type "int", variable has type "str")


-- Assignment to starred expressions
-- ---------------------------------


[case testAssignmentToStarCount1]
from typing import Undefined, List
ca = Undefined  # type: List[int]
a, b, *c = 1,  # E: Need more than 1 value to unpack (2 expected)
a, b, *c = 1, 2  # E: Need type annotation for variable
a, b, *ca = 1, 2
a, b, *c = 1, 2, 3
a, b, *c = 1, 2, 3, 4
[builtins fixtures/list.py]

[case testAssignmentToStarCount2]
from typing import Undefined, List
ca = Undefined  # type: List[int]
t1 = 1,
t2 = 1, 2
t3 = 1, 2, 3
t4 = 1, 2, 3, 4
a, b, *c = t1  # E: Need more than 1 value to unpack (2 expected)
a, b, *c = t2  # E: Need type annotation for variable
a, b, *ca = t2
a, b, *c = t3
a, b, *c = t4
[builtins fixtures/list.py]

[case testAssignmentToStarFromAny]
from typing import Undefined, Any
a, c = Any(1), C()
p, *q = a
c = a
c = q

class C: pass

[case testAssignmentToComplexStar]
from typing import Undefined, List
li = Undefined  # type: List[int]
a, *(li) = 1,
a, *(b, c) = 1, 2  # E: Need more than 1 value to unpack (2 expected)
a, *(b, c) = 1, 2, 3
a, *(b, c) = 1, 2, 3, 4  # E: Too many values to unpack (2 expected, 3 provided)
[builtins fixtures/list.py]

[case testAssignmentToStarFromTupleType]
from typing import Undefined, List, Tuple
li = Undefined  # type: List[int]
la = Undefined  # type: List[A]
ta = Undefined  # type: Tuple[A, A, A]
a, *la = ta
a, *li = ta  # E
a, *na = ta
na = la
na = a  # E

class A: pass
[builtins fixtures/list.py]
[out]
main, line 6: List item 1 has incompatible type "A"
main, line 6: List item 2 has incompatible type "A"
main, line 9: Incompatible types in assignment (expression has type "A", variable has type List[A])

[case testAssignmentToStarFromTupleInference]
from typing import Undefined, List
li = Undefined  # type: List[int]
la = Undefined  # type: List[A]
a, *l = A(), A()
l = li  # E: Incompatible types in assignment (expression has type List[int], variable has type List[A])
l = la

class A: pass
[builtins fixtures/list.py]
[out]

[case testAssignmentToStarFromListInference]
from typing import Undefined, List
li = Undefined  # type: List[int]
la = Undefined  # type: List[A]
a, *l = [A(), A()]
l = li  # E: Incompatible types in assignment (expression has type List[int], variable has type List[A])
l = la

class A: pass
[builtins fixtures/list.py]
[out]

[case testAssignmentToStarFromTupleTypeInference]
from typing import Undefined, List, Tuple
li = Undefined  # type: List[int]
la = Undefined  # type: List[A]
ta = Undefined  # type: Tuple[A, A, A]
a, *l = ta
l = li  # E: Incompatible types in assignment (expression has type List[int], variable has type List[A])
l = la

class A: pass
[builtins fixtures/list.py]
[out]

[case testAssignmentToStarFromListTypeInference]
from typing import Undefined, List
li = Undefined  # type: List[int]
la = Undefined  # type: List[A]
a, *l = la
l = li  # E: Incompatible types in assignment (expression has type List[int], variable has type List[A])
l = la

class A: pass
[builtins fixtures/list.py]
[out]


-- Nested tuple assignment
-- ----------------------------


[case testNestedTupleAssignment1]
from typing import Undefined
a1, b1, c1 = Undefined, Undefined, Undefined # type: (A, B, C)
a2, b2, c2 = Undefined, Undefined, Undefined # type: (A, B, C)

a1, (b1, c1) = a2, (b2, c2)
a1, (a1, (b1, c1)) = a2, (a2, (b2, c2))
a1, (a1, (a1, b1)) = a1, (a1, (a1, c1))  # Fail

class A: pass
class B: pass
class C: pass
[out]
main, line 7: Incompatible types in assignment (expression has type "C", variable has type "B")

[case testNestedTupleAssignment2]
from typing import Undefined
a1, b1, c1 = Undefined, Undefined, Undefined # type: (A, B, C)
a2, b2, c2 = Undefined, Undefined, Undefined # type: (A, B, C)
t = a1, b1

a2, b2 = t
(a2, b2), c2 = t, c1
(a2, c2), c2 = t, c1  # Fail
t, c2 = (a2, b2), c2
t, c2 = (a2, a2), c2  # Fail
t = a1, a1, a1  # Fail
t = a1  # Fail
a2, a2, a2 = t  # Fail
a2, = t  # Fail
a2 = t  # Fail

class A: pass
class B: pass
class C: pass
[out]
main, line 8: Incompatible types in assignment (expression has type "B", variable has type "C")
main, line 10: Incompatible types in assignment (expression has type "Tuple[A, A]", variable has type "Tuple[A, B]")
main, line 11: Incompatible types in assignment (expression has type "Tuple[A, A, A]", variable has type "Tuple[A, B]")
main, line 12: Incompatible types in assignment (expression has type "A", variable has type "Tuple[A, B]")
main, line 13: Need more than 2 values to unpack (3 expected)
main, line 14: Too many values to unpack (1 expected, 2 provided)
main, line 15: Incompatible types in assignment (expression has type "Tuple[A, B]", variable has type "A")


-- Error messages
-- --------------


[case testTupleErrorMessages]
from typing import Undefined
a = Undefined # type: A

(a, a) + a  # E: Unsupported left operand type for + ("tuple")
a + (a, a)  # E: Unsupported operand types for + ("A" and "Tuple[A, A]")
f((a, a))   # E: Argument 1 to "f" has incompatible type "Tuple[A, A]"; expected "A"
(a, a).foo  # E: "tuple" has no attribute "foo"

def f(x: 'A') -> None: pass

class A:
    def __add__(self, x: 'A') -> 'A': pass
[builtins fixtures/tuple.py]

[case testLargeTuplesInErrorMessages]
from typing import Undefined
a = Undefined # type: LongTypeName
a + (a, a, a, a, a, a, a) # Fail

class LongTypeName:
    def __add__(self, x: 'LongTypeName') -> 'LongTypeName': pass
[builtins fixtures/tuple.py]
[out]
main, line 3: Unsupported operand types for + ("LongTypeName" and tuple(length 7))


-- Tuple methods
-- -------------


[case testTupleMethods]
from typing import Undefined, Tuple
t = Undefined # type: Tuple[int, str]
i = 0
s = ''
b = bool()

s = t.__len__()  # E: Incompatible types in assignment (expression has type "int", variable has type "str")
i = t.__str__()  # E: Incompatible types in assignment (expression has type "str", variable has type "int")
i = s in t       # E: Incompatible types in assignment (expression has type "bool", variable has type "int")
t.foo            # E: "tuple" has no attribute "foo"

i = t.__len__()
s = t.__str__()
b = s in t

[file builtins.py]
class object:
    def __init__(self) -> None: pass
class tuple:
    def __len__(self) -> int: pass
    def __str__(self) -> str: pass
    def __contains__(self, o: object) -> bool: pass
class int: pass
class str: pass
class bool: pass
class type: pass
class function: pass


-- For loop over tuple
-- -------------------


[case testForLoopOverTuple]
import typing
t = 1, 2
for x in t:
    x = 1
    x = '' # E: Incompatible types in assignment (expression has type "str", variable has type "int")
[builtins fixtures/for.py]

[case testForLoopOverEmptyTuple]
import typing
t = ()
for x in t: pass # E: Need type annotation for variable
[builtins fixtures/for.py]

[case testForLoopOverNoneValuedTuple]
import typing
t = ()
for x in None, None: pass # E: Need type annotation for variable
[builtins fixtures/for.py]

[case testForLoopOverTupleAndSubtyping]
import typing
class A: pass
class B(A): pass
for x in B(), A():
    x = A()
    x = B()
    x = '' # E: Incompatible types in assignment (expression has type "str", variable has type "A")
[builtins fixtures/for.py]

[case testTupleIterable]
y = 'a'
x = sum((1,2))
y = x # E: Incompatible types in assignment (expression has type "int", variable has type "str")
[builtins fixtures/tuple.py]
