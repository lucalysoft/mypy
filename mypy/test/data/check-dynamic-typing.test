

-- Assignment
-- ----------


[case testAssignmentWithDynamic]
from typing import Undefined, Any
d = Undefined # type: Any
a = Undefined # type: A

a = d # Everything ok
d = a
d = d
d.x = a
d.x = d

class A: pass

[case testMultipleAssignmentWithDynamic]
from typing import Undefined, Any
d = Undefined # type: Any
a, b = Undefined, Undefined # type: (A, B)

d, a = b, b    # E: Incompatible types in assignment
d, d = d, d, d # E: Too many values to assign

a, b = d, d
d, d = a, b
a, b = d
s, t = d

class A: pass
class B: pass


-- Expressions
-- -----------


[case testCallingFunctionWithDynamicArgumentTypes]
from typing import Undefined, Any
a, b = Undefined, Undefined # type: (A, B)

b = f(a) # E: Incompatible types in assignment

a = f(a)
a = f(b)
a = f(None)
a = f(f)

def f(x: Any) -> 'A':
    pass

class A: pass
class B: pass

[case testCallingWithDynamicReturnType]
from typing import Undefined, Any
a, b = Undefined, Undefined # type: (A, B)

a = f(b) # E: Argument 1 to "f" has incompatible type "B"

a = f(a)
b = f(a)

def f(x: 'A') -> Any:
    pass

class A: pass
class B: pass

[case testBinaryOperationsWithDynamicLeftOperand]
from typing import Undefined, Any
d = Undefined # type: Any
a = Undefined # type: A
c = Undefined # type: C
b = Undefined # type: bool
n = 0

d in a  # E: Unsupported right operand type for in ("A")
d and a
d or a
c = d and b # Unintuitive type inference?
c = d or b  # Unintuitive type inference?

c = d + a
c = d - a
c = d * a
c = d / a
c = d // a
c = d % a
c = d ** a
b = d == a
b = d != a
b = d < a
b = d <= a
b = d > a
b = d >= a
b = d in c
b = d and b
b = d or b

class A: pass
class C:
    def __contains__(self, a: A) -> bool:
        pass
[file builtins.py]
class object:
  def __init__(self): pass
class bool: pass
class int: pass
class type: pass

[case testBinaryOperationsWithDynamicAsRightOperand]
from typing import Undefined, Any
d = Undefined # type: Any
a = Undefined # type: A
c = Undefined # type: C
b = Undefined # type: bool
n = 0

a and d
a or d
c = a in d
c = b and d # Unintuitive type inference?
c = b or d  # Unintuitive type inference?
b = a + d
b = a / d

c = a + d
c = a - d
c = a * d
c = a / d
c = a // d
c = a % d
c = a ** d
b = a in d
b = b and d
b = b or d

class A:
    def __add__(self, a: 'A') -> 'C':
        pass
    def __sub__(self, a: 'A') -> 'C':
        pass
    def __mul__(self, a: 'A') -> 'C':
        pass
    def __truediv__(self, a: 'A') -> 'C':
        pass
    def __floordiv__(self, a: 'A') -> 'C':
        pass
    def __mod__(self, a: 'A') -> 'C':
        pass
    def __pow__(self, a: 'A') -> 'C':
        pass
    def _lt(self, a: 'A') -> bool:
        pass
    def _gt(self, a: 'A') -> bool:
        pass

class C: pass
[file builtins.py]
class object:
  def __init__(self): pass
class bool: pass
class int: pass
class type: pass

[case testDynamicWithUnaryExpressions]
from typing import Undefined, Any
d = Undefined # type: Any
a = Undefined # type: A
b = Undefined # type: bool
a = not d # E: Incompatible types in assignment
b = not d
a = -d
class A: pass
[builtins fixtures/bool.py]
[out]

[case testDynamicWithMemberAccess]
from typing import Undefined, Any
d = Undefined # type: Any
a = Undefined # type: A

a = d.foo(a()) # E: "A" not callable

a = d.x
a = d.foo(a, a)
d.x = a
d.x.y.z

class A: pass
[out]

[case testIndexingWithDynamic]
from typing import Undefined, Any
d = Undefined # type: Any
a = Undefined # type: A

a = d[a()] # E: "A" not callable
d[a()] = a # E: "A" not callable

a = d[a]
d[a] = a
d[a], d[a] = a, a

class A: pass

[case testTupleExpressionsWithDynamci]
from typing import Undefined, Tuple, Any
t2 = Undefined # type: Tuple[A, A]
d = Undefined # type: Any

t2 = (d, d, d)  # E: Incompatible types in assignment
t2 = (d, d)

class A: pass
[builtins fixtures/tuple.py]

[case testCastsWithDynamicType]
from typing import Undefined, Any, cast
class A: pass
class B: pass
d = Undefined # type: Any
a = Undefined # type: A
b = Undefined # type: B
b = cast(A, d) # E: Incompatible types in assignment
a = cast(A, d)
b = Any(d)
a = Any(f())
def f() -> None: pass

[case testCompatibilityOfDynamicWithOtherTypes]
from typing import Undefined, Any, Tuple
d = Undefined # type: Any
t = Undefined # type: Tuple[A, A]
# TODO: callable types, overloaded functions

d = None # All ok
d = t
d = g
d = A
t = d
f = d

def g(a: 'A') -> None:
    pass

class A: pass
class B: pass
[builtins fixtures/tuple.py]


-- Statements
-- ----------


[case testDynamicCondition]
from typing import Undefined, Any
d = Undefined # type: Any
while d:
    pass
if d:
    pass
elif d:
    pass
[builtins fixtures/bool.py]

[case testRaiseWithDynamic]
from typing import Undefined, Any
d = Undefined # type: Any
raise d
[builtins fixtures/exception.py]

[case testReturnWithDynamic]
from typing import Undefined, Any
d = Undefined # type: Any

def f() -> None:
    return d # Ok

def g() -> 'A':
    return d # Ok

class A: pass


-- Implicit dynamic types for functions
-- ------------------------------------


[case testImplicitGlobalFunctionSignature]
from typing import Undefined, Any, Function
x = Undefined # type: Any
a = Undefined # type: A
g = Undefined # type: Function[[], None]
h = Undefined # type: Function[[A], None]

f()     # E: Too few arguments for "f"
f(x, x) # E: Too many arguments for "f"
g = f   # E: Incompatible types in assignment
f(a)
f(x)
a = f(a)
h = f

def f(x): pass

class A: pass

[case testImplicitGlobalFunctionSignatureWithDifferentArgCounts]
from typing import Undefined, Function
g0 = Undefined # type: Function[[], None]
g1 = Undefined # type: Function[[A], None]
g2 = Undefined # type: Function[[A, A], None]
a = Undefined # type: A

g1 = f0 # E: Incompatible types in assignment
g2 = f0 # E: Incompatible types in assignment
g0 = f2 # E: Incompatible types in assignment
g1 = f2 # E: Incompatible types in assignment

g0 = g0
g2 = f2
f0()
f2(a, a)

def f0(): pass

def f2(x, y): pass

class A: pass

[case testImplicitGlobalFunctionSignatureWithDefaultArgs]
from typing import Undefined, Function
a, b = Undefined, Undefined # type: (A, B)

g0 = Undefined # type: Function[[], None]
g1 = Undefined # type: Function[[A], None]
g2 = Undefined # type: Function[[A, A], None]
g3 = Undefined # type: Function[[A, A, A], None]
g4 = Undefined # type: Function[[A, A, A, A], None]

f01(a, a)       # Fail
f13()           # Fail
f13(a, a, a, a) # Fail
g2 = f01 # Fail
g0 = f13 # Fail
g4 = f13 # Fail

f01()
f01(a)
f13(a)
f13(a, a)
f13(a, a, a)

g0 = f01
g1 = f01
g1 = f13
g2 = f13
g3 = f13

def f01(x = b): pass
def f13(x, y = b, z = b): pass

class A: pass
class B: pass
[out]
main, line 10: Too many arguments for "f01"
main, line 11: Too few arguments for "f13"
main, line 12: Too many arguments for "f13"
main, line 13: Incompatible types in assignment
main, line 14: Incompatible types in assignment
main, line 15: Incompatible types in assignment

[case testSkipTypeCheckingWithImplicitSignature]
from typing import Undefined
a = Undefined # type: A
def f():
    a()
def g(x):
    a()
    a.x
    a + a
    if a():
        a()
class A: pass
[builtins fixtures/bool.py]

[case testSkipTypeCheckingWithImplicitSignatureAndDefaultArgs]
from typing import Undefined
a = Undefined # type: A
def f(x=a()):
    a()
def g(x, y=a, z=a()):
    a()
class A: pass

[case testImplicitMethodSignature]
from typing import Undefined, Function
g0 = Undefined # type: Function[[], None]
g1 = Undefined # type: Function[[A], None]
g2 = Undefined # type: Function[[A, A], None]
a = Undefined # type: A

g0 = a.f # E: Incompatible types in assignment
g2 = a.f # E: Incompatible types in assignment
a = a.f  # E: Incompatible types in assignment

class A:
    def g(self) -> None:
        a = self.f(a)
    def f(self, x): pass

g1 = a.f
a = a.f(a)

[case testSkipTypeCheckingImplicitMethod]
from typing import Undefined
a = Undefined # type: A
class A:
    def f(self):
        a()
    def g(self, x, y=a()):
        a()

[case testImplicitInheritedMethod]
from typing import Undefined, Function
g0 = Undefined # type: Function[[], None]
g1 = Undefined # type: Function[[A], None]
a = Undefined # type: A

g0 = a.f # E: Incompatible types in assignment

g1 = a.f
a = a.f(a)

class B:
    def f(self, x):
        pass
class A(B):
    def g(self) -> None:
        a = self.f(a)

[case testEmptyReturnWithImplicitSignature]
import typing
def f():
    return 
class A:
    def g(self):
        return 
        
[case testVarArgsWithImplicitSignature]
from typing import Undefined, Any
o = Undefined # type: Any
def f(x, *a): pass
f() # E: Too few arguments for "f"
f(o)
f(o, o)
f(o, o, o)
[builtins fixtures/list.py]


-- Implicit types for constructors
-- -------------------------------


[case testInitMethodWithImplicitSignature]
from typing import Undefined, Function
f1 = Undefined # type: Function[[A], A]
f2 = Undefined # type: Function[[A, A], A]
a = Undefined # type: A

A(a)   # Fail
f1 = A # Fail

A(a, a)
f2 = A

class A:
  def __init__(self, a, b): pass
[out]
main, line 6: Too few arguments for "A"
main, line 7: Incompatible types in assignment

[case testUsingImplicitTypeObjectWithIs]
from typing import Undefined
t = Undefined # type: type 
t = A
t = B

class A: pass
class B:
    def __init__(self): pass


-- Type compatibility
-- ------------------


[case testTupleTypeCompatibility]
from typing import Undefined, Any, Tuple
t1 = Undefined # type: Tuple[Any, A]
t2 = Undefined # type: Tuple[A, Any]
t3 = Undefined # type: Tuple[Any, Any]
t4 = Undefined # type: Tuple[A, A]
t5 = Undefined # type: Tuple[Any, Any, Any]

t3 = t5 # E: Incompatible types in assignment
t5 = t4 # E: Incompatible types in assignment

t1 = t1
t1 = t2
t1 = t3
t1 = t4
t2 = t1
t2 = t3
t2 = t4
t3 = t1
t3 = t2
t3 = t4
t4 = t1
t4 = t2
t4 = t3

class A: pass
[builtins fixtures/tuple.py]

[case testFunctionTypeCompatibilityAndReturnTypes]
from typing import Undefined, Any, Function
f1 = Undefined # type: Function[[], Any]
f2 = Undefined # type: Function[[], A]
f3 = Undefined # type: Function[[], None]

f2 = f3 # E: Incompatible types in assignment

f1 = f2
f1 = f3
f2 = f1
f3 = f1

class A: pass

[case testFunctionTypeCompatibilityAndArgumentTypes]
from typing import Undefined, Any, Function
f1 = Undefined # type: Function[[A, Any], None]
f2 = Undefined # type: Function[[Any, A], None]
f3 = Undefined # type: Function[[A, A], None]

f1 = f1
f1 = f2
f1 = f3

f2 = f1
f2 = f2
f2 = f3

f3 = f1
f3 = f2
f3 = f3

class A: pass

[case testFunctionTypeCompatibilityAndArgumentCounts]
from typing import Undefined, Any, Function
f1 = Undefined # type: Function[[Any], None]
f2 = Undefined # type: Function[[Any, Any], None]

f1 = f2 # E: Incompatible types in assignment


-- Overriding
-- ----------


[case testOverridingMethodWithDynamicTypes]
from typing import Undefined, Any
a, b = Undefined, Undefined # type: (A, B)

b.f(b) # E: Argument 1 to "f" of "B" has incompatible type "B"
a = a.f(b)

class B:
    def f(self, x: 'A') -> 'B':
        pass
    def g(self, x: 'B') -> None:
        pass
class A(B):
    def f(self, x: Any) -> Any:
        pass
    def g(self, x: Any) -> None:
        pass

[case testOverridingMethodWithImplicitDynamicTypes]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)

b.f(b) # E: Argument 1 to "f" of "B" has incompatible type "B"
a = a.f(b)

class B:
    def f(self, x: 'A') -> 'B':
        pass
    def g(self, x: 'B') -> None:
        pass
class A(B):
    def f(self, x):
        pass
    def g(self, x):
        pass

[case testOverridingMethodAcrossHierarchy]
import typing
class C:
    def f(self, a: 'A') -> None: pass
class B(C):
    def f(self, a): pass
class A(B):
    def f(self, a: 'D') -> None: # E: Argument 1 of "f" incompatible with supertype "C"
        pass
class D: pass
[out]
main: In class "A":

[case testInvalidOverrideArgumentCountWithImplicitSignature1]
import typing
class B:
    def f(self, x: A) -> None: pass
class A(B):
    def f(self, x, y): # Fail
        x()
[out]
main: In class "A":
main, line 5: Signature of "f" incompatible with supertype "B"

[case testInvalidOverrideArgumentCountWithImplicitSignature2]
import typing
class B:
    def f(self, x, y): pass
class A(B):
    def f(self, x: 'A') -> None: # E: Signature of "f" incompatible with supertype "B"
        pass
[out]
main: In class "A":
