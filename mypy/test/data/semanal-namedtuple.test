[case testSimpleNamedtuple]
from collections import namedtuple
N = namedtuple('N', ['a'])
def f() -> N: pass
[out]
MypyFile:1(
  ImportFrom:1(collections, [namedtuple : namedtuple])
  AssignmentStmt:2(
    NameExpr(N* [__main__.N])
    NamedTupleExpr:2(N, Tuple[Any]))
  FuncDef:3(
    f
    def () -> Tuple[Any, fallback=__main__.N]
    Block:3(
      PassStmt:3())))

[case testTwoItemNamedtuple]
from collections import namedtuple
N = namedtuple('N', ['a', 'xyz'])
def f() -> N: pass
[out]
MypyFile:1(
  ImportFrom:1(collections, [namedtuple : namedtuple])
  AssignmentStmt:2(
    NameExpr(N* [__main__.N])
    NamedTupleExpr:2(N, Tuple[Any, Any]))
  FuncDef:3(
    f
    def () -> Tuple[Any, Any, fallback=__main__.N]
    Block:3(
      PassStmt:3())))

[case testNamedTupleWithItemTypes]
from typing import NamedTuple
N = NamedTuple('N', [('a', int),
                     ('b', str)])
[out]
MypyFile:1(
  ImportFrom:1(typing, [NamedTuple : NamedTuple])
  AssignmentStmt:2(
    NameExpr(N* [__main__.N])
    NamedTupleExpr:2(N, Tuple[builtins.int, builtins.str])))

[case testNamedTupleBaseClass]
from collections import namedtuple
class A(namedtuple('N', ['x'])): pass
[out]
MypyFile:1(
  ImportFrom:1(collections, [namedtuple : namedtuple])
  ClassDef:2(
    A
    BaseType(
      __main__.N)
    PassStmt:2()))

[case testNamedTupleBaseClassWithItemTypes]
from typing import NamedTuple
class A(NamedTuple('N', [('x', int)])): pass
[out]
MypyFile:1(
  ImportFrom:1(typing, [NamedTuple : NamedTuple])
  ClassDef:2(
    A
    BaseType(
      __main__.N)
    PassStmt:2()))

[case testInvalidNamedTupleBaseClass]
from typing import NamedTuple
class A(NamedTuple('N', [1])): pass
class B(A): pass
[out]
main, line 2: Tuple expected as NamedTuple() field
