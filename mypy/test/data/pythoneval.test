-- Test cases for running mypy programs using CPython and type checking using
-- full stubs.
-- 
-- These are mostly regression tests.


[case testHello]
import typing
print('hello, world')
[out]
hello, world

[case testAbstractBaseClasses]
import re
from typing import Sized, Sequence, Iterator, Iterable, Mapping, AbstractSet

def check(o, t):
    rep = re.sub('0x[0-9a-f]+', '0x...', repr(o))
    print(rep, t, isinstance(o, t))

def f():
    check('x', Sized)
    check([1], Sequence)
    check({1:3}, Sequence)
    check(iter('x'), Iterator)
    check('x', Iterable)
    check({}, Mapping)
    check(set([1]), AbstractSet)

f()
[out]
'x' <class 'typing.Sized'> True
[1] <class 'typing.Sequence'> True
{1: 3} <class 'typing.Sequence'> False
<str_iterator object at 0x...> <class 'typing.Iterator'> True
'x' <class 'typing.Iterable'> True
{} <class 'typing.Mapping'> True
{1} <class 'typing.AbstractSet'> True

[case testSized]
from typing import Sized
class A(Sized):
    def __len__(self): return 5
print(len(A()))
[out]
5

[case testAbstractClassInOverload]
from typing import overload, Sized
class A(Sized):
    def __len__(self): return 5
class B:
    def __len__(self): return 6
@overload
def f(s: Sized) -> None: print('sized')
@overload
def f(s) -> None: print('other')
f('x')
f(A())
f(1)
f(B())  # Sized is actually a Protocol
[out]
sized
sized
other
sized

[case testOverloadUsingMatchAndPattern]
import re
from typing import overload, Any, Match, Pattern
@overload
def f(x: Match) -> None: print('match')
@overload
def f(x: Any) -> None: print('something else')

f(1)
f(re.match('x', 'x'))

@overload
def g(x: Pattern) -> None: print('pattern')
@overload
def g(x: Any) -> None: print('something else')

g(1)
g(re.compile(''))
[out]
something else
match
something else
pattern

[case testReversed]
from typing import Reversible
class A(Reversible):
    def __reversed__(self): return iter('foo')
print(list(reversed(range(5))))
print(list(reversed([1,2,3])))
print(list(reversed('abc')))
print(list(reversed(A())))
[out]
-- Duplicate [ at line beginning.
[[4, 3, 2, 1, 0]
[[3, 2, 1]
[['c', 'b', 'a']
[['f', 'o', 'o']

[case testIntAndFloatConversion]
from typing import SupportsInt, SupportsFloat
class A(SupportsInt):
    def __int__(self): return 5
class B(SupportsFloat):
    def __float__(self): return 1.2
print(int(1))
print(int(6.2))
print(int('3'))
print(int(b'4'))
print(int(A()))
print(float(-9))
print(float(B()))
[out]
1
6
3
4
5
-9.0
1.2

[case testAbs]
from typing import SupportsAbs
class A(SupportsAbs[float]):
    def __abs__(self) -> float: return 5.5
    
print(abs(-1))
print(abs(-1.2))
print(abs(A())) # TODO fix type inference
[out]
1
1.2
5.5

[case testRound]
from typing import SupportsRound
class A(SupportsRound):
    def __round__(self, ndigits=0): return 'x%d' % ndigits
print(round(1.6))
print(round(A()))
print(round(A(), 2))
[out]
2
x0
x2

[case testOverloadUsingSupportsInt]
from typing import overload, SupportsInt
@overload
def f(i: SupportsInt) -> None: print('int-like')
@overload
def f(i) -> None: print('other')
f(1.2)
f(3)
f('x')
f([2])
[out]
int-like
int-like
other
other

[case testOverloadWithOptionalArg]
from typing import overload
@overload
def f(x: int, y: str = 'x') -> None: print(x, y)
@overload
def f(x: str) -> None: print(x)
f(1)
f('x')
f(1, 'y')
[out]
1 x
x
1 y

[case testOverloadWithOptionalArg2-skip]
from typing import overload
@overload
def f(x: int, y: str = 'x') -> None: print(x, y)
@overload
def f(x: str) -> None: print(x)
f(x=1)
f(x='x')
f(x=1, y='y')
[out]
1 x
x
1 y

[case testCallMethodViaTypeObject]
import typing
print(list.__add__([1, 2], [3, 4]))
[out]
[[1, 2, 3, 4]

[case testClassDataAttribute]
import typing
class A:
    x = 0
print(A.x)
A.x += 1
print(A.x)
[out]
0
1

[case testInheritedClassAttribute]
import typing
class A:
    x = 1
    def f(self) -> None: print('f')
class B(A):
    pass
B.f(None)
print(B.x)
[out]
f
1

[case testFunctionDecorator]
from typing import typevar, cast
ftype = typevar('ftype')
def logged(f: ftype) -> ftype:
    def g(*args, **kwargs):
        print('enter', f.__name__)
        r = f(*args, **kwargs)
        print('exit', f.__name__)
        return r
    return cast(ftype, g)

@logged
def foo(s: str) -> str:
    print('foo', s)
    return s + '!'

print(foo('y'))
print(foo('x'))
[out]
enter foo
foo y
exit foo
y!
enter foo
foo x
exit foo
x!

[case testModuleAttributes]
import math
import typing
print(math.__name__)
print(type(math.__dict__))
print(type(math.__doc__))
print(math.__class__)
[out]
math
<class 'dict'>
<class 'str'>
<class 'module'>

[case testSpecialAttributes]
import typing
class A: pass
print(object().__doc__)
print(A().__class__)
[out]
The most base type
<class '__main__.A'>

[case testFunctionAttributes]
import typing
print(ord.__class__)
print(ord.__doc__[:10])
print(ord.__name__)
print(ord.__module__)
[out]
<class 'builtin_function_or_method'>
ord(c) ->
ord
builtins

[case testTypeAttributes]
import typing
print(str.__class__)
print(str.__doc__[:10])
print(str.__name__)
print(str.__module__)
print(type(str.__dict__))
[out]
<class 'type'>
str(string
str
builtins
<class 'dict_proxy'>

[case testBoolCompatibilityWithInt]
import typing
x = 0
x = True
print(bool('x'))
print(bool(''))
[out]
True
False

[case testCallBuiltinTypeObjectsWithoutArguments]
import typing
print(int())
print(repr(str()))
print(repr(bytes()))
print(float())
print(bool())
[out]
0
''
b''
0.0
False

[case testUnicode_python2]
import typing
x = unicode('xyz', 'latin1')
print x
x = u'foo'
print x
[out]
xyz
foo

[case testXrangeAndRange_python2]
import typing
for i in xrange(2):
    print i
for i in range(3):
    print i
[out]
0
1
0
1
2

[case testIntegerDivision]
import typing
x = 1 / 2
x = 1.5
[out]

[case testIterator_python2]
import typing, sys
x = iter('bar')
print x.next(), x.next()
[out]
b a

[case testEncodeAndDecode_python2]
import typing
print 'a'.encode('latin1')
print 'b'.decode('latin1')
print u'c'.encode('latin1')
print u'd'.decode('latin1')
[out]
a
b
c
d

[case testHasKey_python2]
import typing
d = {1: 'x'}
print d.has_key(1)
print d.has_key(2)
[out]
True
False

[case testIntegerDivision_python2]
import typing
x = 1 / 2
x = 2
[out]

[case testFloatDivision_python2]
import typing
x = 1.0 / 2.0
x = 1.0 / 2
x = 1 / 2.0
x = 1.5
[out]

[case testStaticmethod]
import typing
class A:
    @staticmethod
    def f(x: str) -> int: return int(x)
print(A.f('12'))
print(A().f('34'))
[out]
12
34

[case testIntMethods]
import typing
print(int.from_bytes(b'ab', 'big'))
n = 0
print(n.from_bytes(b'ac', 'big'))
print(n.from_bytes([2, 3], 'big'))
print(n.to_bytes(2, 'big'))
[out]
24930
24931
515
b'\x00\x00'

[case testFloatMethods]
import typing
print(1.5.as_integer_ratio())
print(1.5.hex())
print(2.0.is_integer())
print(float.fromhex('0x1.8'))
[out]
(3, 2)
0x1.8000000000000p+0
True
1.5

[case testArray]
import typing
import array
print(type(array.typecodes))
[out]
<class 'str'>

[case testDictFromkeys]
import typing
d = dict.fromkeys('foo')
d['x'] = 2
d2 = dict.fromkeys([1, 2], b'')
d2[2] = b'foo'
[out]

[case testReadOnlyProperty]
class A:
    x = 2
    @property
    def f(self) -> int:
        return self.x + 1
print(A().f)
[out]
3

[case testIsinstanceWithTuple]
from typing import Any
x = Any((1, 'x'))
if isinstance(x, tuple):
    print(x[0], x[1])
[out]
1 x
