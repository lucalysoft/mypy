[case testEmptyFile]
[out]

[case testSingleFunction]
def f():
    x = 1
[out]
def f(): pass

[case testTwoFunctions]
def f(a, b):
    x = 1
def g(arg):
    pass
[out]
def f(a, b): pass
def g(arg): pass

[case testDefaltArgInt]
def f(a, b=2): pass
def g(b=-1, c=0): pass
[out]
def f(a, b=2): pass
def g(b=-1, c=0): pass

[case testDefaultArgNone]
def f(x=None): pass
[out]
def f(x=None): pass

[case testDefaultArgStr]
def f(x='foo'): pass
[out]
def f(x=''): pass

[case testDefaultArgBytes]
def f(x=b'foo'): pass
[out]
def f(x=b''): pass

[case testDefaultArgFloat]
def f(x=1.2): pass
[out]
def f(x=0.0): pass

[case testDefaultArgOther]
def f(x=ord): pass
[out]
from typing import Undefined

def f(x=Undefined): pass

[case testVarArgs]
def f(x, *y): pass
[out]
def f(x, *y): pass

[case testKwVarArgs]
def f(x, **y): pass
[out]
def f(x, **y): pass

[case testClass]
class A:
    def f(self, x):
        x = 1
def g(): pass
[out]
class A:
    def f(self, x): pass
def g(): pass

[case testVariable]
x = 1
[out]
from typing import Undefined, Any

x = Undefined(Any)

[case testClassVariable]
class C:
    x = 1
[out]
from typing import Undefined, Any

class C:
    x = Undefined(Any)

[case testSelfAssignment]
class C:
    def __init__(self):
        self.x = 1
        x.y = 2
[out]
from typing import Undefined, Any

class C:
    x = Undefined(Any)
    def __init__(self): pass

-- More test cases:
--   multiple variable assignment
--   kw-only args
--   skip __ attributes
--   skip _ functions/variables
--   only include stuff in __all__
--   packages
--   ? base classes
