[case testEmptyFile]
[out]

[case testSingleFunction]
def f():
    x = 1
[out]
def f(): pass

[case testTwoFunctions]
def f(a, b):
    x = 1
def g(arg):
    pass
[out]
def f(a, b): pass
def g(arg): pass

[case testDefaltArgInt]
def f(a, b=2): pass
def g(b=-1, c=0): pass
[out]
def f(a, b=2): pass
def g(b=-1, c=0): pass

[case testDefaultArgNone]
def f(x=None): pass
[out]
def f(x=None): pass

[case testDefaultArgStr]
def f(x='foo'): pass
[out]
def f(x=''): pass

[case testDefaultArgBytes]
def f(x=b'foo'): pass
[out]
def f(x=b''): pass

[case testDefaultArgFloat]
def f(x=1.2): pass
[out]
def f(x=0.0): pass

[case testDefaultArgOther]
def f(x=ord): pass
[out]
from typing import Undefined

def f(x=Undefined): pass

[case testVarArgs]
def f(x, *y): pass
[out]
def f(x, *y): pass

[case testKwVarArgs]
def f(x, **y): pass
[out]
def f(x, **y): pass

[case testClass]
class A:
    def f(self, x):
        x = 1
def g(): pass
[out]
class A:
    def f(self, x): pass

def g(): pass

[case testVariable]
x = 1
[out]
from typing import Undefined, Any

x = Undefined(Any)

[case testClassVariable]
class C:
    x = 1
[out]
from typing import Undefined, Any

class C:
    x = Undefined(Any)

[case testSelfAssignment]
class C:
    def __init__(self):
        self.x = 1
        x.y = 2
[out]
from typing import Undefined, Any

class C:
    x = Undefined(Any)
    def __init__(self): pass

[case testSelfAndClassBodyAssignment]
x = 1
class C:
    x = 1
    def __init__(self):
        self.x = 1
        self.x = 1
[out]
from typing import Undefined, Any

x = Undefined(Any)

class C:
    x = Undefined(Any)
    def __init__(self): pass

[case testEmptyClass]
class A: pass
[out]
class A: pass

[case testPrivateFunction]
def _f(): pass
def g(): pass
[out]
def g(): pass

[case testPrivateMethod]
class A:
    def _f(self): pass
[out]
class A: pass

[case testPrivateVar]
_x = 1
class A:
    _y = 1
[out]
class A: pass

[case testSpecialInternalVar]
__all__ = []
__author__ = ''
__version__ = ''
[out]

[case testBaseClass]
class A: pass
class B(A): pass
[out]
class A: pass
class B(A): pass

[case testBaseClassNotInCurrentModule]
class B(C): pass
[out]
class B: pass

[case testDecoratedFunction]
@decorator
def foo(x): pass
[out]
def foo(x): pass

[case testMultipleAssignment]
x, y = 1, 2
[out]
from typing import Undefined, Any

x = Undefined(Any)
y = Undefined(Any)

[case testMultipleAssignment2]
[x, y] = 1, 2
[out]
from typing import Undefined, Any

x = Undefined(Any)
y = Undefined(Any)

[case testKeywordOnlyArg]
def f(x, *, y=1): pass
def g(x, *, y=1, z=2): pass
[out]
def f(x, *, y=1): pass
def g(x, *, y=1, z=2): pass

[case testProperty]
class A:
    @property
    def f(self):
        return 1
    @f.setter
    def f(self, x): pass
[out]
class A:
    @property
    def f(self): pass
    @f.setter
    def f(self, x): pass

[case testStaticMethod]
class A:
    @staticmethod
    def f(x): pass
[out]
class A:
    @staticmethod
    def f(x): pass

[case testClassMethod]
class A:
    @classmethod
    def f(cls): pass
[out]
class A:
    @classmethod
    def f(cls): pass

[case testIfMainCheck]
def a(): pass
if __name__ == '__main__':
    x = 1
    def f(): pass
def b(): pass
[out]
def a(): pass
def b(): pass

[case testImportStar]
from x import *
from a.b import *
def f(): pass
[out]
from x import *
from a.b import *

def f(): pass

[case testNoSpacesBetweenEmptyClasses]
class X:
    def g(self): pass
class A: pass
class B: pass
class C:
    def f(self): pass
[out]
class X:
    def g(self): pass

class A: pass
class B: pass

class C:
    def f(self): pass

[case testExceptionBaseClasses]
class A(Exception): pass
class B(ValueError): pass
[out]
class A(Exception): pass
class B(ValueError): pass

[case testOmitSomeSpecialMethos]
class A:
    def __str__(self): pass
    def __repr__(self): pass
    def __eq__(self): pass
    def __getstate__(self): pass
    def __setstate__(self, state): pass
[out]
class A:
    def __eq__(self): pass

[case testOmitDefsNotInAll_import]
__all__ = [] + ['f']
def f(): pass
def g(): pass
[out]
def f(): pass

# g not in __all__

[case testVarDefsNotInAll_import]
__all__ = [] + ['f', 'g']
def f(): pass
x = 1
y = 1
def g(): pass
[out]
def f(): pass

# x not in __all__
# y not in __all__

def g(): pass

[case testIncludeClassNotInAll_import]
__all__ = [] + ['f']
def f(): pass
class A: pass
[out]
def f(): pass

class A: pass

[case testAllAndClass_import]
__all__ = ['A']
class A:
    x = 1
    def f(self): pass
[out]
from typing import Undefined, Any

class A:
    x = Undefined(Any)
    def f(self): pass

[case testMultiplePrivateDefs]
class A: pass
_x = 1
_y = 1
_z = 1
class C: pass
[out]
class A: pass
class C: pass

[case testIncludeFromImportIfInAll_import]
from re import match, search, sub
__all__ = ['match', 'sub', 'x']
x = 1
[out]
from typing import Undefined, Any
from re import match, sub

match = match
sub = sub

x = Undefined(Any)

[case testRelativeImportAll]
from .x import *
[out]
from .x import *

[case testCommentForUndefinedName_import]
__all__ = ['f', 'x', 'C', 'g']
def f(): pass
x = 1
class C:
    def g(self): pass
[out]
from typing import Undefined, Any

def f(): pass

x = Undefined(Any)

class C:
    def g(self): pass

# Names in __all__ but no definition generated:
#   g


-- More features:
--   packages (create directory, find __init__, etc.)

--   namedtuple
--   do not export deleted names
--   ? general base classes
