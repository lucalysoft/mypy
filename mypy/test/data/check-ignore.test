[case testIgnoreTypeError]
x = 1
x() # type: ignore
x() # E: "int" not callable

[case testIgnoreUndefinedName]
x = 1
y # type: ignore
z # E: Name 'z' is not defined

[case testIgnoreImportError]
import xyz_m # type: ignore
xyz_m.foo
1() # E: "int" not callable

[case testIgnoreImportFromError]
from xyz_m import a, b # type: ignore
a.foo
b()
1() # E: "int" not callable

[case testIgnoreImportFromErrorMultiline]
from xyz_m import ( # type: ignore
    a, b
)
a.foo
b()
1() # E: "int" not callable

[case testIgnoreImportAllError]
from xyz_m import * # type: ignore
x   # E: Name 'x' is not defined
1()

[case testIgnoreAssignmentTypeError]
x = 1
x = '' # type: ignore
x = '' # E: Incompatible types in assignment (expression has type "str", variable has type "int")

[case testIgnoreInvalidOverride]
class A:
    def f(self) -> int: pass
class B(A):
    def f(self) -> str: pass # type: ignore

[case testIgnoreMissingModuleAttribute]
import m
m.x = object # type: ignore
m.f() # type: ignore
m.y # E: "module" has no attribute "y"
[file m.py]
[builtins fixtures/module.py]

[case testIgnoreTypeInferenceError]
x = [] # type: ignore
y = x
x.append(1)
[builtins fixtures/list.py]

[case testIgnoreTypeInferenceError2]
def f() -> None: pass
x = f() # type: ignore
y = x
x = 1
[builtins fixtures/list.py]

[case testIgnoreTypeInferenceErrorAndMultipleAssignment]
x, y = [], [] # type: ignore
z = x
z = y
[builtins fixtures/list.py]
