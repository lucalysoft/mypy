-- Test cases for the type checker related to varargs.


-- Varargs within body
-- -------------------


[case testVarArgsWithinFunction]
from typing import Undefined, Sequence
def f( *b: 'B') -> None:
    ab = Undefined # type: Sequence[B]
    ac = Undefined # type: Sequence[C]
    b = ac # E: Incompatible types in assignment (expression has type Sequence[C], variable has type Sequence[B])
    ac = b # E: Incompatible types in assignment (expression has type Sequence[B], variable has type Sequence[C])
    b = ab
    ab = b

class B: pass
class C: pass
[builtins fixtures/list.py]
[out]
main: In function "f":


-- Calling varargs function
-- ------------------------


[case testCallingVarArgsFunction]
from typing import Undefined
a = Undefined # type: A
b = Undefined # type: B
c = Undefined # type: C

f(c)       # E: Argument 1 to "f" has incompatible type "C"; expected "A"
f(a, b, c) # E: Argument 3 to "f" has incompatible type "C"; expected "A"
f(g())     # E: "g" does not return a value
f(a, g())  # E: "g" does not return a value
f()
f(a)
f(b)
f(a, b, a, b)

def f( *a: 'A') -> None: pass

def g() -> None: pass

class A: pass
class B(A): pass
class C: pass
[builtins fixtures/list.py]

[case testCallingVarArgsFunctionWithAlsoNormalArgs]
from typing import Undefined
a = Undefined # type: A
b = Undefined # type: B
c = Undefined # type: C

f(a)       # E: Argument 1 to "f" has incompatible type "A"; expected "C"
f(c, c)    # E: Argument 2 to "f" has incompatible type "C"; expected "A"
f(c, a, b, c)  # E: Argument 4 to "f" has incompatible type "C"; expected "A"
f(c)
f(c, a)
f(c, b, b, a, b)

def f(a: 'C', *b: 'A') -> None: pass

class A: pass
class B(A): pass
class C: pass
[builtins fixtures/list.py]

[case testCallingVarArgsFunctionWithDefaultArgs]
from typing import Undefined
a = Undefined # type: A
b = Undefined # type: B
c = Undefined # type: C

f(a)           # E: Argument 1 to "f" has incompatible type "A"; expected "C"
f(c, c)        # E: Argument 2 to "f" has incompatible type "C"; expected "A"
f(c, a, b, c)  # E: Argument 4 to "f" has incompatible type "C"; expected "A"
f()
f(c)
f(c, a)
f(c, b, b, a, b)

def f(a: 'C' = None, *b: 'A') -> None:
    pass

class A: pass
class B(A): pass
class C: pass
[builtins fixtures/list.py]

[case testCallVarargsFunctionWithIterable]
from typing import Iterable, Undefined
it1 = Undefined(Iterable[int])
it2 = Undefined(Iterable[str])
def f(*x: int) -> None: pass
f(*it1)
f(*it2) # E: Argument 1 to "f" has incompatible type Iterable[str]; expected "int"
[builtins fixtures/for.py]


-- Calling varargs function + type inference
-- -----------------------------------------


[case testTypeInferenceWithCalleeVarArgs]
from typing import Undefined, TypeVar
T = TypeVar('T')
a = Undefined # type: A
b = Undefined # type: B
c = Undefined # type: C
o = Undefined # type: object

a = f(o) # E: Incompatible types in assignment (expression has type "object", variable has type "A")
b = f(b, a) # E: Incompatible types in assignment (expression has type "A", variable has type "B")
b = f(a, b) # E: Incompatible types in assignment (expression has type "A", variable has type "B")

o = f()
a = f(a)
a = f(b)
a = f(a, b, a)
o = f(a, b, o)
c = f(c)

def f( *a: T) -> T:
    pass

class A: pass
class B(A): pass
class C: pass
[builtins fixtures/list.py]

[case testTypeInferenceWithCalleeVarArgsAndDefaultArgs]
from typing import Undefined, TypeVar
T = TypeVar('T')
a = Undefined # type: A
o = Undefined # type: object

a = f(o) # E: Incompatible types in assignment (expression has type "object", variable has type "A")
a = f(a, o) # E: Incompatible types in assignment (expression has type "object", variable has type "A")
a = f(a, a, o) # E: Incompatible types in assignment (expression has type "object", variable has type "A")
a = f(a, a, a, o) # E: Incompatible types in assignment (expression has type "object", variable has type "A")

a = f(a)
a = f(a, a)
a = f(a, a, a)

def f(a: T, b: T = None, *c: T) -> T:
    pass

class A: pass
[builtins fixtures/list.py]


-- Calling normal function with varargs
-- ------------------------------------


[case testCallingWithListVarArgs]
from typing import Undefined, List, Any
aa = Undefined # type: List[A]
ab = Undefined # type: List[B]
a = Undefined # type: A
b = Undefined # type: B

f(*aa)    # Fail
f(a, *ab) # Ok
f(a, b)
(Any(f))(*aa)     # IDEA: Move to check-dynamic?
(Any(f))(a, *ab)  # IDEA: Move to check-dynamic?

def f(a: 'A', b: 'B') -> None:
    pass

class A: pass
class B: pass
[builtins fixtures/list.py]
[out]
main, line 7: Argument 1 to "f" has incompatible type List[A]; expected "B"

[case testCallingWithTupleVarArgs]
from typing import Undefined
a = Undefined # type: A
b = Undefined # type: B
c = Undefined # type: C
cc = Undefined # type: CC

f(*(a, b, b)) # E: Argument 1 to "f" has incompatible type "Tuple[A, B, B]"; expected "C"
f(*(b, b, c)) # E: Argument 1 to "f" has incompatible type "Tuple[B, B, C]"; expected "A"
f(a, *(b, b)) # E: Argument 2 to "f" has incompatible type "Tuple[B, B]"; expected "C"
f(b, *(b, c)) # E: Argument 1 to "f" has incompatible type "B"; expected "A"
f(*(a, b))    # E: Too few arguments for "f"
f(*(a, b, c, c)) # E: Too many arguments for "f"
f(a, *(b, c, c)) # E: Too many arguments for "f"
f(*(a, b, c))
f(a, *(b, c))
f(a, b, *(c,))
f(a, *(b, cc))

def f(a: 'A', b: 'B', c: 'C') -> None: pass

class A: pass
class B: pass
class C: pass
class CC(C): pass
[builtins fixtures/tuple.py]

[case testInvalidVarArg]
from typing import Undefined
a = Undefined # type: A

f(*None)
f(*a)    # E: List or tuple expected as variable arguments
f(*(a,))

def f(a: 'A') -> None:
    pass

class A: pass
[builtins fixtures/tuple.py]


-- Calling varargs function with varargs
-- -------------------------------------


[case testCallingVarArgsFunctionWithListVarArgs]
from typing import Undefined, List
aa, ab, a, b = Undefined, Undefined, Undefined, Undefined # type: (List[A], List[B], A, B)
f(*aa)           # Fail
f(a, *aa)        # Fail
f(b, *ab)        # Fail
f(a, a, *ab)     # Fail
f(a, b, *aa)     # Fail
f(b, b, *ab)     # Fail
g(*ab)           # Fail
f(a, *ab)
f(a, b, *ab)
f(a, b, b, *ab)
g(*aa)

def f(a: 'A', *b: 'B') -> None: pass
def g(a: 'A', *b: 'A') -> None: pass
class A: pass
class B: pass
[builtins fixtures/list.py]
[out]
main, line 3: Argument 1 to "f" has incompatible type List[A]; expected "B"
main, line 4: Argument 2 to "f" has incompatible type List[A]; expected "B"
main, line 5: Argument 1 to "f" has incompatible type "B"; expected "A"
main, line 6: Argument 2 to "f" has incompatible type "A"; expected "B"
main, line 7: Argument 3 to "f" has incompatible type List[A]; expected "B"
main, line 8: Argument 1 to "f" has incompatible type "B"; expected "A"
main, line 9: Argument 1 to "g" has incompatible type List[B]; expected "A"

[case testCallingVarArgsFunctionWithTupleVarArgs]
from typing import Undefined
a, b, c, cc = Undefined, Undefined, Undefined, Undefined # type: (A, B, C, CC)

f(*(b, b, b))   # E: Argument 1 to "f" has incompatible type "Tuple[B, B, B]"; expected "A"
f(*(a, a, b))   # E: Argument 1 to "f" has incompatible type "Tuple[A, A, B]"; expected "B"
f(*(a, b, a))   # E: Argument 1 to "f" has incompatible type "Tuple[A, B, A]"; expected "B"
f(a, *(a, b))   # E: Argument 2 to "f" has incompatible type "Tuple[A, B]"; expected "B"
f(b, *(b, b))   # E: Argument 1 to "f" has incompatible type "B"; expected "A"
f(b, b, *(b,))  # E: Argument 1 to "f" has incompatible type "B"; expected "A"
f(a, a, *(b,))  # E: Argument 2 to "f" has incompatible type "A"; expected "B"
f(a, b, *(a,))  # E: Argument 3 to "f" has incompatible type "Tuple[A]"; expected "B"
f(*())          # E: Too few arguments for "f"
f(*(a, b, b))
f(a, *(b, b))
f(a, b, *(b,))

def f(a: 'A', *b: 'B') -> None:
    pass

class A: pass
class B: pass
class C: pass
class CC(C): pass
[builtins fixtures/list.py]


-- Varargs special cases
-- ---------------------


[case testDynamicVarArg]
from typing import Undefined, Any
d, a = Undefined, Undefined # type: (Any, A)
f(a, a, *d) # Fail
f(a, *d)    # Fail
f(*d)       # Ok

g(*d)
g(a, *d)
g(a, a, *d)

def f(a: 'A') -> None: pass
def g(a: 'A', *b: 'A') -> None: pass
class A: pass
[builtins fixtures/list.py]
[out]
main, line 3: Too many arguments for "f"
main, line 4: Too many arguments for "f"

[case testListVarArgsAndSubtyping]
from typing import Undefined, List
aa = Undefined # type: List[A]
ab = Undefined # type: List[B]

g(*aa) # E: Argument 1 to "g" has incompatible type List[A]; expected "B"
f(*aa)
f(*ab)
g(*ab)

def f( *a: 'A') -> None:
    pass

def g( *a: 'B') -> None:
    pass

class A: pass
class B(A): pass
[builtins fixtures/list.py]

[case testCallerVarArgsAndDefaultArgs]
from typing import Undefined
a, b = Undefined, Undefined # type: (A, B)
f(*())        # Fail
f(a, *[a])    # Fail
f(a, b, *[a]) # Fail
f(*(a, a, b)) # Fail
f(*(a,))
f(*(a, b))
f(*(a, b, b, b))
f(a, *[])
f(a, *[b])
f(a, *[b, b])

def f(a: 'A', b: 'B' = None, *c: 'B') -> None:
    pass

class A: pass
class B: pass
[builtins fixtures/list.py]
[out]
main, line 3: Too few arguments for "f"
main, line 4: Argument 2 to "f" has incompatible type List[A]; expected "B"
main, line 5: Argument 3 to "f" has incompatible type List[A]; expected "B"
main, line 6: Argument 1 to "f" has incompatible type "Tuple[A, A, B]"; expected "B"

[case testVarArgsAfterKeywordArgInCall1]
def f(x: int, y: str) -> None: pass
f(x=1, *[2])
[builtins fixtures/list.py]
[out]
main, line 2: "f" gets multiple values for keyword argument "x"
main, line 2: Argument 2 to "f" has incompatible type List[int]; expected "str"

[case testVarArgsAfterKeywordArgInCall2]
def f(x: int, y: str) -> None: pass
f(y='x', *[1])
[builtins fixtures/list.py]
[out]
main, line 2: "f" gets multiple values for keyword argument "y"
main, line 2: Argument 2 to "f" has incompatible type List[int]; expected "str"

[case testVarArgsAfterKeywordArgInCall3]
def f(x: int, y: str) -> None: pass
f(y='x', *(1,))
[builtins fixtures/list.py]

[case testVarArgsAfterKeywordArgInCall4]
def f(x: int, *, y: str) -> None: pass
f(y='x', *[1])
[builtins fixtures/list.py]

[case testVarArgsAfterKeywordArgInCall5]
def f(x: int, *, y: str) -> None: pass
f(y='x', *(1,))
[builtins fixtures/list.py]


-- Overloads + varargs
-- -------------------


[case testIntersectionTypesAndVarArgs]
from typing import Undefined, overload
a, b = Undefined, Undefined # type: (A, B)

b = f()        # E: Incompatible types in assignment (expression has type "A", variable has type "B")
b = f(a)       # E: Incompatible types in assignment (expression has type "A", variable has type "B")
b = f(a, b)    # E: Incompatible types in assignment (expression has type "A", variable has type "B")
a = f(b)       # E: Incompatible types in assignment (expression has type "B", variable has type "A")
a = f(b, b)    # E: Incompatible types in assignment (expression has type "B", variable has type "A")
b = f(a, *[b]) # E: Incompatible types in assignment (expression has type "A", variable has type "B")
b = f(*())
b = f(*(a,))   # E: Incompatible types in assignment (expression has type "A", variable has type "B")
b = f(*(a, b)) # E: Incompatible types in assignment (expression has type "A", variable has type "B")
a = f(*(b,))   # E: Incompatible types in assignment (expression has type "B", variable has type "A")
a = f(*(b, b)) # E: Incompatible types in assignment (expression has type "B", variable has type "A")
a = f(*[b])    # E: Incompatible types in assignment (expression has type "B", variable has type "A")

a = f()
a = f(a)
a = f(a, b)
b = f(b)
b = f(b, b)
a = f(a, *[b])
a = f(*())
a = f(*(a,))
a = f(*(a, b))
b = f(*(b,))
b = f(*(b, b))
b = f(*[b])

class A: pass
class B: pass

@overload
def f(a: A = None, *b: B) -> A: pass

@overload
def f(a: B, *b: B) -> B: pass
[builtins fixtures/list.py]


-- Caller varargs + type inference
-- -------------------------------


[case testCallerVarArgsListWithTypeInference]
from typing import Undefined, List, TypeVar, Tuple
S = TypeVar('S')
T = TypeVar('T')
a, b, aa = Undefined, Undefined, Undefined # type: (A, B, List[A])

a, b = f(*aa)    # Fail
b, b = f(*aa)    # Fail
a, a = f(b, *aa) # Fail
b, b = f(b, *aa) # Fail
b, b = f(b, b, *aa) # Fail
a, b = f(a, *a)  # Fail
a, b = f(*a)     # Fail

a, a = f(*aa)
b, a = f(b, *aa)
b, a = f(b, a, *aa)

def f(a: S, *b: T) -> Tuple[S, T]:
    pass

class A: pass
class B: pass
[builtins fixtures/list.py]
[out]
main, line 6: Argument 1 to "f" has incompatible type List[A]; expected "B"
main, line 7: Argument 1 to "f" has incompatible type List[A]; expected "B"
main, line 8: Argument 1 to "f" has incompatible type "B"; expected "A"
main, line 9: Argument 2 to "f" has incompatible type List[A]; expected "B"
main, line 10: Argument 3 to "f" has incompatible type List[A]; expected "B"
main, line 11: List or tuple expected as variable arguments
main, line 12: List or tuple expected as variable arguments

[case testCallerVarArgsTupleWithTypeInference]
from typing import Undefined, TypeVar, Tuple
S = TypeVar('S')
T = TypeVar('T')
a, b = Undefined, Undefined # type: (A, B)

a, a = f(*(a, b))   # E: Argument 1 to "f" has incompatible type "Tuple[A, B]"; expected "A"
b, b = f(a, *(b,))  # E: Argument 1 to "f" has incompatible type "A"; expected "B"
a, a = f(*(a, b))   # E: Argument 1 to "f" has incompatible type "Tuple[A, B]"; expected "A"
b, b = f(a, *(b,))  # E: Argument 1 to "f" has incompatible type "A"; expected "B"
a, b = f(*(a, b, b)) # E: Too many arguments for "f"

a, b = f(*(a, b))
a, b = f(a, *(b,))

def f(a: S, b: T) -> Tuple[S, T]: pass

class A: pass
class B: pass
[builtins fixtures/list.py]

[case testCallerVarargsAndComplexTypeInference]
from typing import Undefined, List, TypeVar, Generic, Tuple
T = TypeVar('T')
S = TypeVar('S')
a, b = Undefined, Undefined # type: (A, B)
ao = Undefined # type: List[object]
aa = Undefined # type: List[A]
ab = Undefined # type: List[B]

a, aa = G().f(*[a])  # Fail
aa, a = G().f(*[a])  # Fail
ab, aa = G().f(*[a]) # Fail

ao, ao = G().f(*[a]) # E: Incompatible types in assignment (expression has type List[None], variable has type List[object])
aa, aa = G().f(*[a]) # E: Incompatible types in assignment (expression has type List[None], variable has type List[A])

class G(Generic[T]):
    def f(self, *a: S) -> Tuple[List[S], List[T]]:
        pass

class A: pass
class B: pass
[builtins fixtures/list.py]
[out]
main, line 9: Incompatible types in assignment (expression has type List[A], variable has type "A")
main, line 9: Incompatible types in assignment (expression has type List[None], variable has type List[A])
main, line 10: Incompatible types in assignment (expression has type List[None], variable has type "A")
main, line 11: Argument 1 to "f" of "G" has incompatible type List[A]; expected "B"
main, line 11: Incompatible types in assignment (expression has type List[None], variable has type List[A])


-- Comment signatures
-- ------------------


[case testVarArgsAndCommentSignature]
import typing
def f(*x): # type: (*int) -> None
    pass
f(1)
f(1, 2)
f('') # E: Argument 1 to "f" has incompatible type "str"; expected "int"
f(1, '') # E: Argument 2 to "f" has incompatible type "str"; expected "int"
[builtins fixtures/list.py]


-- Subtyping
-- ---------


[case testVarArgsFunctionSubtyping]
from typing import Callable, Undefined
x = Undefined # type: Callable[[int], None]
def f(*x: int) -> None: pass
def g(*x: str) -> None: pass
x = f
x = g # E: Incompatible types in assignment (expression has type Callable[[str], None], variable has type Callable[[int], None])
[builtins fixtures/list.py]
[out]
